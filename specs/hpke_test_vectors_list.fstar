// Skipped unsupported test case 0

let test1_mode: HPKE.mode = HPKE.Base
let test1_ciphersuite = DH.DH_Curve25519, Hash.SHA2_256, AEAD.AES128_GCM, Hash.SHA2_256

// generated: "4f6465206f6e2061204772656369616e2055726e"
inline_for_extraction
let size_test1_info: size_nat = 20
let test1_info_list : l:list uint8{List.Tot.length l == size_test1_info} =
  [@inline_let]
  let l = [
    u8 0x4f; u8 0x64; u8 0x65; u8 0x20; u8 0x6f;
    u8 0x6e; u8 0x20; u8 0x61; u8 0x20; u8 0x47;
    u8 0x72; u8 0x65; u8 0x63; u8 0x69; u8 0x61;
    u8 0x6e; u8 0x20; u8 0x55; u8 0x72; u8 0x6e;
  ] in
  assert_norm(List.Tot.length l == size_test1_info);
  l
let test1_info : lbytes size_test1_info = createL test1_info_list

// generated: "919f0e1b7c361d1e5a3d0086ba94edeb6d2df9f756654741731f4e84cb813bdb"
inline_for_extraction
let size_test1_skRm: size_nat = 32
let test1_skRm_list : l:list uint8{List.Tot.length l == size_test1_skRm} =
  [@inline_let]
  let l = [
    u8 0x91; u8 0x9f; u8 0x0e; u8 0x1b; u8 0x7c;
    u8 0x36; u8 0x1d; u8 0x1e; u8 0x5a; u8 0x3d;
    u8 0x00; u8 0x86; u8 0xba; u8 0x94; u8 0xed;
    u8 0xeb; u8 0x6d; u8 0x2d; u8 0xf9; u8 0xf7;
    u8 0x56; u8 0x65; u8 0x47; u8 0x41; u8 0x73;
    u8 0x1f; u8 0x4e; u8 0x84; u8 0xcb; u8 0x81;
    u8 0x3b; u8 0xdb;
  ] in
  assert_norm(List.Tot.length l == size_test1_skRm);
  l
let test1_skRm : lbytes size_test1_skRm = createL test1_skRm_list

// generated: "232ce0da9fd45b8d500781a5ee1b0a2cf64411dd08d6442400ab05a4d29733a8"
inline_for_extraction
let size_test1_skEm: size_nat = 32
let test1_skEm_list : l:list uint8{List.Tot.length l == size_test1_skEm} =
  [@inline_let]
  let l = [
    u8 0x23; u8 0x2c; u8 0xe0; u8 0xda; u8 0x9f;
    u8 0xd4; u8 0x5b; u8 0x8d; u8 0x50; u8 0x07;
    u8 0x81; u8 0xa5; u8 0xee; u8 0x1b; u8 0x0a;
    u8 0x2c; u8 0xf6; u8 0x44; u8 0x11; u8 0xdd;
    u8 0x08; u8 0xd6; u8 0x44; u8 0x24; u8 0x00;
    u8 0xab; u8 0x05; u8 0xa4; u8 0xd2; u8 0x97;
    u8 0x33; u8 0xa8;
  ] in
  assert_norm(List.Tot.length l == size_test1_skEm);
  l
let test1_skEm : lbytes size_test1_skEm = createL test1_skEm_list

// generated: "ac511615dee12b2e11170f1272c3972e6e2268d8fb05fc93c6b008065f61f22f"
inline_for_extraction
let size_test1_pkRm: size_nat = 32
let test1_pkRm_list : l:list uint8{List.Tot.length l == size_test1_pkRm} =
  [@inline_let]
  let l = [
    u8 0xac; u8 0x51; u8 0x16; u8 0x15; u8 0xde;
    u8 0xe1; u8 0x2b; u8 0x2e; u8 0x11; u8 0x17;
    u8 0x0f; u8 0x12; u8 0x72; u8 0xc3; u8 0x97;
    u8 0x2e; u8 0x6e; u8 0x22; u8 0x68; u8 0xd8;
    u8 0xfb; u8 0x05; u8 0xfc; u8 0x93; u8 0xc6;
    u8 0xb0; u8 0x08; u8 0x06; u8 0x5f; u8 0x61;
    u8 0xf2; u8 0x2f;
  ] in
  assert_norm(List.Tot.length l == size_test1_pkRm);
  l
let test1_pkRm : lbytes size_test1_pkRm = createL test1_pkRm_list

// generated: "ab8b7fdda7ed10c410079909350948ff63bc044b40575cc85636f3981bb8d258"
inline_for_extraction
let size_test1_pkEm: size_nat = 32
let test1_pkEm_list : l:list uint8{List.Tot.length l == size_test1_pkEm} =
  [@inline_let]
  let l = [
    u8 0xab; u8 0x8b; u8 0x7f; u8 0xdd; u8 0xa7;
    u8 0xed; u8 0x10; u8 0xc4; u8 0x10; u8 0x07;
    u8 0x99; u8 0x09; u8 0x35; u8 0x09; u8 0x48;
    u8 0xff; u8 0x63; u8 0xbc; u8 0x04; u8 0x4b;
    u8 0x40; u8 0x57; u8 0x5c; u8 0xc8; u8 0x56;
    u8 0x36; u8 0xf3; u8 0x98; u8 0x1b; u8 0xb8;
    u8 0xd2; u8 0x58;
  ] in
  assert_norm(List.Tot.length l == size_test1_pkEm);
  l
let test1_pkEm : lbytes size_test1_pkEm = createL test1_pkEm_list

// generated: "ab8b7fdda7ed10c410079909350948ff63bc044b40575cc85636f3981bb8d258"
inline_for_extraction
let size_test1_enc: size_nat = 32
let test1_enc_list : l:list uint8{List.Tot.length l == size_test1_enc} =
  [@inline_let]
  let l = [
    u8 0xab; u8 0x8b; u8 0x7f; u8 0xdd; u8 0xa7;
    u8 0xed; u8 0x10; u8 0xc4; u8 0x10; u8 0x07;
    u8 0x99; u8 0x09; u8 0x35; u8 0x09; u8 0x48;
    u8 0xff; u8 0x63; u8 0xbc; u8 0x04; u8 0x4b;
    u8 0x40; u8 0x57; u8 0x5c; u8 0xc8; u8 0x56;
    u8 0x36; u8 0xf3; u8 0x98; u8 0x1b; u8 0xb8;
    u8 0xd2; u8 0x58;
  ] in
  assert_norm(List.Tot.length l == size_test1_enc);
  l
let test1_enc : lbytes size_test1_enc = createL test1_enc_list

// generated: "44807c99177b0f3761d66f422945a21317a1532ca038e976594487a6a7e58fbf"
inline_for_extraction
let size_test1_zz: size_nat = 32
let test1_zz_list : l:list uint8{List.Tot.length l == size_test1_zz} =
  [@inline_let]
  let l = [
    u8 0x44; u8 0x80; u8 0x7c; u8 0x99; u8 0x17;
    u8 0x7b; u8 0x0f; u8 0x37; u8 0x61; u8 0xd6;
    u8 0x6f; u8 0x42; u8 0x29; u8 0x45; u8 0xa2;
    u8 0x13; u8 0x17; u8 0xa1; u8 0x53; u8 0x2c;
    u8 0xa0; u8 0x38; u8 0xe9; u8 0x76; u8 0x59;
    u8 0x44; u8 0x87; u8 0xa6; u8 0xa7; u8 0xe5;
    u8 0x8f; u8 0xbf;
  ] in
  assert_norm(List.Tot.length l == size_test1_zz);
  l
let test1_zz : lbytes size_test1_zz = createL test1_zz_list

// generated: "002000010001005d0f5548cb13d7eba5320ae0e21b1ee274aac7ea1cce02570cf993d1b2456449debcca602075cf6f8ef506613a82e1c73727e2c912d0c49f16cd56fc524af4ce"
inline_for_extraction
let size_test1_key_schedule_context: size_nat = 71
let test1_key_schedule_context_list : l:list uint8{List.Tot.length l == size_test1_key_schedule_context} =
  [@inline_let]
  let l = [
    u8 0x00; u8 0x20; u8 0x00; u8 0x01; u8 0x00;
    u8 0x01; u8 0x00; u8 0x5d; u8 0x0f; u8 0x55;
    u8 0x48; u8 0xcb; u8 0x13; u8 0xd7; u8 0xeb;
    u8 0xa5; u8 0x32; u8 0x0a; u8 0xe0; u8 0xe2;
    u8 0x1b; u8 0x1e; u8 0xe2; u8 0x74; u8 0xaa;
    u8 0xc7; u8 0xea; u8 0x1c; u8 0xce; u8 0x02;
    u8 0x57; u8 0x0c; u8 0xf9; u8 0x93; u8 0xd1;
    u8 0xb2; u8 0x45; u8 0x64; u8 0x49; u8 0xde;
    u8 0xbc; u8 0xca; u8 0x60; u8 0x20; u8 0x75;
    u8 0xcf; u8 0x6f; u8 0x8e; u8 0xf5; u8 0x06;
    u8 0x61; u8 0x3a; u8 0x82; u8 0xe1; u8 0xc7;
    u8 0x37; u8 0x27; u8 0xe2; u8 0xc9; u8 0x12;
    u8 0xd0; u8 0xc4; u8 0x9f; u8 0x16; u8 0xcd;
    u8 0x56; u8 0xfc; u8 0x52; u8 0x4a; u8 0xf4;
    u8 0xce;
  ] in
  assert_norm(List.Tot.length l == size_test1_key_schedule_context);
  l
let test1_key_schedule_context : lbytes size_test1_key_schedule_context = createL test1_key_schedule_context_list

// generated: "c104521df56de97b517165011f09e0ea2a36b9af339a9de402c8b88547c8b67e"
inline_for_extraction
let size_test1_secret: size_nat = 32
let test1_secret_list : l:list uint8{List.Tot.length l == size_test1_secret} =
  [@inline_let]
  let l = [
    u8 0xc1; u8 0x04; u8 0x52; u8 0x1d; u8 0xf5;
    u8 0x6d; u8 0xe9; u8 0x7b; u8 0x51; u8 0x71;
    u8 0x65; u8 0x01; u8 0x1f; u8 0x09; u8 0xe0;
    u8 0xea; u8 0x2a; u8 0x36; u8 0xb9; u8 0xaf;
    u8 0x33; u8 0x9a; u8 0x9d; u8 0xe4; u8 0x02;
    u8 0xc8; u8 0xb8; u8 0x85; u8 0x47; u8 0xc8;
    u8 0xb6; u8 0x7e;
  ] in
  assert_norm(List.Tot.length l == size_test1_secret);
  l
let test1_secret : lbytes size_test1_secret = createL test1_secret_list

// generated: "e34afc8f8f4c2906b310d8e4e4d526f0"
inline_for_extraction
let size_test1_key: size_nat = 16
let test1_key_list : l:list uint8{List.Tot.length l == size_test1_key} =
  [@inline_let]
  let l = [
    u8 0xe3; u8 0x4a; u8 0xfc; u8 0x8f; u8 0x8f;
    u8 0x4c; u8 0x29; u8 0x06; u8 0xb3; u8 0x10;
    u8 0xd8; u8 0xe4; u8 0xe4; u8 0xd5; u8 0x26;
    u8 0xf0;
  ] in
  assert_norm(List.Tot.length l == size_test1_key);
  l
let test1_key : lbytes size_test1_key = createL test1_key_list

// generated: "2764228860619e140920c7d7"
inline_for_extraction
let size_test1_nonce: size_nat = 12
let test1_nonce_list : l:list uint8{List.Tot.length l == size_test1_nonce} =
  [@inline_let]
  let l = [
    u8 0x27; u8 0x64; u8 0x22; u8 0x88; u8 0x60;
    u8 0x61; u8 0x9e; u8 0x14; u8 0x09; u8 0x20;
    u8 0xc7; u8 0xd7;
  ] in
  assert_norm(List.Tot.length l == size_test1_nonce);
  l
let test1_nonce : lbytes size_test1_nonce = createL test1_nonce_list

// generated: "93c6a28ec7af55f669612d5d64fe680ae38ca88d14fb6ecba647606eee668124"
inline_for_extraction
let size_test1_exporterSecret: size_nat = 32
let test1_exporterSecret_list : l:list uint8{List.Tot.length l == size_test1_exporterSecret} =
  [@inline_let]
  let l = [
    u8 0x93; u8 0xc6; u8 0xa2; u8 0x8e; u8 0xc7;
    u8 0xaf; u8 0x55; u8 0xf6; u8 0x69; u8 0x61;
    u8 0x2d; u8 0x5d; u8 0x64; u8 0xfe; u8 0x68;
    u8 0x0a; u8 0xe3; u8 0x8c; u8 0xa8; u8 0x8d;
    u8 0x14; u8 0xfb; u8 0x6e; u8 0xcb; u8 0xa6;
    u8 0x47; u8 0x60; u8 0x6e; u8 0xee; u8 0x66;
    u8 0x81; u8 0x24;
  ] in
  assert_norm(List.Tot.length l == size_test1_exporterSecret);
  l
let test1_exporterSecret : lbytes size_test1_exporterSecret = createL test1_exporterSecret_list

// generated: "436f756e742d30"
inline_for_extraction
let size_test1_encryption0_aad: size_nat = 7
let test1_encryption0_aad_list : l:list uint8{List.Tot.length l == size_test1_encryption0_aad} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x75; u8 0x6e; u8 0x74;
    u8 0x2d; u8 0x30;
  ] in
  assert_norm(List.Tot.length l == size_test1_encryption0_aad);
  l
let test1_encryption0_aad : lbytes size_test1_encryption0_aad = createL test1_encryption0_aad_list

// generated: "1811cf5d39f857f80175f96ca4d3600bfb0585e4ce119bc46396da4b371966a358924e5a97a7b53ea255971f6b"
inline_for_extraction
let size_test1_encryption0_ciphertext: size_nat = 45
let test1_encryption0_ciphertext_list : l:list uint8{List.Tot.length l == size_test1_encryption0_ciphertext} =
  [@inline_let]
  let l = [
    u8 0x18; u8 0x11; u8 0xcf; u8 0x5d; u8 0x39;
    u8 0xf8; u8 0x57; u8 0xf8; u8 0x01; u8 0x75;
    u8 0xf9; u8 0x6c; u8 0xa4; u8 0xd3; u8 0x60;
    u8 0x0b; u8 0xfb; u8 0x05; u8 0x85; u8 0xe4;
    u8 0xce; u8 0x11; u8 0x9b; u8 0xc4; u8 0x63;
    u8 0x96; u8 0xda; u8 0x4b; u8 0x37; u8 0x19;
    u8 0x66; u8 0xa3; u8 0x58; u8 0x92; u8 0x4e;
    u8 0x5a; u8 0x97; u8 0xa7; u8 0xb5; u8 0x3e;
    u8 0xa2; u8 0x55; u8 0x97; u8 0x1f; u8 0x6b;
  ] in
  assert_norm(List.Tot.length l == size_test1_encryption0_ciphertext);
  l
let test1_encryption0_ciphertext : lbytes size_test1_encryption0_ciphertext = createL test1_encryption0_ciphertext_list

// generated: "2764228860619e140920c7d7"
inline_for_extraction
let size_test1_encryption0_nonce: size_nat = 12
let test1_encryption0_nonce_list : l:list uint8{List.Tot.length l == size_test1_encryption0_nonce} =
  [@inline_let]
  let l = [
    u8 0x27; u8 0x64; u8 0x22; u8 0x88; u8 0x60;
    u8 0x61; u8 0x9e; u8 0x14; u8 0x09; u8 0x20;
    u8 0xc7; u8 0xd7;
  ] in
  assert_norm(List.Tot.length l == size_test1_encryption0_nonce);
  l
let test1_encryption0_nonce : lbytes size_test1_encryption0_nonce = createL test1_encryption0_nonce_list

// generated: "4265617574792069732074727574682c20747275746820626561757479"
inline_for_extraction
let size_test1_encryption0_plaintext: size_nat = 29
let test1_encryption0_plaintext_list : l:list uint8{List.Tot.length l == size_test1_encryption0_plaintext} =
  [@inline_let]
  let l = [
    u8 0x42; u8 0x65; u8 0x61; u8 0x75; u8 0x74;
    u8 0x79; u8 0x20; u8 0x69; u8 0x73; u8 0x20;
    u8 0x74; u8 0x72; u8 0x75; u8 0x74; u8 0x68;
    u8 0x2c; u8 0x20; u8 0x74; u8 0x72; u8 0x75;
    u8 0x74; u8 0x68; u8 0x20; u8 0x62; u8 0x65;
    u8 0x61; u8 0x75; u8 0x74; u8 0x79;
  ] in
  assert_norm(List.Tot.length l == size_test1_encryption0_plaintext);
  l
let test1_encryption0_plaintext : lbytes size_test1_encryption0_plaintext = createL test1_encryption0_plaintext_list

// generated: "436f756e742d31"
inline_for_extraction
let size_test1_encryption1_aad: size_nat = 7
let test1_encryption1_aad_list : l:list uint8{List.Tot.length l == size_test1_encryption1_aad} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x75; u8 0x6e; u8 0x74;
    u8 0x2d; u8 0x31;
  ] in
  assert_norm(List.Tot.length l == size_test1_encryption1_aad);
  l
let test1_encryption1_aad : lbytes size_test1_encryption1_aad = createL test1_encryption1_aad_list

// generated: "2ed9ff66c33bad2f7c0326881f05aa9616ccba13bdb126a0d2a5a3dfa6b95bd4de78a98ff64c1fb64b366074d4"
inline_for_extraction
let size_test1_encryption1_ciphertext: size_nat = 45
let test1_encryption1_ciphertext_list : l:list uint8{List.Tot.length l == size_test1_encryption1_ciphertext} =
  [@inline_let]
  let l = [
    u8 0x2e; u8 0xd9; u8 0xff; u8 0x66; u8 0xc3;
    u8 0x3b; u8 0xad; u8 0x2f; u8 0x7c; u8 0x03;
    u8 0x26; u8 0x88; u8 0x1f; u8 0x05; u8 0xaa;
    u8 0x96; u8 0x16; u8 0xcc; u8 0xba; u8 0x13;
    u8 0xbd; u8 0xb1; u8 0x26; u8 0xa0; u8 0xd2;
    u8 0xa5; u8 0xa3; u8 0xdf; u8 0xa6; u8 0xb9;
    u8 0x5b; u8 0xd4; u8 0xde; u8 0x78; u8 0xa9;
    u8 0x8f; u8 0xf6; u8 0x4c; u8 0x1f; u8 0xb6;
    u8 0x4b; u8 0x36; u8 0x60; u8 0x74; u8 0xd4;
  ] in
  assert_norm(List.Tot.length l == size_test1_encryption1_ciphertext);
  l
let test1_encryption1_ciphertext : lbytes size_test1_encryption1_ciphertext = createL test1_encryption1_ciphertext_list

// generated: "2764228860619e140920c7d6"
inline_for_extraction
let size_test1_encryption1_nonce: size_nat = 12
let test1_encryption1_nonce_list : l:list uint8{List.Tot.length l == size_test1_encryption1_nonce} =
  [@inline_let]
  let l = [
    u8 0x27; u8 0x64; u8 0x22; u8 0x88; u8 0x60;
    u8 0x61; u8 0x9e; u8 0x14; u8 0x09; u8 0x20;
    u8 0xc7; u8 0xd6;
  ] in
  assert_norm(List.Tot.length l == size_test1_encryption1_nonce);
  l
let test1_encryption1_nonce : lbytes size_test1_encryption1_nonce = createL test1_encryption1_nonce_list

// generated: "4265617574792069732074727574682c20747275746820626561757479"
inline_for_extraction
let size_test1_encryption1_plaintext: size_nat = 29
let test1_encryption1_plaintext_list : l:list uint8{List.Tot.length l == size_test1_encryption1_plaintext} =
  [@inline_let]
  let l = [
    u8 0x42; u8 0x65; u8 0x61; u8 0x75; u8 0x74;
    u8 0x79; u8 0x20; u8 0x69; u8 0x73; u8 0x20;
    u8 0x74; u8 0x72; u8 0x75; u8 0x74; u8 0x68;
    u8 0x2c; u8 0x20; u8 0x74; u8 0x72; u8 0x75;
    u8 0x74; u8 0x68; u8 0x20; u8 0x62; u8 0x65;
    u8 0x61; u8 0x75; u8 0x74; u8 0x79;
  ] in
  assert_norm(List.Tot.length l == size_test1_encryption1_plaintext);
  l
let test1_encryption1_plaintext : lbytes size_test1_encryption1_plaintext = createL test1_encryption1_plaintext_list

// generated: "436f756e742d32"
inline_for_extraction
let size_test1_encryption2_aad: size_nat = 7
let test1_encryption2_aad_list : l:list uint8{List.Tot.length l == size_test1_encryption2_aad} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x75; u8 0x6e; u8 0x74;
    u8 0x2d; u8 0x32;
  ] in
  assert_norm(List.Tot.length l == size_test1_encryption2_aad);
  l
let test1_encryption2_aad : lbytes size_test1_encryption2_aad = createL test1_encryption2_aad_list

// generated: "4bfc8da6f1da808be2c1c141e864fe536bd1e9c4e01376cd383370b8095438a06f372e663739b30af9355da8a3"
inline_for_extraction
let size_test1_encryption2_ciphertext: size_nat = 45
let test1_encryption2_ciphertext_list : l:list uint8{List.Tot.length l == size_test1_encryption2_ciphertext} =
  [@inline_let]
  let l = [
    u8 0x4b; u8 0xfc; u8 0x8d; u8 0xa6; u8 0xf1;
    u8 0xda; u8 0x80; u8 0x8b; u8 0xe2; u8 0xc1;
    u8 0xc1; u8 0x41; u8 0xe8; u8 0x64; u8 0xfe;
    u8 0x53; u8 0x6b; u8 0xd1; u8 0xe9; u8 0xc4;
    u8 0xe0; u8 0x13; u8 0x76; u8 0xcd; u8 0x38;
    u8 0x33; u8 0x70; u8 0xb8; u8 0x09; u8 0x54;
    u8 0x38; u8 0xa0; u8 0x6f; u8 0x37; u8 0x2e;
    u8 0x66; u8 0x37; u8 0x39; u8 0xb3; u8 0x0a;
    u8 0xf9; u8 0x35; u8 0x5d; u8 0xa8; u8 0xa3;
  ] in
  assert_norm(List.Tot.length l == size_test1_encryption2_ciphertext);
  l
let test1_encryption2_ciphertext : lbytes size_test1_encryption2_ciphertext = createL test1_encryption2_ciphertext_list

// generated: "2764228860619e140920c7d5"
inline_for_extraction
let size_test1_encryption2_nonce: size_nat = 12
let test1_encryption2_nonce_list : l:list uint8{List.Tot.length l == size_test1_encryption2_nonce} =
  [@inline_let]
  let l = [
    u8 0x27; u8 0x64; u8 0x22; u8 0x88; u8 0x60;
    u8 0x61; u8 0x9e; u8 0x14; u8 0x09; u8 0x20;
    u8 0xc7; u8 0xd5;
  ] in
  assert_norm(List.Tot.length l == size_test1_encryption2_nonce);
  l
let test1_encryption2_nonce : lbytes size_test1_encryption2_nonce = createL test1_encryption2_nonce_list

// generated: "4265617574792069732074727574682c20747275746820626561757479"
inline_for_extraction
let size_test1_encryption2_plaintext: size_nat = 29
let test1_encryption2_plaintext_list : l:list uint8{List.Tot.length l == size_test1_encryption2_plaintext} =
  [@inline_let]
  let l = [
    u8 0x42; u8 0x65; u8 0x61; u8 0x75; u8 0x74;
    u8 0x79; u8 0x20; u8 0x69; u8 0x73; u8 0x20;
    u8 0x74; u8 0x72; u8 0x75; u8 0x74; u8 0x68;
    u8 0x2c; u8 0x20; u8 0x74; u8 0x72; u8 0x75;
    u8 0x74; u8 0x68; u8 0x20; u8 0x62; u8 0x65;
    u8 0x61; u8 0x75; u8 0x74; u8 0x79;
  ] in
  assert_norm(List.Tot.length l == size_test1_encryption2_plaintext);
  l
let test1_encryption2_plaintext : lbytes size_test1_encryption2_plaintext = createL test1_encryption2_plaintext_list

// generated: "436f756e742d33"
inline_for_extraction
let size_test1_encryption3_aad: size_nat = 7
let test1_encryption3_aad_list : l:list uint8{List.Tot.length l == size_test1_encryption3_aad} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x75; u8 0x6e; u8 0x74;
    u8 0x2d; u8 0x33;
  ] in
  assert_norm(List.Tot.length l == size_test1_encryption3_aad);
  l
let test1_encryption3_aad : lbytes size_test1_encryption3_aad = createL test1_encryption3_aad_list

// generated: "cc82487c2beb92d6810a40bad2aa96794c5f2b6eff96a674cf9c9c853397e6c7ca9640c200a38326adb63ed7f2"
inline_for_extraction
let size_test1_encryption3_ciphertext: size_nat = 45
let test1_encryption3_ciphertext_list : l:list uint8{List.Tot.length l == size_test1_encryption3_ciphertext} =
  [@inline_let]
  let l = [
    u8 0xcc; u8 0x82; u8 0x48; u8 0x7c; u8 0x2b;
    u8 0xeb; u8 0x92; u8 0xd6; u8 0x81; u8 0x0a;
    u8 0x40; u8 0xba; u8 0xd2; u8 0xaa; u8 0x96;
    u8 0x79; u8 0x4c; u8 0x5f; u8 0x2b; u8 0x6e;
    u8 0xff; u8 0x96; u8 0xa6; u8 0x74; u8 0xcf;
    u8 0x9c; u8 0x9c; u8 0x85; u8 0x33; u8 0x97;
    u8 0xe6; u8 0xc7; u8 0xca; u8 0x96; u8 0x40;
    u8 0xc2; u8 0x00; u8 0xa3; u8 0x83; u8 0x26;
    u8 0xad; u8 0xb6; u8 0x3e; u8 0xd7; u8 0xf2;
  ] in
  assert_norm(List.Tot.length l == size_test1_encryption3_ciphertext);
  l
let test1_encryption3_ciphertext : lbytes size_test1_encryption3_ciphertext = createL test1_encryption3_ciphertext_list

// generated: "2764228860619e140920c7d4"
inline_for_extraction
let size_test1_encryption3_nonce: size_nat = 12
let test1_encryption3_nonce_list : l:list uint8{List.Tot.length l == size_test1_encryption3_nonce} =
  [@inline_let]
  let l = [
    u8 0x27; u8 0x64; u8 0x22; u8 0x88; u8 0x60;
    u8 0x61; u8 0x9e; u8 0x14; u8 0x09; u8 0x20;
    u8 0xc7; u8 0xd4;
  ] in
  assert_norm(List.Tot.length l == size_test1_encryption3_nonce);
  l
let test1_encryption3_nonce : lbytes size_test1_encryption3_nonce = createL test1_encryption3_nonce_list

// generated: "4265617574792069732074727574682c20747275746820626561757479"
inline_for_extraction
let size_test1_encryption3_plaintext: size_nat = 29
let test1_encryption3_plaintext_list : l:list uint8{List.Tot.length l == size_test1_encryption3_plaintext} =
  [@inline_let]
  let l = [
    u8 0x42; u8 0x65; u8 0x61; u8 0x75; u8 0x74;
    u8 0x79; u8 0x20; u8 0x69; u8 0x73; u8 0x20;
    u8 0x74; u8 0x72; u8 0x75; u8 0x74; u8 0x68;
    u8 0x2c; u8 0x20; u8 0x74; u8 0x72; u8 0x75;
    u8 0x74; u8 0x68; u8 0x20; u8 0x62; u8 0x65;
    u8 0x61; u8 0x75; u8 0x74; u8 0x79;
  ] in
  assert_norm(List.Tot.length l == size_test1_encryption3_plaintext);
  l
let test1_encryption3_plaintext : lbytes size_test1_encryption3_plaintext = createL test1_encryption3_plaintext_list

// generated: "436f756e742d34"
inline_for_extraction
let size_test1_encryption4_aad: size_nat = 7
let test1_encryption4_aad_list : l:list uint8{List.Tot.length l == size_test1_encryption4_aad} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x75; u8 0x6e; u8 0x74;
    u8 0x2d; u8 0x34;
  ] in
  assert_norm(List.Tot.length l == size_test1_encryption4_aad);
  l
let test1_encryption4_aad : lbytes size_test1_encryption4_aad = createL test1_encryption4_aad_list

// generated: "6314e60548cfdc30552303be4cb19875e335554bce186e1b41f9d15b4b4a4af77d68c09ebf883a9cbb51f3be9d"
inline_for_extraction
let size_test1_encryption4_ciphertext: size_nat = 45
let test1_encryption4_ciphertext_list : l:list uint8{List.Tot.length l == size_test1_encryption4_ciphertext} =
  [@inline_let]
  let l = [
    u8 0x63; u8 0x14; u8 0xe6; u8 0x05; u8 0x48;
    u8 0xcf; u8 0xdc; u8 0x30; u8 0x55; u8 0x23;
    u8 0x03; u8 0xbe; u8 0x4c; u8 0xb1; u8 0x98;
    u8 0x75; u8 0xe3; u8 0x35; u8 0x55; u8 0x4b;
    u8 0xce; u8 0x18; u8 0x6e; u8 0x1b; u8 0x41;
    u8 0xf9; u8 0xd1; u8 0x5b; u8 0x4b; u8 0x4a;
    u8 0x4a; u8 0xf7; u8 0x7d; u8 0x68; u8 0xc0;
    u8 0x9e; u8 0xbf; u8 0x88; u8 0x3a; u8 0x9c;
    u8 0xbb; u8 0x51; u8 0xf3; u8 0xbe; u8 0x9d;
  ] in
  assert_norm(List.Tot.length l == size_test1_encryption4_ciphertext);
  l
let test1_encryption4_ciphertext : lbytes size_test1_encryption4_ciphertext = createL test1_encryption4_ciphertext_list

// generated: "2764228860619e140920c7d3"
inline_for_extraction
let size_test1_encryption4_nonce: size_nat = 12
let test1_encryption4_nonce_list : l:list uint8{List.Tot.length l == size_test1_encryption4_nonce} =
  [@inline_let]
  let l = [
    u8 0x27; u8 0x64; u8 0x22; u8 0x88; u8 0x60;
    u8 0x61; u8 0x9e; u8 0x14; u8 0x09; u8 0x20;
    u8 0xc7; u8 0xd3;
  ] in
  assert_norm(List.Tot.length l == size_test1_encryption4_nonce);
  l
let test1_encryption4_nonce : lbytes size_test1_encryption4_nonce = createL test1_encryption4_nonce_list

// generated: "4265617574792069732074727574682c20747275746820626561757479"
inline_for_extraction
let size_test1_encryption4_plaintext: size_nat = 29
let test1_encryption4_plaintext_list : l:list uint8{List.Tot.length l == size_test1_encryption4_plaintext} =
  [@inline_let]
  let l = [
    u8 0x42; u8 0x65; u8 0x61; u8 0x75; u8 0x74;
    u8 0x79; u8 0x20; u8 0x69; u8 0x73; u8 0x20;
    u8 0x74; u8 0x72; u8 0x75; u8 0x74; u8 0x68;
    u8 0x2c; u8 0x20; u8 0x74; u8 0x72; u8 0x75;
    u8 0x74; u8 0x68; u8 0x20; u8 0x62; u8 0x65;
    u8 0x61; u8 0x75; u8 0x74; u8 0x79;
  ] in
  assert_norm(List.Tot.length l == size_test1_encryption4_plaintext);
  l
let test1_encryption4_plaintext : lbytes size_test1_encryption4_plaintext = createL test1_encryption4_plaintext_list

// generated: "436f756e742d35"
inline_for_extraction
let size_test1_encryption5_aad: size_nat = 7
let test1_encryption5_aad_list : l:list uint8{List.Tot.length l == size_test1_encryption5_aad} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x75; u8 0x6e; u8 0x74;
    u8 0x2d; u8 0x35;
  ] in
  assert_norm(List.Tot.length l == size_test1_encryption5_aad);
  l
let test1_encryption5_aad : lbytes size_test1_encryption5_aad = createL test1_encryption5_aad_list

// generated: "ce580d139c001ed794c4eedf14ce43c19c2a04f20dcfa9de57b6f555816b0558db4ec603bbc3748dce30e5c82f"
inline_for_extraction
let size_test1_encryption5_ciphertext: size_nat = 45
let test1_encryption5_ciphertext_list : l:list uint8{List.Tot.length l == size_test1_encryption5_ciphertext} =
  [@inline_let]
  let l = [
    u8 0xce; u8 0x58; u8 0x0d; u8 0x13; u8 0x9c;
    u8 0x00; u8 0x1e; u8 0xd7; u8 0x94; u8 0xc4;
    u8 0xee; u8 0xdf; u8 0x14; u8 0xce; u8 0x43;
    u8 0xc1; u8 0x9c; u8 0x2a; u8 0x04; u8 0xf2;
    u8 0x0d; u8 0xcf; u8 0xa9; u8 0xde; u8 0x57;
    u8 0xb6; u8 0xf5; u8 0x55; u8 0x81; u8 0x6b;
    u8 0x05; u8 0x58; u8 0xdb; u8 0x4e; u8 0xc6;
    u8 0x03; u8 0xbb; u8 0xc3; u8 0x74; u8 0x8d;
    u8 0xce; u8 0x30; u8 0xe5; u8 0xc8; u8 0x2f;
  ] in
  assert_norm(List.Tot.length l == size_test1_encryption5_ciphertext);
  l
let test1_encryption5_ciphertext : lbytes size_test1_encryption5_ciphertext = createL test1_encryption5_ciphertext_list

// generated: "2764228860619e140920c7d2"
inline_for_extraction
let size_test1_encryption5_nonce: size_nat = 12
let test1_encryption5_nonce_list : l:list uint8{List.Tot.length l == size_test1_encryption5_nonce} =
  [@inline_let]
  let l = [
    u8 0x27; u8 0x64; u8 0x22; u8 0x88; u8 0x60;
    u8 0x61; u8 0x9e; u8 0x14; u8 0x09; u8 0x20;
    u8 0xc7; u8 0xd2;
  ] in
  assert_norm(List.Tot.length l == size_test1_encryption5_nonce);
  l
let test1_encryption5_nonce : lbytes size_test1_encryption5_nonce = createL test1_encryption5_nonce_list

// generated: "4265617574792069732074727574682c20747275746820626561757479"
inline_for_extraction
let size_test1_encryption5_plaintext: size_nat = 29
let test1_encryption5_plaintext_list : l:list uint8{List.Tot.length l == size_test1_encryption5_plaintext} =
  [@inline_let]
  let l = [
    u8 0x42; u8 0x65; u8 0x61; u8 0x75; u8 0x74;
    u8 0x79; u8 0x20; u8 0x69; u8 0x73; u8 0x20;
    u8 0x74; u8 0x72; u8 0x75; u8 0x74; u8 0x68;
    u8 0x2c; u8 0x20; u8 0x74; u8 0x72; u8 0x75;
    u8 0x74; u8 0x68; u8 0x20; u8 0x62; u8 0x65;
    u8 0x61; u8 0x75; u8 0x74; u8 0x79;
  ] in
  assert_norm(List.Tot.length l == size_test1_encryption5_plaintext);
  l
let test1_encryption5_plaintext : lbytes size_test1_encryption5_plaintext = createL test1_encryption5_plaintext_list

// generated: "436f756e742d36"
inline_for_extraction
let size_test1_encryption6_aad: size_nat = 7
let test1_encryption6_aad_list : l:list uint8{List.Tot.length l == size_test1_encryption6_aad} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x75; u8 0x6e; u8 0x74;
    u8 0x2d; u8 0x36;
  ] in
  assert_norm(List.Tot.length l == size_test1_encryption6_aad);
  l
let test1_encryption6_aad : lbytes size_test1_encryption6_aad = createL test1_encryption6_aad_list

// generated: "5247db08759b2a6d9459a4cc461dfc59afb78e37b0852f9a669720df72fe5781460bcc9ae5ca00545ad06f93c3"
inline_for_extraction
let size_test1_encryption6_ciphertext: size_nat = 45
let test1_encryption6_ciphertext_list : l:list uint8{List.Tot.length l == size_test1_encryption6_ciphertext} =
  [@inline_let]
  let l = [
    u8 0x52; u8 0x47; u8 0xdb; u8 0x08; u8 0x75;
    u8 0x9b; u8 0x2a; u8 0x6d; u8 0x94; u8 0x59;
    u8 0xa4; u8 0xcc; u8 0x46; u8 0x1d; u8 0xfc;
    u8 0x59; u8 0xaf; u8 0xb7; u8 0x8e; u8 0x37;
    u8 0xb0; u8 0x85; u8 0x2f; u8 0x9a; u8 0x66;
    u8 0x97; u8 0x20; u8 0xdf; u8 0x72; u8 0xfe;
    u8 0x57; u8 0x81; u8 0x46; u8 0x0b; u8 0xcc;
    u8 0x9a; u8 0xe5; u8 0xca; u8 0x00; u8 0x54;
    u8 0x5a; u8 0xd0; u8 0x6f; u8 0x93; u8 0xc3;
  ] in
  assert_norm(List.Tot.length l == size_test1_encryption6_ciphertext);
  l
let test1_encryption6_ciphertext : lbytes size_test1_encryption6_ciphertext = createL test1_encryption6_ciphertext_list

// generated: "2764228860619e140920c7d1"
inline_for_extraction
let size_test1_encryption6_nonce: size_nat = 12
let test1_encryption6_nonce_list : l:list uint8{List.Tot.length l == size_test1_encryption6_nonce} =
  [@inline_let]
  let l = [
    u8 0x27; u8 0x64; u8 0x22; u8 0x88; u8 0x60;
    u8 0x61; u8 0x9e; u8 0x14; u8 0x09; u8 0x20;
    u8 0xc7; u8 0xd1;
  ] in
  assert_norm(List.Tot.length l == size_test1_encryption6_nonce);
  l
let test1_encryption6_nonce : lbytes size_test1_encryption6_nonce = createL test1_encryption6_nonce_list

// generated: "4265617574792069732074727574682c20747275746820626561757479"
inline_for_extraction
let size_test1_encryption6_plaintext: size_nat = 29
let test1_encryption6_plaintext_list : l:list uint8{List.Tot.length l == size_test1_encryption6_plaintext} =
  [@inline_let]
  let l = [
    u8 0x42; u8 0x65; u8 0x61; u8 0x75; u8 0x74;
    u8 0x79; u8 0x20; u8 0x69; u8 0x73; u8 0x20;
    u8 0x74; u8 0x72; u8 0x75; u8 0x74; u8 0x68;
    u8 0x2c; u8 0x20; u8 0x74; u8 0x72; u8 0x75;
    u8 0x74; u8 0x68; u8 0x20; u8 0x62; u8 0x65;
    u8 0x61; u8 0x75; u8 0x74; u8 0x79;
  ] in
  assert_norm(List.Tot.length l == size_test1_encryption6_plaintext);
  l
let test1_encryption6_plaintext : lbytes size_test1_encryption6_plaintext = createL test1_encryption6_plaintext_list

// generated: "436f756e742d37"
inline_for_extraction
let size_test1_encryption7_aad: size_nat = 7
let test1_encryption7_aad_list : l:list uint8{List.Tot.length l == size_test1_encryption7_aad} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x75; u8 0x6e; u8 0x74;
    u8 0x2d; u8 0x37;
  ] in
  assert_norm(List.Tot.length l == size_test1_encryption7_aad);
  l
let test1_encryption7_aad : lbytes size_test1_encryption7_aad = createL test1_encryption7_aad_list

// generated: "e4ac909e74ca97d420374dba157678aad8f335b5cdaac2ca2e1813f2b3a6c0f6cfbc690dfd9b04a140861b910b"
inline_for_extraction
let size_test1_encryption7_ciphertext: size_nat = 45
let test1_encryption7_ciphertext_list : l:list uint8{List.Tot.length l == size_test1_encryption7_ciphertext} =
  [@inline_let]
  let l = [
    u8 0xe4; u8 0xac; u8 0x90; u8 0x9e; u8 0x74;
    u8 0xca; u8 0x97; u8 0xd4; u8 0x20; u8 0x37;
    u8 0x4d; u8 0xba; u8 0x15; u8 0x76; u8 0x78;
    u8 0xaa; u8 0xd8; u8 0xf3; u8 0x35; u8 0xb5;
    u8 0xcd; u8 0xaa; u8 0xc2; u8 0xca; u8 0x2e;
    u8 0x18; u8 0x13; u8 0xf2; u8 0xb3; u8 0xa6;
    u8 0xc0; u8 0xf6; u8 0xcf; u8 0xbc; u8 0x69;
    u8 0x0d; u8 0xfd; u8 0x9b; u8 0x04; u8 0xa1;
    u8 0x40; u8 0x86; u8 0x1b; u8 0x91; u8 0x0b;
  ] in
  assert_norm(List.Tot.length l == size_test1_encryption7_ciphertext);
  l
let test1_encryption7_ciphertext : lbytes size_test1_encryption7_ciphertext = createL test1_encryption7_ciphertext_list

// generated: "2764228860619e140920c7d0"
inline_for_extraction
let size_test1_encryption7_nonce: size_nat = 12
let test1_encryption7_nonce_list : l:list uint8{List.Tot.length l == size_test1_encryption7_nonce} =
  [@inline_let]
  let l = [
    u8 0x27; u8 0x64; u8 0x22; u8 0x88; u8 0x60;
    u8 0x61; u8 0x9e; u8 0x14; u8 0x09; u8 0x20;
    u8 0xc7; u8 0xd0;
  ] in
  assert_norm(List.Tot.length l == size_test1_encryption7_nonce);
  l
let test1_encryption7_nonce : lbytes size_test1_encryption7_nonce = createL test1_encryption7_nonce_list

// generated: "4265617574792069732074727574682c20747275746820626561757479"
inline_for_extraction
let size_test1_encryption7_plaintext: size_nat = 29
let test1_encryption7_plaintext_list : l:list uint8{List.Tot.length l == size_test1_encryption7_plaintext} =
  [@inline_let]
  let l = [
    u8 0x42; u8 0x65; u8 0x61; u8 0x75; u8 0x74;
    u8 0x79; u8 0x20; u8 0x69; u8 0x73; u8 0x20;
    u8 0x74; u8 0x72; u8 0x75; u8 0x74; u8 0x68;
    u8 0x2c; u8 0x20; u8 0x74; u8 0x72; u8 0x75;
    u8 0x74; u8 0x68; u8 0x20; u8 0x62; u8 0x65;
    u8 0x61; u8 0x75; u8 0x74; u8 0x79;
  ] in
  assert_norm(List.Tot.length l == size_test1_encryption7_plaintext);
  l
let test1_encryption7_plaintext : lbytes size_test1_encryption7_plaintext = createL test1_encryption7_plaintext_list

// generated: "436f756e742d38"
inline_for_extraction
let size_test1_encryption8_aad: size_nat = 7
let test1_encryption8_aad_list : l:list uint8{List.Tot.length l == size_test1_encryption8_aad} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x75; u8 0x6e; u8 0x74;
    u8 0x2d; u8 0x38;
  ] in
  assert_norm(List.Tot.length l == size_test1_encryption8_aad);
  l
let test1_encryption8_aad : lbytes size_test1_encryption8_aad = createL test1_encryption8_aad_list

// generated: "bd664ef7fa8fd4ba23430453914ffa75c54c24a593d894ad6626635ef38792cf505b7925d2f8dcdc744b8a8acd"
inline_for_extraction
let size_test1_encryption8_ciphertext: size_nat = 45
let test1_encryption8_ciphertext_list : l:list uint8{List.Tot.length l == size_test1_encryption8_ciphertext} =
  [@inline_let]
  let l = [
    u8 0xbd; u8 0x66; u8 0x4e; u8 0xf7; u8 0xfa;
    u8 0x8f; u8 0xd4; u8 0xba; u8 0x23; u8 0x43;
    u8 0x04; u8 0x53; u8 0x91; u8 0x4f; u8 0xfa;
    u8 0x75; u8 0xc5; u8 0x4c; u8 0x24; u8 0xa5;
    u8 0x93; u8 0xd8; u8 0x94; u8 0xad; u8 0x66;
    u8 0x26; u8 0x63; u8 0x5e; u8 0xf3; u8 0x87;
    u8 0x92; u8 0xcf; u8 0x50; u8 0x5b; u8 0x79;
    u8 0x25; u8 0xd2; u8 0xf8; u8 0xdc; u8 0xdc;
    u8 0x74; u8 0x4b; u8 0x8a; u8 0x8a; u8 0xcd;
  ] in
  assert_norm(List.Tot.length l == size_test1_encryption8_ciphertext);
  l
let test1_encryption8_ciphertext : lbytes size_test1_encryption8_ciphertext = createL test1_encryption8_ciphertext_list

// generated: "2764228860619e140920c7df"
inline_for_extraction
let size_test1_encryption8_nonce: size_nat = 12
let test1_encryption8_nonce_list : l:list uint8{List.Tot.length l == size_test1_encryption8_nonce} =
  [@inline_let]
  let l = [
    u8 0x27; u8 0x64; u8 0x22; u8 0x88; u8 0x60;
    u8 0x61; u8 0x9e; u8 0x14; u8 0x09; u8 0x20;
    u8 0xc7; u8 0xdf;
  ] in
  assert_norm(List.Tot.length l == size_test1_encryption8_nonce);
  l
let test1_encryption8_nonce : lbytes size_test1_encryption8_nonce = createL test1_encryption8_nonce_list

// generated: "4265617574792069732074727574682c20747275746820626561757479"
inline_for_extraction
let size_test1_encryption8_plaintext: size_nat = 29
let test1_encryption8_plaintext_list : l:list uint8{List.Tot.length l == size_test1_encryption8_plaintext} =
  [@inline_let]
  let l = [
    u8 0x42; u8 0x65; u8 0x61; u8 0x75; u8 0x74;
    u8 0x79; u8 0x20; u8 0x69; u8 0x73; u8 0x20;
    u8 0x74; u8 0x72; u8 0x75; u8 0x74; u8 0x68;
    u8 0x2c; u8 0x20; u8 0x74; u8 0x72; u8 0x75;
    u8 0x74; u8 0x68; u8 0x20; u8 0x62; u8 0x65;
    u8 0x61; u8 0x75; u8 0x74; u8 0x79;
  ] in
  assert_norm(List.Tot.length l == size_test1_encryption8_plaintext);
  l
let test1_encryption8_plaintext : lbytes size_test1_encryption8_plaintext = createL test1_encryption8_plaintext_list

// generated: "436f756e742d39"
inline_for_extraction
let size_test1_encryption9_aad: size_nat = 7
let test1_encryption9_aad_list : l:list uint8{List.Tot.length l == size_test1_encryption9_aad} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x75; u8 0x6e; u8 0x74;
    u8 0x2d; u8 0x39;
  ] in
  assert_norm(List.Tot.length l == size_test1_encryption9_aad);
  l
let test1_encryption9_aad : lbytes size_test1_encryption9_aad = createL test1_encryption9_aad_list

// generated: "4b7f4832efecd0a808a367e4d2ac970d6604026e4386211c22912567a061a2558de77f7cb760f1837f6d048d71"
inline_for_extraction
let size_test1_encryption9_ciphertext: size_nat = 45
let test1_encryption9_ciphertext_list : l:list uint8{List.Tot.length l == size_test1_encryption9_ciphertext} =
  [@inline_let]
  let l = [
    u8 0x4b; u8 0x7f; u8 0x48; u8 0x32; u8 0xef;
    u8 0xec; u8 0xd0; u8 0xa8; u8 0x08; u8 0xa3;
    u8 0x67; u8 0xe4; u8 0xd2; u8 0xac; u8 0x97;
    u8 0x0d; u8 0x66; u8 0x04; u8 0x02; u8 0x6e;
    u8 0x43; u8 0x86; u8 0x21; u8 0x1c; u8 0x22;
    u8 0x91; u8 0x25; u8 0x67; u8 0xa0; u8 0x61;
    u8 0xa2; u8 0x55; u8 0x8d; u8 0xe7; u8 0x7f;
    u8 0x7c; u8 0xb7; u8 0x60; u8 0xf1; u8 0x83;
    u8 0x7f; u8 0x6d; u8 0x04; u8 0x8d; u8 0x71;
  ] in
  assert_norm(List.Tot.length l == size_test1_encryption9_ciphertext);
  l
let test1_encryption9_ciphertext : lbytes size_test1_encryption9_ciphertext = createL test1_encryption9_ciphertext_list

// generated: "2764228860619e140920c7de"
inline_for_extraction
let size_test1_encryption9_nonce: size_nat = 12
let test1_encryption9_nonce_list : l:list uint8{List.Tot.length l == size_test1_encryption9_nonce} =
  [@inline_let]
  let l = [
    u8 0x27; u8 0x64; u8 0x22; u8 0x88; u8 0x60;
    u8 0x61; u8 0x9e; u8 0x14; u8 0x09; u8 0x20;
    u8 0xc7; u8 0xde;
  ] in
  assert_norm(List.Tot.length l == size_test1_encryption9_nonce);
  l
let test1_encryption9_nonce : lbytes size_test1_encryption9_nonce = createL test1_encryption9_nonce_list

// generated: "4265617574792069732074727574682c20747275746820626561757479"
inline_for_extraction
let size_test1_encryption9_plaintext: size_nat = 29
let test1_encryption9_plaintext_list : l:list uint8{List.Tot.length l == size_test1_encryption9_plaintext} =
  [@inline_let]
  let l = [
    u8 0x42; u8 0x65; u8 0x61; u8 0x75; u8 0x74;
    u8 0x79; u8 0x20; u8 0x69; u8 0x73; u8 0x20;
    u8 0x74; u8 0x72; u8 0x75; u8 0x74; u8 0x68;
    u8 0x2c; u8 0x20; u8 0x74; u8 0x72; u8 0x75;
    u8 0x74; u8 0x68; u8 0x20; u8 0x62; u8 0x65;
    u8 0x61; u8 0x75; u8 0x74; u8 0x79;
  ] in
  assert_norm(List.Tot.length l == size_test1_encryption9_plaintext);
  l
let test1_encryption9_plaintext : lbytes size_test1_encryption9_plaintext = createL test1_encryption9_plaintext_list

// generated: "436f6e746578742d30"
inline_for_extraction
let size_test1_export0_exportContext: size_nat = 9
let test1_export0_exportContext_list : l:list uint8{List.Tot.length l == size_test1_export0_exportContext} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x6e; u8 0x74; u8 0x65;
    u8 0x78; u8 0x74; u8 0x2d; u8 0x30;
  ] in
  assert_norm(List.Tot.length l == size_test1_export0_exportContext);
  l
let test1_export0_exportContext : lbytes size_test1_export0_exportContext = createL test1_export0_exportContext_list

// generated: "76d8f9425846916bf678504e398e984d91878220f34c5a5e1a63ac75ba0176bc"
inline_for_extraction
let size_test1_export0_exportValue: size_nat = 32
let test1_export0_exportValue_list : l:list uint8{List.Tot.length l == size_test1_export0_exportValue} =
  [@inline_let]
  let l = [
    u8 0x76; u8 0xd8; u8 0xf9; u8 0x42; u8 0x58;
    u8 0x46; u8 0x91; u8 0x6b; u8 0xf6; u8 0x78;
    u8 0x50; u8 0x4e; u8 0x39; u8 0x8e; u8 0x98;
    u8 0x4d; u8 0x91; u8 0x87; u8 0x82; u8 0x20;
    u8 0xf3; u8 0x4c; u8 0x5a; u8 0x5e; u8 0x1a;
    u8 0x63; u8 0xac; u8 0x75; u8 0xba; u8 0x01;
    u8 0x76; u8 0xbc;
  ] in
  assert_norm(List.Tot.length l == size_test1_export0_exportValue);
  l
let test1_export0_exportValue : lbytes size_test1_export0_exportValue = createL test1_export0_exportValue_list

let test1_export0_len:size_nat = 32
// generated: "436f6e746578742d31"
inline_for_extraction
let size_test1_export1_exportContext: size_nat = 9
let test1_export1_exportContext_list : l:list uint8{List.Tot.length l == size_test1_export1_exportContext} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x6e; u8 0x74; u8 0x65;
    u8 0x78; u8 0x74; u8 0x2d; u8 0x31;
  ] in
  assert_norm(List.Tot.length l == size_test1_export1_exportContext);
  l
let test1_export1_exportContext : lbytes size_test1_export1_exportContext = createL test1_export1_exportContext_list

// generated: "94fe3245047dde534862778ca1962e594b1758df5a525b4caa54ff0feadad06b"
inline_for_extraction
let size_test1_export1_exportValue: size_nat = 32
let test1_export1_exportValue_list : l:list uint8{List.Tot.length l == size_test1_export1_exportValue} =
  [@inline_let]
  let l = [
    u8 0x94; u8 0xfe; u8 0x32; u8 0x45; u8 0x04;
    u8 0x7d; u8 0xde; u8 0x53; u8 0x48; u8 0x62;
    u8 0x77; u8 0x8c; u8 0xa1; u8 0x96; u8 0x2e;
    u8 0x59; u8 0x4b; u8 0x17; u8 0x58; u8 0xdf;
    u8 0x5a; u8 0x52; u8 0x5b; u8 0x4c; u8 0xaa;
    u8 0x54; u8 0xff; u8 0x0f; u8 0xea; u8 0xda;
    u8 0xd0; u8 0x6b;
  ] in
  assert_norm(List.Tot.length l == size_test1_export1_exportValue);
  l
let test1_export1_exportValue : lbytes size_test1_export1_exportValue = createL test1_export1_exportValue_list

let test1_export1_len:size_nat = 32
// generated: "436f6e746578742d32"
inline_for_extraction
let size_test1_export2_exportContext: size_nat = 9
let test1_export2_exportContext_list : l:list uint8{List.Tot.length l == size_test1_export2_exportContext} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x6e; u8 0x74; u8 0x65;
    u8 0x78; u8 0x74; u8 0x2d; u8 0x32;
  ] in
  assert_norm(List.Tot.length l == size_test1_export2_exportContext);
  l
let test1_export2_exportContext : lbytes size_test1_export2_exportContext = createL test1_export2_exportContext_list

// generated: "97f0c64128ff1379af9ec623cba204b50cd9db9a6b7d90e7a28fed06badf363e"
inline_for_extraction
let size_test1_export2_exportValue: size_nat = 32
let test1_export2_exportValue_list : l:list uint8{List.Tot.length l == size_test1_export2_exportValue} =
  [@inline_let]
  let l = [
    u8 0x97; u8 0xf0; u8 0xc6; u8 0x41; u8 0x28;
    u8 0xff; u8 0x13; u8 0x79; u8 0xaf; u8 0x9e;
    u8 0xc6; u8 0x23; u8 0xcb; u8 0xa2; u8 0x04;
    u8 0xb5; u8 0x0c; u8 0xd9; u8 0xdb; u8 0x9a;
    u8 0x6b; u8 0x7d; u8 0x90; u8 0xe7; u8 0xa2;
    u8 0x8f; u8 0xed; u8 0x06; u8 0xba; u8 0xdf;
    u8 0x36; u8 0x3e;
  ] in
  assert_norm(List.Tot.length l == size_test1_export2_exportValue);
  l
let test1_export2_exportValue : lbytes size_test1_export2_exportValue = createL test1_export2_exportValue_list

let test1_export2_len:size_nat = 32
// generated: "436f6e746578742d33"
inline_for_extraction
let size_test1_export3_exportContext: size_nat = 9
let test1_export3_exportContext_list : l:list uint8{List.Tot.length l == size_test1_export3_exportContext} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x6e; u8 0x74; u8 0x65;
    u8 0x78; u8 0x74; u8 0x2d; u8 0x33;
  ] in
  assert_norm(List.Tot.length l == size_test1_export3_exportContext);
  l
let test1_export3_exportContext : lbytes size_test1_export3_exportContext = createL test1_export3_exportContext_list

// generated: "9cd27f832e7271f82ae85c3404d7d06ab2a5bebb9354bc022b9f016d74bcdb2c"
inline_for_extraction
let size_test1_export3_exportValue: size_nat = 32
let test1_export3_exportValue_list : l:list uint8{List.Tot.length l == size_test1_export3_exportValue} =
  [@inline_let]
  let l = [
    u8 0x9c; u8 0xd2; u8 0x7f; u8 0x83; u8 0x2e;
    u8 0x72; u8 0x71; u8 0xf8; u8 0x2a; u8 0xe8;
    u8 0x5c; u8 0x34; u8 0x04; u8 0xd7; u8 0xd0;
    u8 0x6a; u8 0xb2; u8 0xa5; u8 0xbe; u8 0xbb;
    u8 0x93; u8 0x54; u8 0xbc; u8 0x02; u8 0x2b;
    u8 0x9f; u8 0x01; u8 0x6d; u8 0x74; u8 0xbc;
    u8 0xdb; u8 0x2c;
  ] in
  assert_norm(List.Tot.length l == size_test1_export3_exportValue);
  l
let test1_export3_exportValue : lbytes size_test1_export3_exportValue = createL test1_export3_exportValue_list

let test1_export3_len:size_nat = 32
// generated: "436f6e746578742d34"
inline_for_extraction
let size_test1_export4_exportContext: size_nat = 9
let test1_export4_exportContext_list : l:list uint8{List.Tot.length l == size_test1_export4_exportContext} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x6e; u8 0x74; u8 0x65;
    u8 0x78; u8 0x74; u8 0x2d; u8 0x34;
  ] in
  assert_norm(List.Tot.length l == size_test1_export4_exportContext);
  l
let test1_export4_exportContext : lbytes size_test1_export4_exportContext = createL test1_export4_exportContext_list

// generated: "74da0b06441dd2aca2a43d5ee4796158c9403f7037e93c50bcbd6ea4a1687c06"
inline_for_extraction
let size_test1_export4_exportValue: size_nat = 32
let test1_export4_exportValue_list : l:list uint8{List.Tot.length l == size_test1_export4_exportValue} =
  [@inline_let]
  let l = [
    u8 0x74; u8 0xda; u8 0x0b; u8 0x06; u8 0x44;
    u8 0x1d; u8 0xd2; u8 0xac; u8 0xa2; u8 0xa4;
    u8 0x3d; u8 0x5e; u8 0xe4; u8 0x79; u8 0x61;
    u8 0x58; u8 0xc9; u8 0x40; u8 0x3f; u8 0x70;
    u8 0x37; u8 0xe9; u8 0x3c; u8 0x50; u8 0xbc;
    u8 0xbd; u8 0x6e; u8 0xa4; u8 0xa1; u8 0x68;
    u8 0x7c; u8 0x06;
  ] in
  assert_norm(List.Tot.length l == size_test1_export4_exportValue);
  l
let test1_export4_exportValue : lbytes size_test1_export4_exportValue = createL test1_export4_exportValue_list

let test1_export4_len:size_nat = 32

let test1 () =
  let res = test_setupBase test1_ciphersuite test1_skEm test1_pkEm test1_skRm test1_pkRm test1_info test1_enc test1_zz test1_key_schedule_context test1_secret test1_key test1_nonce test1_exporterSecret test1_encryption0_nonce test1_encryption1_nonce in
  let seq0:HPKE.seq_aead_s test1_ciphersuite = 0 in
  let enc_res0 = test_encryption test1_ciphersuite test1_key test1_nonce test1_exporterSecret test1_encryption0_aad test1_encryption0_plaintext seq0 test1_encryption0_ciphertext test1_encryption0_nonce in

  assert_norm (1 < pow2 (8 * 12));
  let seq1:HPKE.seq_aead_s test1_ciphersuite = (seq0 + 1) in
  let enc_res1 = test_encryption test1_ciphersuite test1_key test1_nonce test1_exporterSecret test1_encryption1_aad test1_encryption1_plaintext seq1 test1_encryption1_ciphertext test1_encryption1_nonce in

  assert_norm (2 < pow2 (8 * 12));
  let seq2:HPKE.seq_aead_s test1_ciphersuite = (seq1 + 1) in
  let enc_res2 = test_encryption test1_ciphersuite test1_key test1_nonce test1_exporterSecret test1_encryption2_aad test1_encryption2_plaintext 2 test1_encryption2_ciphertext test1_encryption2_nonce in

  assert_norm (3 < pow2 (8 * 12));
  let seq3:HPKE.seq_aead_s test1_ciphersuite = (seq2 + 1) in
  let enc_res3 = test_encryption test1_ciphersuite test1_key test1_nonce test1_exporterSecret test1_encryption3_aad test1_encryption3_plaintext 3 test1_encryption3_ciphertext test1_encryption3_nonce in

  assert_norm (4 < pow2 (8 * 12));
  let seq4:HPKE.seq_aead_s test1_ciphersuite = (seq3 + 1) in
  let enc_res4 = test_encryption test1_ciphersuite test1_key test1_nonce test1_exporterSecret test1_encryption4_aad test1_encryption4_plaintext 4 test1_encryption4_ciphertext test1_encryption4_nonce in

  assert_norm (5 < pow2 (8 * 12));
  let seq5:HPKE.seq_aead_s test1_ciphersuite = (seq4 + 1) in
  let enc_res5 = test_encryption test1_ciphersuite test1_key test1_nonce test1_exporterSecret test1_encryption5_aad test1_encryption5_plaintext 5 test1_encryption5_ciphertext test1_encryption5_nonce in

  assert_norm (6 < pow2 (8 * 12));
  let seq6:HPKE.seq_aead_s test1_ciphersuite = (seq5 + 1) in
  let enc_res6 = test_encryption test1_ciphersuite test1_key test1_nonce test1_exporterSecret test1_encryption6_aad test1_encryption6_plaintext 6 test1_encryption6_ciphertext test1_encryption6_nonce in

  assert_norm (7 < pow2 (8 * 12));
  let seq7:HPKE.seq_aead_s test1_ciphersuite = (seq6 + 1) in
  let enc_res7 = test_encryption test1_ciphersuite test1_key test1_nonce test1_exporterSecret test1_encryption7_aad test1_encryption7_plaintext 7 test1_encryption7_ciphertext test1_encryption7_nonce in

  assert_norm (8 < pow2 (8 * 12));
  let seq8:HPKE.seq_aead_s test1_ciphersuite = (seq7 + 1) in
  let enc_res8 = test_encryption test1_ciphersuite test1_key test1_nonce test1_exporterSecret test1_encryption8_aad test1_encryption8_plaintext 8 test1_encryption8_ciphertext test1_encryption8_nonce in

  assert_norm (9 < pow2 (8 * 12));
  let seq9:HPKE.seq_aead_s test1_ciphersuite = (seq8 + 1) in
  let enc_res9 = test_encryption test1_ciphersuite test1_key test1_nonce test1_exporterSecret test1_encryption9_aad test1_encryption9_plaintext 9 test1_encryption9_ciphertext test1_encryption9_nonce in

  let exp_res0 = test_export test1_ciphersuite test1_key test1_nonce test1_exporterSecret test1_export0_exportContext test1_export0_len test1_export0_exportValue in

  let exp_res1 = test_export test1_ciphersuite test1_key test1_nonce test1_exporterSecret test1_export1_exportContext test1_export1_len test1_export1_exportValue in

  let exp_res2 = test_export test1_ciphersuite test1_key test1_nonce test1_exporterSecret test1_export2_exportContext test1_export2_len test1_export2_exportValue in

  let exp_res3 = test_export test1_ciphersuite test1_key test1_nonce test1_exporterSecret test1_export3_exportContext test1_export3_len test1_export3_exportValue in

  let exp_res4 = test_export test1_ciphersuite test1_key test1_nonce test1_exporterSecret test1_export4_exportContext test1_export4_len test1_export4_exportValue in

  enc_res0 && enc_res1 && enc_res2 && enc_res3 && enc_res4 && enc_res5 && enc_res6 && enc_res7 && enc_res8 && enc_res9 && res && exp_res0 && exp_res1 && exp_res2 && exp_res3 && exp_res4


// Skipped unsupported test case 2

// Skipped unsupported test case 3

let test4_mode: HPKE.mode = HPKE.Base
let test4_ciphersuite = DH.DH_Curve25519, Hash.SHA2_256, AEAD.AES256_GCM, Hash.SHA2_256

// generated: "4f6465206f6e2061204772656369616e2055726e"
inline_for_extraction
let size_test4_info: size_nat = 20
let test4_info_list : l:list uint8{List.Tot.length l == size_test4_info} =
  [@inline_let]
  let l = [
    u8 0x4f; u8 0x64; u8 0x65; u8 0x20; u8 0x6f;
    u8 0x6e; u8 0x20; u8 0x61; u8 0x20; u8 0x47;
    u8 0x72; u8 0x65; u8 0x63; u8 0x69; u8 0x61;
    u8 0x6e; u8 0x20; u8 0x55; u8 0x72; u8 0x6e;
  ] in
  assert_norm(List.Tot.length l == size_test4_info);
  l
let test4_info : lbytes size_test4_info = createL test4_info_list

// generated: "0ac8cc88be800c0f373be6c752393cf0d37075c822f723c1242b0ac59f9e694a"
inline_for_extraction
let size_test4_skRm: size_nat = 32
let test4_skRm_list : l:list uint8{List.Tot.length l == size_test4_skRm} =
  [@inline_let]
  let l = [
    u8 0x0a; u8 0xc8; u8 0xcc; u8 0x88; u8 0xbe;
    u8 0x80; u8 0x0c; u8 0x0f; u8 0x37; u8 0x3b;
    u8 0xe6; u8 0xc7; u8 0x52; u8 0x39; u8 0x3c;
    u8 0xf0; u8 0xd3; u8 0x70; u8 0x75; u8 0xc8;
    u8 0x22; u8 0xf7; u8 0x23; u8 0xc1; u8 0x24;
    u8 0x2b; u8 0x0a; u8 0xc5; u8 0x9f; u8 0x9e;
    u8 0x69; u8 0x4a;
  ] in
  assert_norm(List.Tot.length l == size_test4_skRm);
  l
let test4_skRm : lbytes size_test4_skRm = createL test4_skRm_list

// generated: "83faf3f9115f09472707c56cd4acbd9b3979fb06f5f4bcb01f95e6b5191671a0"
inline_for_extraction
let size_test4_skEm: size_nat = 32
let test4_skEm_list : l:list uint8{List.Tot.length l == size_test4_skEm} =
  [@inline_let]
  let l = [
    u8 0x83; u8 0xfa; u8 0xf3; u8 0xf9; u8 0x11;
    u8 0x5f; u8 0x09; u8 0x47; u8 0x27; u8 0x07;
    u8 0xc5; u8 0x6c; u8 0xd4; u8 0xac; u8 0xbd;
    u8 0x9b; u8 0x39; u8 0x79; u8 0xfb; u8 0x06;
    u8 0xf5; u8 0xf4; u8 0xbc; u8 0xb0; u8 0x1f;
    u8 0x95; u8 0xe6; u8 0xb5; u8 0x19; u8 0x16;
    u8 0x71; u8 0xa0;
  ] in
  assert_norm(List.Tot.length l == size_test4_skEm);
  l
let test4_skEm : lbytes size_test4_skEm = createL test4_skEm_list

// generated: "ce6ed40baf0e664f8de039def71beb67f0b65230da52811aa531392512e36e2a"
inline_for_extraction
let size_test4_pkRm: size_nat = 32
let test4_pkRm_list : l:list uint8{List.Tot.length l == size_test4_pkRm} =
  [@inline_let]
  let l = [
    u8 0xce; u8 0x6e; u8 0xd4; u8 0x0b; u8 0xaf;
    u8 0x0e; u8 0x66; u8 0x4f; u8 0x8d; u8 0xe0;
    u8 0x39; u8 0xde; u8 0xf7; u8 0x1b; u8 0xeb;
    u8 0x67; u8 0xf0; u8 0xb6; u8 0x52; u8 0x30;
    u8 0xda; u8 0x52; u8 0x81; u8 0x1a; u8 0xa5;
    u8 0x31; u8 0x39; u8 0x25; u8 0x12; u8 0xe3;
    u8 0x6e; u8 0x2a;
  ] in
  assert_norm(List.Tot.length l == size_test4_pkRm);
  l
let test4_pkRm : lbytes size_test4_pkRm = createL test4_pkRm_list

// generated: "bb79bd3ef72feac5a48b3edacd828b4f3bd732d049b1db478f4ebc1e96c4f32c"
inline_for_extraction
let size_test4_pkEm: size_nat = 32
let test4_pkEm_list : l:list uint8{List.Tot.length l == size_test4_pkEm} =
  [@inline_let]
  let l = [
    u8 0xbb; u8 0x79; u8 0xbd; u8 0x3e; u8 0xf7;
    u8 0x2f; u8 0xea; u8 0xc5; u8 0xa4; u8 0x8b;
    u8 0x3e; u8 0xda; u8 0xcd; u8 0x82; u8 0x8b;
    u8 0x4f; u8 0x3b; u8 0xd7; u8 0x32; u8 0xd0;
    u8 0x49; u8 0xb1; u8 0xdb; u8 0x47; u8 0x8f;
    u8 0x4e; u8 0xbc; u8 0x1e; u8 0x96; u8 0xc4;
    u8 0xf3; u8 0x2c;
  ] in
  assert_norm(List.Tot.length l == size_test4_pkEm);
  l
let test4_pkEm : lbytes size_test4_pkEm = createL test4_pkEm_list

// generated: "bb79bd3ef72feac5a48b3edacd828b4f3bd732d049b1db478f4ebc1e96c4f32c"
inline_for_extraction
let size_test4_enc: size_nat = 32
let test4_enc_list : l:list uint8{List.Tot.length l == size_test4_enc} =
  [@inline_let]
  let l = [
    u8 0xbb; u8 0x79; u8 0xbd; u8 0x3e; u8 0xf7;
    u8 0x2f; u8 0xea; u8 0xc5; u8 0xa4; u8 0x8b;
    u8 0x3e; u8 0xda; u8 0xcd; u8 0x82; u8 0x8b;
    u8 0x4f; u8 0x3b; u8 0xd7; u8 0x32; u8 0xd0;
    u8 0x49; u8 0xb1; u8 0xdb; u8 0x47; u8 0x8f;
    u8 0x4e; u8 0xbc; u8 0x1e; u8 0x96; u8 0xc4;
    u8 0xf3; u8 0x2c;
  ] in
  assert_norm(List.Tot.length l == size_test4_enc);
  l
let test4_enc : lbytes size_test4_enc = createL test4_enc_list

// generated: "d5587ffc9098a517f11974d1c1a1c62ee840beb88bfa37753beb305c5881d767"
inline_for_extraction
let size_test4_zz: size_nat = 32
let test4_zz_list : l:list uint8{List.Tot.length l == size_test4_zz} =
  [@inline_let]
  let l = [
    u8 0xd5; u8 0x58; u8 0x7f; u8 0xfc; u8 0x90;
    u8 0x98; u8 0xa5; u8 0x17; u8 0xf1; u8 0x19;
    u8 0x74; u8 0xd1; u8 0xc1; u8 0xa1; u8 0xc6;
    u8 0x2e; u8 0xe8; u8 0x40; u8 0xbe; u8 0xb8;
    u8 0x8b; u8 0xfa; u8 0x37; u8 0x75; u8 0x3b;
    u8 0xeb; u8 0x30; u8 0x5c; u8 0x58; u8 0x81;
    u8 0xd7; u8 0x67;
  ] in
  assert_norm(List.Tot.length l == size_test4_zz);
  l
let test4_zz : lbytes size_test4_zz = createL test4_zz_list

// generated: "002000010002005d0f5548cb13d7eba5320ae0e21b1ee274aac7ea1cce02570cf993d1b2456449debcca602075cf6f8ef506613a82e1c73727e2c912d0c49f16cd56fc524af4ce"
inline_for_extraction
let size_test4_key_schedule_context: size_nat = 71
let test4_key_schedule_context_list : l:list uint8{List.Tot.length l == size_test4_key_schedule_context} =
  [@inline_let]
  let l = [
    u8 0x00; u8 0x20; u8 0x00; u8 0x01; u8 0x00;
    u8 0x02; u8 0x00; u8 0x5d; u8 0x0f; u8 0x55;
    u8 0x48; u8 0xcb; u8 0x13; u8 0xd7; u8 0xeb;
    u8 0xa5; u8 0x32; u8 0x0a; u8 0xe0; u8 0xe2;
    u8 0x1b; u8 0x1e; u8 0xe2; u8 0x74; u8 0xaa;
    u8 0xc7; u8 0xea; u8 0x1c; u8 0xce; u8 0x02;
    u8 0x57; u8 0x0c; u8 0xf9; u8 0x93; u8 0xd1;
    u8 0xb2; u8 0x45; u8 0x64; u8 0x49; u8 0xde;
    u8 0xbc; u8 0xca; u8 0x60; u8 0x20; u8 0x75;
    u8 0xcf; u8 0x6f; u8 0x8e; u8 0xf5; u8 0x06;
    u8 0x61; u8 0x3a; u8 0x82; u8 0xe1; u8 0xc7;
    u8 0x37; u8 0x27; u8 0xe2; u8 0xc9; u8 0x12;
    u8 0xd0; u8 0xc4; u8 0x9f; u8 0x16; u8 0xcd;
    u8 0x56; u8 0xfc; u8 0x52; u8 0x4a; u8 0xf4;
    u8 0xce;
  ] in
  assert_norm(List.Tot.length l == size_test4_key_schedule_context);
  l
let test4_key_schedule_context : lbytes size_test4_key_schedule_context = createL test4_key_schedule_context_list

// generated: "cc8c9097ebe88e339299a619aa2380df9ed3abe982a587bc08028e3090115b76"
inline_for_extraction
let size_test4_secret: size_nat = 32
let test4_secret_list : l:list uint8{List.Tot.length l == size_test4_secret} =
  [@inline_let]
  let l = [
    u8 0xcc; u8 0x8c; u8 0x90; u8 0x97; u8 0xeb;
    u8 0xe8; u8 0x8e; u8 0x33; u8 0x92; u8 0x99;
    u8 0xa6; u8 0x19; u8 0xaa; u8 0x23; u8 0x80;
    u8 0xdf; u8 0x9e; u8 0xd3; u8 0xab; u8 0xe9;
    u8 0x82; u8 0xa5; u8 0x87; u8 0xbc; u8 0x08;
    u8 0x02; u8 0x8e; u8 0x30; u8 0x90; u8 0x11;
    u8 0x5b; u8 0x76;
  ] in
  assert_norm(List.Tot.length l == size_test4_secret);
  l
let test4_secret : lbytes size_test4_secret = createL test4_secret_list

// generated: "aad4b8b9d30f1600fafcf5b7a3e74e2c6a1382675fd8086e7087675050b166f0"
inline_for_extraction
let size_test4_key: size_nat = 32
let test4_key_list : l:list uint8{List.Tot.length l == size_test4_key} =
  [@inline_let]
  let l = [
    u8 0xaa; u8 0xd4; u8 0xb8; u8 0xb9; u8 0xd3;
    u8 0x0f; u8 0x16; u8 0x00; u8 0xfa; u8 0xfc;
    u8 0xf5; u8 0xb7; u8 0xa3; u8 0xe7; u8 0x4e;
    u8 0x2c; u8 0x6a; u8 0x13; u8 0x82; u8 0x67;
    u8 0x5f; u8 0xd8; u8 0x08; u8 0x6e; u8 0x70;
    u8 0x87; u8 0x67; u8 0x50; u8 0x50; u8 0xb1;
    u8 0x66; u8 0xf0;
  ] in
  assert_norm(List.Tot.length l == size_test4_key);
  l
let test4_key : lbytes size_test4_key = createL test4_key_list

// generated: "d7d7e9b28a26cbec0f06414d"
inline_for_extraction
let size_test4_nonce: size_nat = 12
let test4_nonce_list : l:list uint8{List.Tot.length l == size_test4_nonce} =
  [@inline_let]
  let l = [
    u8 0xd7; u8 0xd7; u8 0xe9; u8 0xb2; u8 0x8a;
    u8 0x26; u8 0xcb; u8 0xec; u8 0x0f; u8 0x06;
    u8 0x41; u8 0x4d;
  ] in
  assert_norm(List.Tot.length l == size_test4_nonce);
  l
let test4_nonce : lbytes size_test4_nonce = createL test4_nonce_list

// generated: "8da7b655dba3f9a3cf3a6e1ed7b047fc0fabba3f9e0f5b39ded00951a7fdd008"
inline_for_extraction
let size_test4_exporterSecret: size_nat = 32
let test4_exporterSecret_list : l:list uint8{List.Tot.length l == size_test4_exporterSecret} =
  [@inline_let]
  let l = [
    u8 0x8d; u8 0xa7; u8 0xb6; u8 0x55; u8 0xdb;
    u8 0xa3; u8 0xf9; u8 0xa3; u8 0xcf; u8 0x3a;
    u8 0x6e; u8 0x1e; u8 0xd7; u8 0xb0; u8 0x47;
    u8 0xfc; u8 0x0f; u8 0xab; u8 0xba; u8 0x3f;
    u8 0x9e; u8 0x0f; u8 0x5b; u8 0x39; u8 0xde;
    u8 0xd0; u8 0x09; u8 0x51; u8 0xa7; u8 0xfd;
    u8 0xd0; u8 0x08;
  ] in
  assert_norm(List.Tot.length l == size_test4_exporterSecret);
  l
let test4_exporterSecret : lbytes size_test4_exporterSecret = createL test4_exporterSecret_list

// generated: "436f756e742d30"
inline_for_extraction
let size_test4_encryption0_aad: size_nat = 7
let test4_encryption0_aad_list : l:list uint8{List.Tot.length l == size_test4_encryption0_aad} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x75; u8 0x6e; u8 0x74;
    u8 0x2d; u8 0x30;
  ] in
  assert_norm(List.Tot.length l == size_test4_encryption0_aad);
  l
let test4_encryption0_aad : lbytes size_test4_encryption0_aad = createL test4_encryption0_aad_list

// generated: "6c642d40cf5abc3f333cb000dd1128eabe35f800339a5b62e2c34df4d08f8b94adad5d78b34235fb91a5f3127e"
inline_for_extraction
let size_test4_encryption0_ciphertext: size_nat = 45
let test4_encryption0_ciphertext_list : l:list uint8{List.Tot.length l == size_test4_encryption0_ciphertext} =
  [@inline_let]
  let l = [
    u8 0x6c; u8 0x64; u8 0x2d; u8 0x40; u8 0xcf;
    u8 0x5a; u8 0xbc; u8 0x3f; u8 0x33; u8 0x3c;
    u8 0xb0; u8 0x00; u8 0xdd; u8 0x11; u8 0x28;
    u8 0xea; u8 0xbe; u8 0x35; u8 0xf8; u8 0x00;
    u8 0x33; u8 0x9a; u8 0x5b; u8 0x62; u8 0xe2;
    u8 0xc3; u8 0x4d; u8 0xf4; u8 0xd0; u8 0x8f;
    u8 0x8b; u8 0x94; u8 0xad; u8 0xad; u8 0x5d;
    u8 0x78; u8 0xb3; u8 0x42; u8 0x35; u8 0xfb;
    u8 0x91; u8 0xa5; u8 0xf3; u8 0x12; u8 0x7e;
  ] in
  assert_norm(List.Tot.length l == size_test4_encryption0_ciphertext);
  l
let test4_encryption0_ciphertext : lbytes size_test4_encryption0_ciphertext = createL test4_encryption0_ciphertext_list

// generated: "d7d7e9b28a26cbec0f06414d"
inline_for_extraction
let size_test4_encryption0_nonce: size_nat = 12
let test4_encryption0_nonce_list : l:list uint8{List.Tot.length l == size_test4_encryption0_nonce} =
  [@inline_let]
  let l = [
    u8 0xd7; u8 0xd7; u8 0xe9; u8 0xb2; u8 0x8a;
    u8 0x26; u8 0xcb; u8 0xec; u8 0x0f; u8 0x06;
    u8 0x41; u8 0x4d;
  ] in
  assert_norm(List.Tot.length l == size_test4_encryption0_nonce);
  l
let test4_encryption0_nonce : lbytes size_test4_encryption0_nonce = createL test4_encryption0_nonce_list

// generated: "4265617574792069732074727574682c20747275746820626561757479"
inline_for_extraction
let size_test4_encryption0_plaintext: size_nat = 29
let test4_encryption0_plaintext_list : l:list uint8{List.Tot.length l == size_test4_encryption0_plaintext} =
  [@inline_let]
  let l = [
    u8 0x42; u8 0x65; u8 0x61; u8 0x75; u8 0x74;
    u8 0x79; u8 0x20; u8 0x69; u8 0x73; u8 0x20;
    u8 0x74; u8 0x72; u8 0x75; u8 0x74; u8 0x68;
    u8 0x2c; u8 0x20; u8 0x74; u8 0x72; u8 0x75;
    u8 0x74; u8 0x68; u8 0x20; u8 0x62; u8 0x65;
    u8 0x61; u8 0x75; u8 0x74; u8 0x79;
  ] in
  assert_norm(List.Tot.length l == size_test4_encryption0_plaintext);
  l
let test4_encryption0_plaintext : lbytes size_test4_encryption0_plaintext = createL test4_encryption0_plaintext_list

// generated: "436f756e742d31"
inline_for_extraction
let size_test4_encryption1_aad: size_nat = 7
let test4_encryption1_aad_list : l:list uint8{List.Tot.length l == size_test4_encryption1_aad} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x75; u8 0x6e; u8 0x74;
    u8 0x2d; u8 0x31;
  ] in
  assert_norm(List.Tot.length l == size_test4_encryption1_aad);
  l
let test4_encryption1_aad : lbytes size_test4_encryption1_aad = createL test4_encryption1_aad_list

// generated: "21d69023a73f5606f7e32533fbfb071f2da4cfdeb4e7e0c8767f3c8d2da4cd9a1b675e53e97de869ac8c2b0c17"
inline_for_extraction
let size_test4_encryption1_ciphertext: size_nat = 45
let test4_encryption1_ciphertext_list : l:list uint8{List.Tot.length l == size_test4_encryption1_ciphertext} =
  [@inline_let]
  let l = [
    u8 0x21; u8 0xd6; u8 0x90; u8 0x23; u8 0xa7;
    u8 0x3f; u8 0x56; u8 0x06; u8 0xf7; u8 0xe3;
    u8 0x25; u8 0x33; u8 0xfb; u8 0xfb; u8 0x07;
    u8 0x1f; u8 0x2d; u8 0xa4; u8 0xcf; u8 0xde;
    u8 0xb4; u8 0xe7; u8 0xe0; u8 0xc8; u8 0x76;
    u8 0x7f; u8 0x3c; u8 0x8d; u8 0x2d; u8 0xa4;
    u8 0xcd; u8 0x9a; u8 0x1b; u8 0x67; u8 0x5e;
    u8 0x53; u8 0xe9; u8 0x7d; u8 0xe8; u8 0x69;
    u8 0xac; u8 0x8c; u8 0x2b; u8 0x0c; u8 0x17;
  ] in
  assert_norm(List.Tot.length l == size_test4_encryption1_ciphertext);
  l
let test4_encryption1_ciphertext : lbytes size_test4_encryption1_ciphertext = createL test4_encryption1_ciphertext_list

// generated: "d7d7e9b28a26cbec0f06414c"
inline_for_extraction
let size_test4_encryption1_nonce: size_nat = 12
let test4_encryption1_nonce_list : l:list uint8{List.Tot.length l == size_test4_encryption1_nonce} =
  [@inline_let]
  let l = [
    u8 0xd7; u8 0xd7; u8 0xe9; u8 0xb2; u8 0x8a;
    u8 0x26; u8 0xcb; u8 0xec; u8 0x0f; u8 0x06;
    u8 0x41; u8 0x4c;
  ] in
  assert_norm(List.Tot.length l == size_test4_encryption1_nonce);
  l
let test4_encryption1_nonce : lbytes size_test4_encryption1_nonce = createL test4_encryption1_nonce_list

// generated: "4265617574792069732074727574682c20747275746820626561757479"
inline_for_extraction
let size_test4_encryption1_plaintext: size_nat = 29
let test4_encryption1_plaintext_list : l:list uint8{List.Tot.length l == size_test4_encryption1_plaintext} =
  [@inline_let]
  let l = [
    u8 0x42; u8 0x65; u8 0x61; u8 0x75; u8 0x74;
    u8 0x79; u8 0x20; u8 0x69; u8 0x73; u8 0x20;
    u8 0x74; u8 0x72; u8 0x75; u8 0x74; u8 0x68;
    u8 0x2c; u8 0x20; u8 0x74; u8 0x72; u8 0x75;
    u8 0x74; u8 0x68; u8 0x20; u8 0x62; u8 0x65;
    u8 0x61; u8 0x75; u8 0x74; u8 0x79;
  ] in
  assert_norm(List.Tot.length l == size_test4_encryption1_plaintext);
  l
let test4_encryption1_plaintext : lbytes size_test4_encryption1_plaintext = createL test4_encryption1_plaintext_list

// generated: "436f756e742d32"
inline_for_extraction
let size_test4_encryption2_aad: size_nat = 7
let test4_encryption2_aad_list : l:list uint8{List.Tot.length l == size_test4_encryption2_aad} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x75; u8 0x6e; u8 0x74;
    u8 0x2d; u8 0x32;
  ] in
  assert_norm(List.Tot.length l == size_test4_encryption2_aad);
  l
let test4_encryption2_aad : lbytes size_test4_encryption2_aad = createL test4_encryption2_aad_list

// generated: "eca1276a19f96fbf9d2c9f32e77baa05d11079517a43ffc00bd638e8349189a3d81d58478a6b4d42c99426231e"
inline_for_extraction
let size_test4_encryption2_ciphertext: size_nat = 45
let test4_encryption2_ciphertext_list : l:list uint8{List.Tot.length l == size_test4_encryption2_ciphertext} =
  [@inline_let]
  let l = [
    u8 0xec; u8 0xa1; u8 0x27; u8 0x6a; u8 0x19;
    u8 0xf9; u8 0x6f; u8 0xbf; u8 0x9d; u8 0x2c;
    u8 0x9f; u8 0x32; u8 0xe7; u8 0x7b; u8 0xaa;
    u8 0x05; u8 0xd1; u8 0x10; u8 0x79; u8 0x51;
    u8 0x7a; u8 0x43; u8 0xff; u8 0xc0; u8 0x0b;
    u8 0xd6; u8 0x38; u8 0xe8; u8 0x34; u8 0x91;
    u8 0x89; u8 0xa3; u8 0xd8; u8 0x1d; u8 0x58;
    u8 0x47; u8 0x8a; u8 0x6b; u8 0x4d; u8 0x42;
    u8 0xc9; u8 0x94; u8 0x26; u8 0x23; u8 0x1e;
  ] in
  assert_norm(List.Tot.length l == size_test4_encryption2_ciphertext);
  l
let test4_encryption2_ciphertext : lbytes size_test4_encryption2_ciphertext = createL test4_encryption2_ciphertext_list

// generated: "d7d7e9b28a26cbec0f06414f"
inline_for_extraction
let size_test4_encryption2_nonce: size_nat = 12
let test4_encryption2_nonce_list : l:list uint8{List.Tot.length l == size_test4_encryption2_nonce} =
  [@inline_let]
  let l = [
    u8 0xd7; u8 0xd7; u8 0xe9; u8 0xb2; u8 0x8a;
    u8 0x26; u8 0xcb; u8 0xec; u8 0x0f; u8 0x06;
    u8 0x41; u8 0x4f;
  ] in
  assert_norm(List.Tot.length l == size_test4_encryption2_nonce);
  l
let test4_encryption2_nonce : lbytes size_test4_encryption2_nonce = createL test4_encryption2_nonce_list

// generated: "4265617574792069732074727574682c20747275746820626561757479"
inline_for_extraction
let size_test4_encryption2_plaintext: size_nat = 29
let test4_encryption2_plaintext_list : l:list uint8{List.Tot.length l == size_test4_encryption2_plaintext} =
  [@inline_let]
  let l = [
    u8 0x42; u8 0x65; u8 0x61; u8 0x75; u8 0x74;
    u8 0x79; u8 0x20; u8 0x69; u8 0x73; u8 0x20;
    u8 0x74; u8 0x72; u8 0x75; u8 0x74; u8 0x68;
    u8 0x2c; u8 0x20; u8 0x74; u8 0x72; u8 0x75;
    u8 0x74; u8 0x68; u8 0x20; u8 0x62; u8 0x65;
    u8 0x61; u8 0x75; u8 0x74; u8 0x79;
  ] in
  assert_norm(List.Tot.length l == size_test4_encryption2_plaintext);
  l
let test4_encryption2_plaintext : lbytes size_test4_encryption2_plaintext = createL test4_encryption2_plaintext_list

// generated: "436f756e742d33"
inline_for_extraction
let size_test4_encryption3_aad: size_nat = 7
let test4_encryption3_aad_list : l:list uint8{List.Tot.length l == size_test4_encryption3_aad} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x75; u8 0x6e; u8 0x74;
    u8 0x2d; u8 0x33;
  ] in
  assert_norm(List.Tot.length l == size_test4_encryption3_aad);
  l
let test4_encryption3_aad : lbytes size_test4_encryption3_aad = createL test4_encryption3_aad_list

// generated: "8e258cc5e7b51e40acc5a824cea130a45b70298c2dc76ddd00329de02cd4f8b87544f50cac4b695773847c983d"
inline_for_extraction
let size_test4_encryption3_ciphertext: size_nat = 45
let test4_encryption3_ciphertext_list : l:list uint8{List.Tot.length l == size_test4_encryption3_ciphertext} =
  [@inline_let]
  let l = [
    u8 0x8e; u8 0x25; u8 0x8c; u8 0xc5; u8 0xe7;
    u8 0xb5; u8 0x1e; u8 0x40; u8 0xac; u8 0xc5;
    u8 0xa8; u8 0x24; u8 0xce; u8 0xa1; u8 0x30;
    u8 0xa4; u8 0x5b; u8 0x70; u8 0x29; u8 0x8c;
    u8 0x2d; u8 0xc7; u8 0x6d; u8 0xdd; u8 0x00;
    u8 0x32; u8 0x9d; u8 0xe0; u8 0x2c; u8 0xd4;
    u8 0xf8; u8 0xb8; u8 0x75; u8 0x44; u8 0xf5;
    u8 0x0c; u8 0xac; u8 0x4b; u8 0x69; u8 0x57;
    u8 0x73; u8 0x84; u8 0x7c; u8 0x98; u8 0x3d;
  ] in
  assert_norm(List.Tot.length l == size_test4_encryption3_ciphertext);
  l
let test4_encryption3_ciphertext : lbytes size_test4_encryption3_ciphertext = createL test4_encryption3_ciphertext_list

// generated: "d7d7e9b28a26cbec0f06414e"
inline_for_extraction
let size_test4_encryption3_nonce: size_nat = 12
let test4_encryption3_nonce_list : l:list uint8{List.Tot.length l == size_test4_encryption3_nonce} =
  [@inline_let]
  let l = [
    u8 0xd7; u8 0xd7; u8 0xe9; u8 0xb2; u8 0x8a;
    u8 0x26; u8 0xcb; u8 0xec; u8 0x0f; u8 0x06;
    u8 0x41; u8 0x4e;
  ] in
  assert_norm(List.Tot.length l == size_test4_encryption3_nonce);
  l
let test4_encryption3_nonce : lbytes size_test4_encryption3_nonce = createL test4_encryption3_nonce_list

// generated: "4265617574792069732074727574682c20747275746820626561757479"
inline_for_extraction
let size_test4_encryption3_plaintext: size_nat = 29
let test4_encryption3_plaintext_list : l:list uint8{List.Tot.length l == size_test4_encryption3_plaintext} =
  [@inline_let]
  let l = [
    u8 0x42; u8 0x65; u8 0x61; u8 0x75; u8 0x74;
    u8 0x79; u8 0x20; u8 0x69; u8 0x73; u8 0x20;
    u8 0x74; u8 0x72; u8 0x75; u8 0x74; u8 0x68;
    u8 0x2c; u8 0x20; u8 0x74; u8 0x72; u8 0x75;
    u8 0x74; u8 0x68; u8 0x20; u8 0x62; u8 0x65;
    u8 0x61; u8 0x75; u8 0x74; u8 0x79;
  ] in
  assert_norm(List.Tot.length l == size_test4_encryption3_plaintext);
  l
let test4_encryption3_plaintext : lbytes size_test4_encryption3_plaintext = createL test4_encryption3_plaintext_list

// generated: "436f756e742d34"
inline_for_extraction
let size_test4_encryption4_aad: size_nat = 7
let test4_encryption4_aad_list : l:list uint8{List.Tot.length l == size_test4_encryption4_aad} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x75; u8 0x6e; u8 0x74;
    u8 0x2d; u8 0x34;
  ] in
  assert_norm(List.Tot.length l == size_test4_encryption4_aad);
  l
let test4_encryption4_aad : lbytes size_test4_encryption4_aad = createL test4_encryption4_aad_list

// generated: "674c61ad9ffdb284f905275a4c2b1d9eab468fe59d6168b48266e2ecd155a0c6e42e0c89610ab639abf9b08794"
inline_for_extraction
let size_test4_encryption4_ciphertext: size_nat = 45
let test4_encryption4_ciphertext_list : l:list uint8{List.Tot.length l == size_test4_encryption4_ciphertext} =
  [@inline_let]
  let l = [
    u8 0x67; u8 0x4c; u8 0x61; u8 0xad; u8 0x9f;
    u8 0xfd; u8 0xb2; u8 0x84; u8 0xf9; u8 0x05;
    u8 0x27; u8 0x5a; u8 0x4c; u8 0x2b; u8 0x1d;
    u8 0x9e; u8 0xab; u8 0x46; u8 0x8f; u8 0xe5;
    u8 0x9d; u8 0x61; u8 0x68; u8 0xb4; u8 0x82;
    u8 0x66; u8 0xe2; u8 0xec; u8 0xd1; u8 0x55;
    u8 0xa0; u8 0xc6; u8 0xe4; u8 0x2e; u8 0x0c;
    u8 0x89; u8 0x61; u8 0x0a; u8 0xb6; u8 0x39;
    u8 0xab; u8 0xf9; u8 0xb0; u8 0x87; u8 0x94;
  ] in
  assert_norm(List.Tot.length l == size_test4_encryption4_ciphertext);
  l
let test4_encryption4_ciphertext : lbytes size_test4_encryption4_ciphertext = createL test4_encryption4_ciphertext_list

// generated: "d7d7e9b28a26cbec0f064149"
inline_for_extraction
let size_test4_encryption4_nonce: size_nat = 12
let test4_encryption4_nonce_list : l:list uint8{List.Tot.length l == size_test4_encryption4_nonce} =
  [@inline_let]
  let l = [
    u8 0xd7; u8 0xd7; u8 0xe9; u8 0xb2; u8 0x8a;
    u8 0x26; u8 0xcb; u8 0xec; u8 0x0f; u8 0x06;
    u8 0x41; u8 0x49;
  ] in
  assert_norm(List.Tot.length l == size_test4_encryption4_nonce);
  l
let test4_encryption4_nonce : lbytes size_test4_encryption4_nonce = createL test4_encryption4_nonce_list

// generated: "4265617574792069732074727574682c20747275746820626561757479"
inline_for_extraction
let size_test4_encryption4_plaintext: size_nat = 29
let test4_encryption4_plaintext_list : l:list uint8{List.Tot.length l == size_test4_encryption4_plaintext} =
  [@inline_let]
  let l = [
    u8 0x42; u8 0x65; u8 0x61; u8 0x75; u8 0x74;
    u8 0x79; u8 0x20; u8 0x69; u8 0x73; u8 0x20;
    u8 0x74; u8 0x72; u8 0x75; u8 0x74; u8 0x68;
    u8 0x2c; u8 0x20; u8 0x74; u8 0x72; u8 0x75;
    u8 0x74; u8 0x68; u8 0x20; u8 0x62; u8 0x65;
    u8 0x61; u8 0x75; u8 0x74; u8 0x79;
  ] in
  assert_norm(List.Tot.length l == size_test4_encryption4_plaintext);
  l
let test4_encryption4_plaintext : lbytes size_test4_encryption4_plaintext = createL test4_encryption4_plaintext_list

// generated: "436f756e742d35"
inline_for_extraction
let size_test4_encryption5_aad: size_nat = 7
let test4_encryption5_aad_list : l:list uint8{List.Tot.length l == size_test4_encryption5_aad} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x75; u8 0x6e; u8 0x74;
    u8 0x2d; u8 0x35;
  ] in
  assert_norm(List.Tot.length l == size_test4_encryption5_aad);
  l
let test4_encryption5_aad : lbytes size_test4_encryption5_aad = createL test4_encryption5_aad_list

// generated: "ca18146a6c6dfd5346b3a93993f7b0191e3070ab313d06e44aff94fb9d35f9f2cf30488919992477e0962b3118"
inline_for_extraction
let size_test4_encryption5_ciphertext: size_nat = 45
let test4_encryption5_ciphertext_list : l:list uint8{List.Tot.length l == size_test4_encryption5_ciphertext} =
  [@inline_let]
  let l = [
    u8 0xca; u8 0x18; u8 0x14; u8 0x6a; u8 0x6c;
    u8 0x6d; u8 0xfd; u8 0x53; u8 0x46; u8 0xb3;
    u8 0xa9; u8 0x39; u8 0x93; u8 0xf7; u8 0xb0;
    u8 0x19; u8 0x1e; u8 0x30; u8 0x70; u8 0xab;
    u8 0x31; u8 0x3d; u8 0x06; u8 0xe4; u8 0x4a;
    u8 0xff; u8 0x94; u8 0xfb; u8 0x9d; u8 0x35;
    u8 0xf9; u8 0xf2; u8 0xcf; u8 0x30; u8 0x48;
    u8 0x89; u8 0x19; u8 0x99; u8 0x24; u8 0x77;
    u8 0xe0; u8 0x96; u8 0x2b; u8 0x31; u8 0x18;
  ] in
  assert_norm(List.Tot.length l == size_test4_encryption5_ciphertext);
  l
let test4_encryption5_ciphertext : lbytes size_test4_encryption5_ciphertext = createL test4_encryption5_ciphertext_list

// generated: "d7d7e9b28a26cbec0f064148"
inline_for_extraction
let size_test4_encryption5_nonce: size_nat = 12
let test4_encryption5_nonce_list : l:list uint8{List.Tot.length l == size_test4_encryption5_nonce} =
  [@inline_let]
  let l = [
    u8 0xd7; u8 0xd7; u8 0xe9; u8 0xb2; u8 0x8a;
    u8 0x26; u8 0xcb; u8 0xec; u8 0x0f; u8 0x06;
    u8 0x41; u8 0x48;
  ] in
  assert_norm(List.Tot.length l == size_test4_encryption5_nonce);
  l
let test4_encryption5_nonce : lbytes size_test4_encryption5_nonce = createL test4_encryption5_nonce_list

// generated: "4265617574792069732074727574682c20747275746820626561757479"
inline_for_extraction
let size_test4_encryption5_plaintext: size_nat = 29
let test4_encryption5_plaintext_list : l:list uint8{List.Tot.length l == size_test4_encryption5_plaintext} =
  [@inline_let]
  let l = [
    u8 0x42; u8 0x65; u8 0x61; u8 0x75; u8 0x74;
    u8 0x79; u8 0x20; u8 0x69; u8 0x73; u8 0x20;
    u8 0x74; u8 0x72; u8 0x75; u8 0x74; u8 0x68;
    u8 0x2c; u8 0x20; u8 0x74; u8 0x72; u8 0x75;
    u8 0x74; u8 0x68; u8 0x20; u8 0x62; u8 0x65;
    u8 0x61; u8 0x75; u8 0x74; u8 0x79;
  ] in
  assert_norm(List.Tot.length l == size_test4_encryption5_plaintext);
  l
let test4_encryption5_plaintext : lbytes size_test4_encryption5_plaintext = createL test4_encryption5_plaintext_list

// generated: "436f756e742d36"
inline_for_extraction
let size_test4_encryption6_aad: size_nat = 7
let test4_encryption6_aad_list : l:list uint8{List.Tot.length l == size_test4_encryption6_aad} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x75; u8 0x6e; u8 0x74;
    u8 0x2d; u8 0x36;
  ] in
  assert_norm(List.Tot.length l == size_test4_encryption6_aad);
  l
let test4_encryption6_aad : lbytes size_test4_encryption6_aad = createL test4_encryption6_aad_list

// generated: "1978428aebaaf8691f1851415c5881cad03ececc73815a9c09dd6b337b908e8eb0c981f3b446a8be067cbe6dae"
inline_for_extraction
let size_test4_encryption6_ciphertext: size_nat = 45
let test4_encryption6_ciphertext_list : l:list uint8{List.Tot.length l == size_test4_encryption6_ciphertext} =
  [@inline_let]
  let l = [
    u8 0x19; u8 0x78; u8 0x42; u8 0x8a; u8 0xeb;
    u8 0xaa; u8 0xf8; u8 0x69; u8 0x1f; u8 0x18;
    u8 0x51; u8 0x41; u8 0x5c; u8 0x58; u8 0x81;
    u8 0xca; u8 0xd0; u8 0x3e; u8 0xce; u8 0xcc;
    u8 0x73; u8 0x81; u8 0x5a; u8 0x9c; u8 0x09;
    u8 0xdd; u8 0x6b; u8 0x33; u8 0x7b; u8 0x90;
    u8 0x8e; u8 0x8e; u8 0xb0; u8 0xc9; u8 0x81;
    u8 0xf3; u8 0xb4; u8 0x46; u8 0xa8; u8 0xbe;
    u8 0x06; u8 0x7c; u8 0xbe; u8 0x6d; u8 0xae;
  ] in
  assert_norm(List.Tot.length l == size_test4_encryption6_ciphertext);
  l
let test4_encryption6_ciphertext : lbytes size_test4_encryption6_ciphertext = createL test4_encryption6_ciphertext_list

// generated: "d7d7e9b28a26cbec0f06414b"
inline_for_extraction
let size_test4_encryption6_nonce: size_nat = 12
let test4_encryption6_nonce_list : l:list uint8{List.Tot.length l == size_test4_encryption6_nonce} =
  [@inline_let]
  let l = [
    u8 0xd7; u8 0xd7; u8 0xe9; u8 0xb2; u8 0x8a;
    u8 0x26; u8 0xcb; u8 0xec; u8 0x0f; u8 0x06;
    u8 0x41; u8 0x4b;
  ] in
  assert_norm(List.Tot.length l == size_test4_encryption6_nonce);
  l
let test4_encryption6_nonce : lbytes size_test4_encryption6_nonce = createL test4_encryption6_nonce_list

// generated: "4265617574792069732074727574682c20747275746820626561757479"
inline_for_extraction
let size_test4_encryption6_plaintext: size_nat = 29
let test4_encryption6_plaintext_list : l:list uint8{List.Tot.length l == size_test4_encryption6_plaintext} =
  [@inline_let]
  let l = [
    u8 0x42; u8 0x65; u8 0x61; u8 0x75; u8 0x74;
    u8 0x79; u8 0x20; u8 0x69; u8 0x73; u8 0x20;
    u8 0x74; u8 0x72; u8 0x75; u8 0x74; u8 0x68;
    u8 0x2c; u8 0x20; u8 0x74; u8 0x72; u8 0x75;
    u8 0x74; u8 0x68; u8 0x20; u8 0x62; u8 0x65;
    u8 0x61; u8 0x75; u8 0x74; u8 0x79;
  ] in
  assert_norm(List.Tot.length l == size_test4_encryption6_plaintext);
  l
let test4_encryption6_plaintext : lbytes size_test4_encryption6_plaintext = createL test4_encryption6_plaintext_list

// generated: "436f756e742d37"
inline_for_extraction
let size_test4_encryption7_aad: size_nat = 7
let test4_encryption7_aad_list : l:list uint8{List.Tot.length l == size_test4_encryption7_aad} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x75; u8 0x6e; u8 0x74;
    u8 0x2d; u8 0x37;
  ] in
  assert_norm(List.Tot.length l == size_test4_encryption7_aad);
  l
let test4_encryption7_aad : lbytes size_test4_encryption7_aad = createL test4_encryption7_aad_list

// generated: "4ac7caf227b3335dda132178d1537f95e9d34fd115bd0f731f4068c1216828b1fd87fe9aa13cd8c7f2829d2200"
inline_for_extraction
let size_test4_encryption7_ciphertext: size_nat = 45
let test4_encryption7_ciphertext_list : l:list uint8{List.Tot.length l == size_test4_encryption7_ciphertext} =
  [@inline_let]
  let l = [
    u8 0x4a; u8 0xc7; u8 0xca; u8 0xf2; u8 0x27;
    u8 0xb3; u8 0x33; u8 0x5d; u8 0xda; u8 0x13;
    u8 0x21; u8 0x78; u8 0xd1; u8 0x53; u8 0x7f;
    u8 0x95; u8 0xe9; u8 0xd3; u8 0x4f; u8 0xd1;
    u8 0x15; u8 0xbd; u8 0x0f; u8 0x73; u8 0x1f;
    u8 0x40; u8 0x68; u8 0xc1; u8 0x21; u8 0x68;
    u8 0x28; u8 0xb1; u8 0xfd; u8 0x87; u8 0xfe;
    u8 0x9a; u8 0xa1; u8 0x3c; u8 0xd8; u8 0xc7;
    u8 0xf2; u8 0x82; u8 0x9d; u8 0x22; u8 0x00;
  ] in
  assert_norm(List.Tot.length l == size_test4_encryption7_ciphertext);
  l
let test4_encryption7_ciphertext : lbytes size_test4_encryption7_ciphertext = createL test4_encryption7_ciphertext_list

// generated: "d7d7e9b28a26cbec0f06414a"
inline_for_extraction
let size_test4_encryption7_nonce: size_nat = 12
let test4_encryption7_nonce_list : l:list uint8{List.Tot.length l == size_test4_encryption7_nonce} =
  [@inline_let]
  let l = [
    u8 0xd7; u8 0xd7; u8 0xe9; u8 0xb2; u8 0x8a;
    u8 0x26; u8 0xcb; u8 0xec; u8 0x0f; u8 0x06;
    u8 0x41; u8 0x4a;
  ] in
  assert_norm(List.Tot.length l == size_test4_encryption7_nonce);
  l
let test4_encryption7_nonce : lbytes size_test4_encryption7_nonce = createL test4_encryption7_nonce_list

// generated: "4265617574792069732074727574682c20747275746820626561757479"
inline_for_extraction
let size_test4_encryption7_plaintext: size_nat = 29
let test4_encryption7_plaintext_list : l:list uint8{List.Tot.length l == size_test4_encryption7_plaintext} =
  [@inline_let]
  let l = [
    u8 0x42; u8 0x65; u8 0x61; u8 0x75; u8 0x74;
    u8 0x79; u8 0x20; u8 0x69; u8 0x73; u8 0x20;
    u8 0x74; u8 0x72; u8 0x75; u8 0x74; u8 0x68;
    u8 0x2c; u8 0x20; u8 0x74; u8 0x72; u8 0x75;
    u8 0x74; u8 0x68; u8 0x20; u8 0x62; u8 0x65;
    u8 0x61; u8 0x75; u8 0x74; u8 0x79;
  ] in
  assert_norm(List.Tot.length l == size_test4_encryption7_plaintext);
  l
let test4_encryption7_plaintext : lbytes size_test4_encryption7_plaintext = createL test4_encryption7_plaintext_list

// generated: "436f756e742d38"
inline_for_extraction
let size_test4_encryption8_aad: size_nat = 7
let test4_encryption8_aad_list : l:list uint8{List.Tot.length l == size_test4_encryption8_aad} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x75; u8 0x6e; u8 0x74;
    u8 0x2d; u8 0x38;
  ] in
  assert_norm(List.Tot.length l == size_test4_encryption8_aad);
  l
let test4_encryption8_aad : lbytes size_test4_encryption8_aad = createL test4_encryption8_aad_list

// generated: "1592c48b01a4285c9e5984419d053908e4022a4c7d308f2715ace9cbc4435732b80e575b4b8ea2d43a566e47e9"
inline_for_extraction
let size_test4_encryption8_ciphertext: size_nat = 45
let test4_encryption8_ciphertext_list : l:list uint8{List.Tot.length l == size_test4_encryption8_ciphertext} =
  [@inline_let]
  let l = [
    u8 0x15; u8 0x92; u8 0xc4; u8 0x8b; u8 0x01;
    u8 0xa4; u8 0x28; u8 0x5c; u8 0x9e; u8 0x59;
    u8 0x84; u8 0x41; u8 0x9d; u8 0x05; u8 0x39;
    u8 0x08; u8 0xe4; u8 0x02; u8 0x2a; u8 0x4c;
    u8 0x7d; u8 0x30; u8 0x8f; u8 0x27; u8 0x15;
    u8 0xac; u8 0xe9; u8 0xcb; u8 0xc4; u8 0x43;
    u8 0x57; u8 0x32; u8 0xb8; u8 0x0e; u8 0x57;
    u8 0x5b; u8 0x4b; u8 0x8e; u8 0xa2; u8 0xd4;
    u8 0x3a; u8 0x56; u8 0x6e; u8 0x47; u8 0xe9;
  ] in
  assert_norm(List.Tot.length l == size_test4_encryption8_ciphertext);
  l
let test4_encryption8_ciphertext : lbytes size_test4_encryption8_ciphertext = createL test4_encryption8_ciphertext_list

// generated: "d7d7e9b28a26cbec0f064145"
inline_for_extraction
let size_test4_encryption8_nonce: size_nat = 12
let test4_encryption8_nonce_list : l:list uint8{List.Tot.length l == size_test4_encryption8_nonce} =
  [@inline_let]
  let l = [
    u8 0xd7; u8 0xd7; u8 0xe9; u8 0xb2; u8 0x8a;
    u8 0x26; u8 0xcb; u8 0xec; u8 0x0f; u8 0x06;
    u8 0x41; u8 0x45;
  ] in
  assert_norm(List.Tot.length l == size_test4_encryption8_nonce);
  l
let test4_encryption8_nonce : lbytes size_test4_encryption8_nonce = createL test4_encryption8_nonce_list

// generated: "4265617574792069732074727574682c20747275746820626561757479"
inline_for_extraction
let size_test4_encryption8_plaintext: size_nat = 29
let test4_encryption8_plaintext_list : l:list uint8{List.Tot.length l == size_test4_encryption8_plaintext} =
  [@inline_let]
  let l = [
    u8 0x42; u8 0x65; u8 0x61; u8 0x75; u8 0x74;
    u8 0x79; u8 0x20; u8 0x69; u8 0x73; u8 0x20;
    u8 0x74; u8 0x72; u8 0x75; u8 0x74; u8 0x68;
    u8 0x2c; u8 0x20; u8 0x74; u8 0x72; u8 0x75;
    u8 0x74; u8 0x68; u8 0x20; u8 0x62; u8 0x65;
    u8 0x61; u8 0x75; u8 0x74; u8 0x79;
  ] in
  assert_norm(List.Tot.length l == size_test4_encryption8_plaintext);
  l
let test4_encryption8_plaintext : lbytes size_test4_encryption8_plaintext = createL test4_encryption8_plaintext_list

// generated: "436f756e742d39"
inline_for_extraction
let size_test4_encryption9_aad: size_nat = 7
let test4_encryption9_aad_list : l:list uint8{List.Tot.length l == size_test4_encryption9_aad} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x75; u8 0x6e; u8 0x74;
    u8 0x2d; u8 0x39;
  ] in
  assert_norm(List.Tot.length l == size_test4_encryption9_aad);
  l
let test4_encryption9_aad : lbytes size_test4_encryption9_aad = createL test4_encryption9_aad_list

// generated: "8664fc067f3058a21ba811f22fbf9a698a06bdde5e13346c57d616774354d6e312d34149b310687130b75d617c"
inline_for_extraction
let size_test4_encryption9_ciphertext: size_nat = 45
let test4_encryption9_ciphertext_list : l:list uint8{List.Tot.length l == size_test4_encryption9_ciphertext} =
  [@inline_let]
  let l = [
    u8 0x86; u8 0x64; u8 0xfc; u8 0x06; u8 0x7f;
    u8 0x30; u8 0x58; u8 0xa2; u8 0x1b; u8 0xa8;
    u8 0x11; u8 0xf2; u8 0x2f; u8 0xbf; u8 0x9a;
    u8 0x69; u8 0x8a; u8 0x06; u8 0xbd; u8 0xde;
    u8 0x5e; u8 0x13; u8 0x34; u8 0x6c; u8 0x57;
    u8 0xd6; u8 0x16; u8 0x77; u8 0x43; u8 0x54;
    u8 0xd6; u8 0xe3; u8 0x12; u8 0xd3; u8 0x41;
    u8 0x49; u8 0xb3; u8 0x10; u8 0x68; u8 0x71;
    u8 0x30; u8 0xb7; u8 0x5d; u8 0x61; u8 0x7c;
  ] in
  assert_norm(List.Tot.length l == size_test4_encryption9_ciphertext);
  l
let test4_encryption9_ciphertext : lbytes size_test4_encryption9_ciphertext = createL test4_encryption9_ciphertext_list

// generated: "d7d7e9b28a26cbec0f064144"
inline_for_extraction
let size_test4_encryption9_nonce: size_nat = 12
let test4_encryption9_nonce_list : l:list uint8{List.Tot.length l == size_test4_encryption9_nonce} =
  [@inline_let]
  let l = [
    u8 0xd7; u8 0xd7; u8 0xe9; u8 0xb2; u8 0x8a;
    u8 0x26; u8 0xcb; u8 0xec; u8 0x0f; u8 0x06;
    u8 0x41; u8 0x44;
  ] in
  assert_norm(List.Tot.length l == size_test4_encryption9_nonce);
  l
let test4_encryption9_nonce : lbytes size_test4_encryption9_nonce = createL test4_encryption9_nonce_list

// generated: "4265617574792069732074727574682c20747275746820626561757479"
inline_for_extraction
let size_test4_encryption9_plaintext: size_nat = 29
let test4_encryption9_plaintext_list : l:list uint8{List.Tot.length l == size_test4_encryption9_plaintext} =
  [@inline_let]
  let l = [
    u8 0x42; u8 0x65; u8 0x61; u8 0x75; u8 0x74;
    u8 0x79; u8 0x20; u8 0x69; u8 0x73; u8 0x20;
    u8 0x74; u8 0x72; u8 0x75; u8 0x74; u8 0x68;
    u8 0x2c; u8 0x20; u8 0x74; u8 0x72; u8 0x75;
    u8 0x74; u8 0x68; u8 0x20; u8 0x62; u8 0x65;
    u8 0x61; u8 0x75; u8 0x74; u8 0x79;
  ] in
  assert_norm(List.Tot.length l == size_test4_encryption9_plaintext);
  l
let test4_encryption9_plaintext : lbytes size_test4_encryption9_plaintext = createL test4_encryption9_plaintext_list

// generated: "436f6e746578742d30"
inline_for_extraction
let size_test4_export0_exportContext: size_nat = 9
let test4_export0_exportContext_list : l:list uint8{List.Tot.length l == size_test4_export0_exportContext} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x6e; u8 0x74; u8 0x65;
    u8 0x78; u8 0x74; u8 0x2d; u8 0x30;
  ] in
  assert_norm(List.Tot.length l == size_test4_export0_exportContext);
  l
let test4_export0_exportContext : lbytes size_test4_export0_exportContext = createL test4_export0_exportContext_list

// generated: "6e65d0c9dc92d3b4359f0b99fa2476850c28722474af32a71728cd40a97cf89a"
inline_for_extraction
let size_test4_export0_exportValue: size_nat = 32
let test4_export0_exportValue_list : l:list uint8{List.Tot.length l == size_test4_export0_exportValue} =
  [@inline_let]
  let l = [
    u8 0x6e; u8 0x65; u8 0xd0; u8 0xc9; u8 0xdc;
    u8 0x92; u8 0xd3; u8 0xb4; u8 0x35; u8 0x9f;
    u8 0x0b; u8 0x99; u8 0xfa; u8 0x24; u8 0x76;
    u8 0x85; u8 0x0c; u8 0x28; u8 0x72; u8 0x24;
    u8 0x74; u8 0xaf; u8 0x32; u8 0xa7; u8 0x17;
    u8 0x28; u8 0xcd; u8 0x40; u8 0xa9; u8 0x7c;
    u8 0xf8; u8 0x9a;
  ] in
  assert_norm(List.Tot.length l == size_test4_export0_exportValue);
  l
let test4_export0_exportValue : lbytes size_test4_export0_exportValue = createL test4_export0_exportValue_list

let test4_export0_len:size_nat = 32
// generated: "436f6e746578742d31"
inline_for_extraction
let size_test4_export1_exportContext: size_nat = 9
let test4_export1_exportContext_list : l:list uint8{List.Tot.length l == size_test4_export1_exportContext} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x6e; u8 0x74; u8 0x65;
    u8 0x78; u8 0x74; u8 0x2d; u8 0x31;
  ] in
  assert_norm(List.Tot.length l == size_test4_export1_exportContext);
  l
let test4_export1_exportContext : lbytes size_test4_export1_exportContext = createL test4_export1_exportContext_list

// generated: "ed94543e6f0eb04f29da2b837703c70f4120295d84aad540a6ec43124ac2fd86"
inline_for_extraction
let size_test4_export1_exportValue: size_nat = 32
let test4_export1_exportValue_list : l:list uint8{List.Tot.length l == size_test4_export1_exportValue} =
  [@inline_let]
  let l = [
    u8 0xed; u8 0x94; u8 0x54; u8 0x3e; u8 0x6f;
    u8 0x0e; u8 0xb0; u8 0x4f; u8 0x29; u8 0xda;
    u8 0x2b; u8 0x83; u8 0x77; u8 0x03; u8 0xc7;
    u8 0x0f; u8 0x41; u8 0x20; u8 0x29; u8 0x5d;
    u8 0x84; u8 0xaa; u8 0xd5; u8 0x40; u8 0xa6;
    u8 0xec; u8 0x43; u8 0x12; u8 0x4a; u8 0xc2;
    u8 0xfd; u8 0x86;
  ] in
  assert_norm(List.Tot.length l == size_test4_export1_exportValue);
  l
let test4_export1_exportValue : lbytes size_test4_export1_exportValue = createL test4_export1_exportValue_list

let test4_export1_len:size_nat = 32
// generated: "436f6e746578742d32"
inline_for_extraction
let size_test4_export2_exportContext: size_nat = 9
let test4_export2_exportContext_list : l:list uint8{List.Tot.length l == size_test4_export2_exportContext} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x6e; u8 0x74; u8 0x65;
    u8 0x78; u8 0x74; u8 0x2d; u8 0x32;
  ] in
  assert_norm(List.Tot.length l == size_test4_export2_exportContext);
  l
let test4_export2_exportContext : lbytes size_test4_export2_exportContext = createL test4_export2_exportContext_list

// generated: "029494591a73512383b4620df995702806b1bcbf56f9ed7d23bd304e060d1f55"
inline_for_extraction
let size_test4_export2_exportValue: size_nat = 32
let test4_export2_exportValue_list : l:list uint8{List.Tot.length l == size_test4_export2_exportValue} =
  [@inline_let]
  let l = [
    u8 0x02; u8 0x94; u8 0x94; u8 0x59; u8 0x1a;
    u8 0x73; u8 0x51; u8 0x23; u8 0x83; u8 0xb4;
    u8 0x62; u8 0x0d; u8 0xf9; u8 0x95; u8 0x70;
    u8 0x28; u8 0x06; u8 0xb1; u8 0xbc; u8 0xbf;
    u8 0x56; u8 0xf9; u8 0xed; u8 0x7d; u8 0x23;
    u8 0xbd; u8 0x30; u8 0x4e; u8 0x06; u8 0x0d;
    u8 0x1f; u8 0x55;
  ] in
  assert_norm(List.Tot.length l == size_test4_export2_exportValue);
  l
let test4_export2_exportValue : lbytes size_test4_export2_exportValue = createL test4_export2_exportValue_list

let test4_export2_len:size_nat = 32
// generated: "436f6e746578742d33"
inline_for_extraction
let size_test4_export3_exportContext: size_nat = 9
let test4_export3_exportContext_list : l:list uint8{List.Tot.length l == size_test4_export3_exportContext} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x6e; u8 0x74; u8 0x65;
    u8 0x78; u8 0x74; u8 0x2d; u8 0x33;
  ] in
  assert_norm(List.Tot.length l == size_test4_export3_exportContext);
  l
let test4_export3_exportContext : lbytes size_test4_export3_exportContext = createL test4_export3_exportContext_list

// generated: "cc7c78158eb71ba85b6aa601a61ceb8ccefa783ecb384cc2ddaa0671ff1fbd74"
inline_for_extraction
let size_test4_export3_exportValue: size_nat = 32
let test4_export3_exportValue_list : l:list uint8{List.Tot.length l == size_test4_export3_exportValue} =
  [@inline_let]
  let l = [
    u8 0xcc; u8 0x7c; u8 0x78; u8 0x15; u8 0x8e;
    u8 0xb7; u8 0x1b; u8 0xa8; u8 0x5b; u8 0x6a;
    u8 0xa6; u8 0x01; u8 0xa6; u8 0x1c; u8 0xeb;
    u8 0x8c; u8 0xce; u8 0xfa; u8 0x78; u8 0x3e;
    u8 0xcb; u8 0x38; u8 0x4c; u8 0xc2; u8 0xdd;
    u8 0xaa; u8 0x06; u8 0x71; u8 0xff; u8 0x1f;
    u8 0xbd; u8 0x74;
  ] in
  assert_norm(List.Tot.length l == size_test4_export3_exportValue);
  l
let test4_export3_exportValue : lbytes size_test4_export3_exportValue = createL test4_export3_exportValue_list

let test4_export3_len:size_nat = 32
// generated: "436f6e746578742d34"
inline_for_extraction
let size_test4_export4_exportContext: size_nat = 9
let test4_export4_exportContext_list : l:list uint8{List.Tot.length l == size_test4_export4_exportContext} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x6e; u8 0x74; u8 0x65;
    u8 0x78; u8 0x74; u8 0x2d; u8 0x34;
  ] in
  assert_norm(List.Tot.length l == size_test4_export4_exportContext);
  l
let test4_export4_exportContext : lbytes size_test4_export4_exportContext = createL test4_export4_exportContext_list

// generated: "9e4666c9fc8bfc290f14cdd3f498e291a4858b9a71cc181aac9858c33e3eec88"
inline_for_extraction
let size_test4_export4_exportValue: size_nat = 32
let test4_export4_exportValue_list : l:list uint8{List.Tot.length l == size_test4_export4_exportValue} =
  [@inline_let]
  let l = [
    u8 0x9e; u8 0x46; u8 0x66; u8 0xc9; u8 0xfc;
    u8 0x8b; u8 0xfc; u8 0x29; u8 0x0f; u8 0x14;
    u8 0xcd; u8 0xd3; u8 0xf4; u8 0x98; u8 0xe2;
    u8 0x91; u8 0xa4; u8 0x85; u8 0x8b; u8 0x9a;
    u8 0x71; u8 0xcc; u8 0x18; u8 0x1a; u8 0xac;
    u8 0x98; u8 0x58; u8 0xc3; u8 0x3e; u8 0x3e;
    u8 0xec; u8 0x88;
  ] in
  assert_norm(List.Tot.length l == size_test4_export4_exportValue);
  l
let test4_export4_exportValue : lbytes size_test4_export4_exportValue = createL test4_export4_exportValue_list

let test4_export4_len:size_nat = 32

let test4 () =
  let res = test_setupBase test4_ciphersuite test4_skEm test4_pkEm test4_skRm test4_pkRm test4_info test4_enc test4_zz test4_key_schedule_context test4_secret test4_key test4_nonce test4_exporterSecret test4_encryption0_nonce test4_encryption1_nonce in
  let seq0:HPKE.seq_aead_s test4_ciphersuite = 0 in
  let enc_res0 = test_encryption test4_ciphersuite test4_key test4_nonce test4_exporterSecret test4_encryption0_aad test4_encryption0_plaintext seq0 test4_encryption0_ciphertext test4_encryption0_nonce in

  assert_norm (1 < pow2 (8 * 12));
  let seq1:HPKE.seq_aead_s test4_ciphersuite = (seq0 + 1) in
  let enc_res1 = test_encryption test4_ciphersuite test4_key test4_nonce test4_exporterSecret test4_encryption1_aad test4_encryption1_plaintext seq1 test4_encryption1_ciphertext test4_encryption1_nonce in

  assert_norm (2 < pow2 (8 * 12));
  let seq2:HPKE.seq_aead_s test4_ciphersuite = (seq1 + 1) in
  let enc_res2 = test_encryption test4_ciphersuite test4_key test4_nonce test4_exporterSecret test4_encryption2_aad test4_encryption2_plaintext 2 test4_encryption2_ciphertext test4_encryption2_nonce in

  assert_norm (3 < pow2 (8 * 12));
  let seq3:HPKE.seq_aead_s test4_ciphersuite = (seq2 + 1) in
  let enc_res3 = test_encryption test4_ciphersuite test4_key test4_nonce test4_exporterSecret test4_encryption3_aad test4_encryption3_plaintext 3 test4_encryption3_ciphertext test4_encryption3_nonce in

  assert_norm (4 < pow2 (8 * 12));
  let seq4:HPKE.seq_aead_s test4_ciphersuite = (seq3 + 1) in
  let enc_res4 = test_encryption test4_ciphersuite test4_key test4_nonce test4_exporterSecret test4_encryption4_aad test4_encryption4_plaintext 4 test4_encryption4_ciphertext test4_encryption4_nonce in

  assert_norm (5 < pow2 (8 * 12));
  let seq5:HPKE.seq_aead_s test4_ciphersuite = (seq4 + 1) in
  let enc_res5 = test_encryption test4_ciphersuite test4_key test4_nonce test4_exporterSecret test4_encryption5_aad test4_encryption5_plaintext 5 test4_encryption5_ciphertext test4_encryption5_nonce in

  assert_norm (6 < pow2 (8 * 12));
  let seq6:HPKE.seq_aead_s test4_ciphersuite = (seq5 + 1) in
  let enc_res6 = test_encryption test4_ciphersuite test4_key test4_nonce test4_exporterSecret test4_encryption6_aad test4_encryption6_plaintext 6 test4_encryption6_ciphertext test4_encryption6_nonce in

  assert_norm (7 < pow2 (8 * 12));
  let seq7:HPKE.seq_aead_s test4_ciphersuite = (seq6 + 1) in
  let enc_res7 = test_encryption test4_ciphersuite test4_key test4_nonce test4_exporterSecret test4_encryption7_aad test4_encryption7_plaintext 7 test4_encryption7_ciphertext test4_encryption7_nonce in

  assert_norm (8 < pow2 (8 * 12));
  let seq8:HPKE.seq_aead_s test4_ciphersuite = (seq7 + 1) in
  let enc_res8 = test_encryption test4_ciphersuite test4_key test4_nonce test4_exporterSecret test4_encryption8_aad test4_encryption8_plaintext 8 test4_encryption8_ciphertext test4_encryption8_nonce in

  assert_norm (9 < pow2 (8 * 12));
  let seq9:HPKE.seq_aead_s test4_ciphersuite = (seq8 + 1) in
  let enc_res9 = test_encryption test4_ciphersuite test4_key test4_nonce test4_exporterSecret test4_encryption9_aad test4_encryption9_plaintext 9 test4_encryption9_ciphertext test4_encryption9_nonce in

  let exp_res0 = test_export test4_ciphersuite test4_key test4_nonce test4_exporterSecret test4_export0_exportContext test4_export0_len test4_export0_exportValue in

  let exp_res1 = test_export test4_ciphersuite test4_key test4_nonce test4_exporterSecret test4_export1_exportContext test4_export1_len test4_export1_exportValue in

  let exp_res2 = test_export test4_ciphersuite test4_key test4_nonce test4_exporterSecret test4_export2_exportContext test4_export2_len test4_export2_exportValue in

  let exp_res3 = test_export test4_ciphersuite test4_key test4_nonce test4_exporterSecret test4_export3_exportContext test4_export3_len test4_export3_exportValue in

  let exp_res4 = test_export test4_ciphersuite test4_key test4_nonce test4_exporterSecret test4_export4_exportContext test4_export4_len test4_export4_exportValue in

  enc_res0 && enc_res1 && enc_res2 && enc_res3 && enc_res4 && enc_res5 && enc_res6 && enc_res7 && enc_res8 && enc_res9 && res && exp_res0 && exp_res1 && exp_res2 && exp_res3 && exp_res4


// Skipped unsupported test case 5

// Skipped unsupported test case 6

// Skipped unsupported test case 7

let test8_mode: HPKE.mode = HPKE.Base
let test8_ciphersuite = DH.DH_Curve25519, Hash.SHA2_256, AEAD.CHACHA20_POLY1305, Hash.SHA2_256

// generated: "4f6465206f6e2061204772656369616e2055726e"
inline_for_extraction
let size_test8_info: size_nat = 20
let test8_info_list : l:list uint8{List.Tot.length l == size_test8_info} =
  [@inline_let]
  let l = [
    u8 0x4f; u8 0x64; u8 0x65; u8 0x20; u8 0x6f;
    u8 0x6e; u8 0x20; u8 0x61; u8 0x20; u8 0x47;
    u8 0x72; u8 0x65; u8 0x63; u8 0x69; u8 0x61;
    u8 0x6e; u8 0x20; u8 0x55; u8 0x72; u8 0x6e;
  ] in
  assert_norm(List.Tot.length l == size_test8_info);
  l
let test8_info : lbytes size_test8_info = createL test8_info_list

// generated: "c474c6aab06e9d8d16912593f425dac89b3dd2d788d6b08631538591b70d9395"
inline_for_extraction
let size_test8_skRm: size_nat = 32
let test8_skRm_list : l:list uint8{List.Tot.length l == size_test8_skRm} =
  [@inline_let]
  let l = [
    u8 0xc4; u8 0x74; u8 0xc6; u8 0xaa; u8 0xb0;
    u8 0x6e; u8 0x9d; u8 0x8d; u8 0x16; u8 0x91;
    u8 0x25; u8 0x93; u8 0xf4; u8 0x25; u8 0xda;
    u8 0xc8; u8 0x9b; u8 0x3d; u8 0xd2; u8 0xd7;
    u8 0x88; u8 0xd6; u8 0xb0; u8 0x86; u8 0x31;
    u8 0x53; u8 0x85; u8 0x91; u8 0xb7; u8 0x0d;
    u8 0x93; u8 0x95;
  ] in
  assert_norm(List.Tot.length l == size_test8_skRm);
  l
let test8_skRm : lbytes size_test8_skRm = createL test8_skRm_list

// generated: "55672de8afcc00aa3397b066123c0309e1c377bcdd0eca38838e330aa92e382c"
inline_for_extraction
let size_test8_skEm: size_nat = 32
let test8_skEm_list : l:list uint8{List.Tot.length l == size_test8_skEm} =
  [@inline_let]
  let l = [
    u8 0x55; u8 0x67; u8 0x2d; u8 0xe8; u8 0xaf;
    u8 0xcc; u8 0x00; u8 0xaa; u8 0x33; u8 0x97;
    u8 0xb0; u8 0x66; u8 0x12; u8 0x3c; u8 0x03;
    u8 0x09; u8 0xe1; u8 0xc3; u8 0x77; u8 0xbc;
    u8 0xdd; u8 0x0e; u8 0xca; u8 0x38; u8 0x83;
    u8 0x8e; u8 0x33; u8 0x0a; u8 0xa9; u8 0x2e;
    u8 0x38; u8 0x2c;
  ] in
  assert_norm(List.Tot.length l == size_test8_skEm);
  l
let test8_skEm : lbytes size_test8_skEm = createL test8_skEm_list

// generated: "aff5d865a24e14cce0fd0a2212571b733027611418ca2ac6aff949e5f0c83e76"
inline_for_extraction
let size_test8_pkRm: size_nat = 32
let test8_pkRm_list : l:list uint8{List.Tot.length l == size_test8_pkRm} =
  [@inline_let]
  let l = [
    u8 0xaf; u8 0xf5; u8 0xd8; u8 0x65; u8 0xa2;
    u8 0x4e; u8 0x14; u8 0xcc; u8 0xe0; u8 0xfd;
    u8 0x0a; u8 0x22; u8 0x12; u8 0x57; u8 0x1b;
    u8 0x73; u8 0x30; u8 0x27; u8 0x61; u8 0x14;
    u8 0x18; u8 0xca; u8 0x2a; u8 0xc6; u8 0xaf;
    u8 0xf9; u8 0x49; u8 0xe5; u8 0xf0; u8 0xc8;
    u8 0x3e; u8 0x76;
  ] in
  assert_norm(List.Tot.length l == size_test8_pkRm);
  l
let test8_pkRm : lbytes size_test8_pkRm = createL test8_pkRm_list

// generated: "7e0a04d4be6c6a2936028337ebb6afad24f79cc23b105958ec9a7086826fe81d"
inline_for_extraction
let size_test8_pkEm: size_nat = 32
let test8_pkEm_list : l:list uint8{List.Tot.length l == size_test8_pkEm} =
  [@inline_let]
  let l = [
    u8 0x7e; u8 0x0a; u8 0x04; u8 0xd4; u8 0xbe;
    u8 0x6c; u8 0x6a; u8 0x29; u8 0x36; u8 0x02;
    u8 0x83; u8 0x37; u8 0xeb; u8 0xb6; u8 0xaf;
    u8 0xad; u8 0x24; u8 0xf7; u8 0x9c; u8 0xc2;
    u8 0x3b; u8 0x10; u8 0x59; u8 0x58; u8 0xec;
    u8 0x9a; u8 0x70; u8 0x86; u8 0x82; u8 0x6f;
    u8 0xe8; u8 0x1d;
  ] in
  assert_norm(List.Tot.length l == size_test8_pkEm);
  l
let test8_pkEm : lbytes size_test8_pkEm = createL test8_pkEm_list

// generated: "7e0a04d4be6c6a2936028337ebb6afad24f79cc23b105958ec9a7086826fe81d"
inline_for_extraction
let size_test8_enc: size_nat = 32
let test8_enc_list : l:list uint8{List.Tot.length l == size_test8_enc} =
  [@inline_let]
  let l = [
    u8 0x7e; u8 0x0a; u8 0x04; u8 0xd4; u8 0xbe;
    u8 0x6c; u8 0x6a; u8 0x29; u8 0x36; u8 0x02;
    u8 0x83; u8 0x37; u8 0xeb; u8 0xb6; u8 0xaf;
    u8 0xad; u8 0x24; u8 0xf7; u8 0x9c; u8 0xc2;
    u8 0x3b; u8 0x10; u8 0x59; u8 0x58; u8 0xec;
    u8 0x9a; u8 0x70; u8 0x86; u8 0x82; u8 0x6f;
    u8 0xe8; u8 0x1d;
  ] in
  assert_norm(List.Tot.length l == size_test8_enc);
  l
let test8_enc : lbytes size_test8_enc = createL test8_enc_list

// generated: "a28dba903fe26d4de1d9760a7560e1f360510be316055645ee75149363fcc9a2"
inline_for_extraction
let size_test8_zz: size_nat = 32
let test8_zz_list : l:list uint8{List.Tot.length l == size_test8_zz} =
  [@inline_let]
  let l = [
    u8 0xa2; u8 0x8d; u8 0xba; u8 0x90; u8 0x3f;
    u8 0xe2; u8 0x6d; u8 0x4d; u8 0xe1; u8 0xd9;
    u8 0x76; u8 0x0a; u8 0x75; u8 0x60; u8 0xe1;
    u8 0xf3; u8 0x60; u8 0x51; u8 0x0b; u8 0xe3;
    u8 0x16; u8 0x05; u8 0x56; u8 0x45; u8 0xee;
    u8 0x75; u8 0x14; u8 0x93; u8 0x63; u8 0xfc;
    u8 0xc9; u8 0xa2;
  ] in
  assert_norm(List.Tot.length l == size_test8_zz);
  l
let test8_zz : lbytes size_test8_zz = createL test8_zz_list

// generated: "002000010003005d0f5548cb13d7eba5320ae0e21b1ee274aac7ea1cce02570cf993d1b2456449debcca602075cf6f8ef506613a82e1c73727e2c912d0c49f16cd56fc524af4ce"
inline_for_extraction
let size_test8_key_schedule_context: size_nat = 71
let test8_key_schedule_context_list : l:list uint8{List.Tot.length l == size_test8_key_schedule_context} =
  [@inline_let]
  let l = [
    u8 0x00; u8 0x20; u8 0x00; u8 0x01; u8 0x00;
    u8 0x03; u8 0x00; u8 0x5d; u8 0x0f; u8 0x55;
    u8 0x48; u8 0xcb; u8 0x13; u8 0xd7; u8 0xeb;
    u8 0xa5; u8 0x32; u8 0x0a; u8 0xe0; u8 0xe2;
    u8 0x1b; u8 0x1e; u8 0xe2; u8 0x74; u8 0xaa;
    u8 0xc7; u8 0xea; u8 0x1c; u8 0xce; u8 0x02;
    u8 0x57; u8 0x0c; u8 0xf9; u8 0x93; u8 0xd1;
    u8 0xb2; u8 0x45; u8 0x64; u8 0x49; u8 0xde;
    u8 0xbc; u8 0xca; u8 0x60; u8 0x20; u8 0x75;
    u8 0xcf; u8 0x6f; u8 0x8e; u8 0xf5; u8 0x06;
    u8 0x61; u8 0x3a; u8 0x82; u8 0xe1; u8 0xc7;
    u8 0x37; u8 0x27; u8 0xe2; u8 0xc9; u8 0x12;
    u8 0xd0; u8 0xc4; u8 0x9f; u8 0x16; u8 0xcd;
    u8 0x56; u8 0xfc; u8 0x52; u8 0x4a; u8 0xf4;
    u8 0xce;
  ] in
  assert_norm(List.Tot.length l == size_test8_key_schedule_context);
  l
let test8_key_schedule_context : lbytes size_test8_key_schedule_context = createL test8_key_schedule_context_list

// generated: "1d89e0b49da2ca20a186b99ef5bfd41ceefa0a38652a0907b811d4493ee97ac6"
inline_for_extraction
let size_test8_secret: size_nat = 32
let test8_secret_list : l:list uint8{List.Tot.length l == size_test8_secret} =
  [@inline_let]
  let l = [
    u8 0x1d; u8 0x89; u8 0xe0; u8 0xb4; u8 0x9d;
    u8 0xa2; u8 0xca; u8 0x20; u8 0xa1; u8 0x86;
    u8 0xb9; u8 0x9e; u8 0xf5; u8 0xbf; u8 0xd4;
    u8 0x1c; u8 0xee; u8 0xfa; u8 0x0a; u8 0x38;
    u8 0x65; u8 0x2a; u8 0x09; u8 0x07; u8 0xb8;
    u8 0x11; u8 0xd4; u8 0x49; u8 0x3e; u8 0xe9;
    u8 0x7a; u8 0xc6;
  ] in
  assert_norm(List.Tot.length l == size_test8_secret);
  l
let test8_secret : lbytes size_test8_secret = createL test8_secret_list

// generated: "2e380e1200934ddfebf42017f731365e7bee44f3b19d5884eda302cc3d2f345c"
inline_for_extraction
let size_test8_key: size_nat = 32
let test8_key_list : l:list uint8{List.Tot.length l == size_test8_key} =
  [@inline_let]
  let l = [
    u8 0x2e; u8 0x38; u8 0x0e; u8 0x12; u8 0x00;
    u8 0x93; u8 0x4d; u8 0xdf; u8 0xeb; u8 0xf4;
    u8 0x20; u8 0x17; u8 0xf7; u8 0x31; u8 0x36;
    u8 0x5e; u8 0x7b; u8 0xee; u8 0x44; u8 0xf3;
    u8 0xb1; u8 0x9d; u8 0x58; u8 0x84; u8 0xed;
    u8 0xa3; u8 0x02; u8 0xcc; u8 0x3d; u8 0x2f;
    u8 0x34; u8 0x5c;
  ] in
  assert_norm(List.Tot.length l == size_test8_key);
  l
let test8_key : lbytes size_test8_key = createL test8_key_list

// generated: "372867254b4044c7be47f312"
inline_for_extraction
let size_test8_nonce: size_nat = 12
let test8_nonce_list : l:list uint8{List.Tot.length l == size_test8_nonce} =
  [@inline_let]
  let l = [
    u8 0x37; u8 0x28; u8 0x67; u8 0x25; u8 0x4b;
    u8 0x40; u8 0x44; u8 0xc7; u8 0xbe; u8 0x47;
    u8 0xf3; u8 0x12;
  ] in
  assert_norm(List.Tot.length l == size_test8_nonce);
  l
let test8_nonce : lbytes size_test8_nonce = createL test8_nonce_list

// generated: "1f519097b50549e455ea9396dc03098253d1a8c0e6ec8805b417f525382eb6ef"
inline_for_extraction
let size_test8_exporterSecret: size_nat = 32
let test8_exporterSecret_list : l:list uint8{List.Tot.length l == size_test8_exporterSecret} =
  [@inline_let]
  let l = [
    u8 0x1f; u8 0x51; u8 0x90; u8 0x97; u8 0xb5;
    u8 0x05; u8 0x49; u8 0xe4; u8 0x55; u8 0xea;
    u8 0x93; u8 0x96; u8 0xdc; u8 0x03; u8 0x09;
    u8 0x82; u8 0x53; u8 0xd1; u8 0xa8; u8 0xc0;
    u8 0xe6; u8 0xec; u8 0x88; u8 0x05; u8 0xb4;
    u8 0x17; u8 0xf5; u8 0x25; u8 0x38; u8 0x2e;
    u8 0xb6; u8 0xef;
  ] in
  assert_norm(List.Tot.length l == size_test8_exporterSecret);
  l
let test8_exporterSecret : lbytes size_test8_exporterSecret = createL test8_exporterSecret_list

// generated: "436f756e742d30"
inline_for_extraction
let size_test8_encryption0_aad: size_nat = 7
let test8_encryption0_aad_list : l:list uint8{List.Tot.length l == size_test8_encryption0_aad} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x75; u8 0x6e; u8 0x74;
    u8 0x2d; u8 0x30;
  ] in
  assert_norm(List.Tot.length l == size_test8_encryption0_aad);
  l
let test8_encryption0_aad : lbytes size_test8_encryption0_aad = createL test8_encryption0_aad_list

// generated: "f2d59922668b324a878c55391e7932c9b6f3efab5006a0d70f05ba467103ce757a087f4f75bad47ea3715f07a6"
inline_for_extraction
let size_test8_encryption0_ciphertext: size_nat = 45
let test8_encryption0_ciphertext_list : l:list uint8{List.Tot.length l == size_test8_encryption0_ciphertext} =
  [@inline_let]
  let l = [
    u8 0xf2; u8 0xd5; u8 0x99; u8 0x22; u8 0x66;
    u8 0x8b; u8 0x32; u8 0x4a; u8 0x87; u8 0x8c;
    u8 0x55; u8 0x39; u8 0x1e; u8 0x79; u8 0x32;
    u8 0xc9; u8 0xb6; u8 0xf3; u8 0xef; u8 0xab;
    u8 0x50; u8 0x06; u8 0xa0; u8 0xd7; u8 0x0f;
    u8 0x05; u8 0xba; u8 0x46; u8 0x71; u8 0x03;
    u8 0xce; u8 0x75; u8 0x7a; u8 0x08; u8 0x7f;
    u8 0x4f; u8 0x75; u8 0xba; u8 0xd4; u8 0x7e;
    u8 0xa3; u8 0x71; u8 0x5f; u8 0x07; u8 0xa6;
  ] in
  assert_norm(List.Tot.length l == size_test8_encryption0_ciphertext);
  l
let test8_encryption0_ciphertext : lbytes size_test8_encryption0_ciphertext = createL test8_encryption0_ciphertext_list

// generated: "372867254b4044c7be47f312"
inline_for_extraction
let size_test8_encryption0_nonce: size_nat = 12
let test8_encryption0_nonce_list : l:list uint8{List.Tot.length l == size_test8_encryption0_nonce} =
  [@inline_let]
  let l = [
    u8 0x37; u8 0x28; u8 0x67; u8 0x25; u8 0x4b;
    u8 0x40; u8 0x44; u8 0xc7; u8 0xbe; u8 0x47;
    u8 0xf3; u8 0x12;
  ] in
  assert_norm(List.Tot.length l == size_test8_encryption0_nonce);
  l
let test8_encryption0_nonce : lbytes size_test8_encryption0_nonce = createL test8_encryption0_nonce_list

// generated: "4265617574792069732074727574682c20747275746820626561757479"
inline_for_extraction
let size_test8_encryption0_plaintext: size_nat = 29
let test8_encryption0_plaintext_list : l:list uint8{List.Tot.length l == size_test8_encryption0_plaintext} =
  [@inline_let]
  let l = [
    u8 0x42; u8 0x65; u8 0x61; u8 0x75; u8 0x74;
    u8 0x79; u8 0x20; u8 0x69; u8 0x73; u8 0x20;
    u8 0x74; u8 0x72; u8 0x75; u8 0x74; u8 0x68;
    u8 0x2c; u8 0x20; u8 0x74; u8 0x72; u8 0x75;
    u8 0x74; u8 0x68; u8 0x20; u8 0x62; u8 0x65;
    u8 0x61; u8 0x75; u8 0x74; u8 0x79;
  ] in
  assert_norm(List.Tot.length l == size_test8_encryption0_plaintext);
  l
let test8_encryption0_plaintext : lbytes size_test8_encryption0_plaintext = createL test8_encryption0_plaintext_list

// generated: "436f756e742d31"
inline_for_extraction
let size_test8_encryption1_aad: size_nat = 7
let test8_encryption1_aad_list : l:list uint8{List.Tot.length l == size_test8_encryption1_aad} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x75; u8 0x6e; u8 0x74;
    u8 0x2d; u8 0x31;
  ] in
  assert_norm(List.Tot.length l == size_test8_encryption1_aad);
  l
let test8_encryption1_aad : lbytes size_test8_encryption1_aad = createL test8_encryption1_aad_list

// generated: "7bae3c35ae5229184a86c67fe08ba29ba01bdf7268b3a134721076e8efbe15f8849b6b81d419edd4dc6b760ad2"
inline_for_extraction
let size_test8_encryption1_ciphertext: size_nat = 45
let test8_encryption1_ciphertext_list : l:list uint8{List.Tot.length l == size_test8_encryption1_ciphertext} =
  [@inline_let]
  let l = [
    u8 0x7b; u8 0xae; u8 0x3c; u8 0x35; u8 0xae;
    u8 0x52; u8 0x29; u8 0x18; u8 0x4a; u8 0x86;
    u8 0xc6; u8 0x7f; u8 0xe0; u8 0x8b; u8 0xa2;
    u8 0x9b; u8 0xa0; u8 0x1b; u8 0xdf; u8 0x72;
    u8 0x68; u8 0xb3; u8 0xa1; u8 0x34; u8 0x72;
    u8 0x10; u8 0x76; u8 0xe8; u8 0xef; u8 0xbe;
    u8 0x15; u8 0xf8; u8 0x84; u8 0x9b; u8 0x6b;
    u8 0x81; u8 0xd4; u8 0x19; u8 0xed; u8 0xd4;
    u8 0xdc; u8 0x6b; u8 0x76; u8 0x0a; u8 0xd2;
  ] in
  assert_norm(List.Tot.length l == size_test8_encryption1_ciphertext);
  l
let test8_encryption1_ciphertext : lbytes size_test8_encryption1_ciphertext = createL test8_encryption1_ciphertext_list

// generated: "372867254b4044c7be47f313"
inline_for_extraction
let size_test8_encryption1_nonce: size_nat = 12
let test8_encryption1_nonce_list : l:list uint8{List.Tot.length l == size_test8_encryption1_nonce} =
  [@inline_let]
  let l = [
    u8 0x37; u8 0x28; u8 0x67; u8 0x25; u8 0x4b;
    u8 0x40; u8 0x44; u8 0xc7; u8 0xbe; u8 0x47;
    u8 0xf3; u8 0x13;
  ] in
  assert_norm(List.Tot.length l == size_test8_encryption1_nonce);
  l
let test8_encryption1_nonce : lbytes size_test8_encryption1_nonce = createL test8_encryption1_nonce_list

// generated: "4265617574792069732074727574682c20747275746820626561757479"
inline_for_extraction
let size_test8_encryption1_plaintext: size_nat = 29
let test8_encryption1_plaintext_list : l:list uint8{List.Tot.length l == size_test8_encryption1_plaintext} =
  [@inline_let]
  let l = [
    u8 0x42; u8 0x65; u8 0x61; u8 0x75; u8 0x74;
    u8 0x79; u8 0x20; u8 0x69; u8 0x73; u8 0x20;
    u8 0x74; u8 0x72; u8 0x75; u8 0x74; u8 0x68;
    u8 0x2c; u8 0x20; u8 0x74; u8 0x72; u8 0x75;
    u8 0x74; u8 0x68; u8 0x20; u8 0x62; u8 0x65;
    u8 0x61; u8 0x75; u8 0x74; u8 0x79;
  ] in
  assert_norm(List.Tot.length l == size_test8_encryption1_plaintext);
  l
let test8_encryption1_plaintext : lbytes size_test8_encryption1_plaintext = createL test8_encryption1_plaintext_list

// generated: "436f756e742d32"
inline_for_extraction
let size_test8_encryption2_aad: size_nat = 7
let test8_encryption2_aad_list : l:list uint8{List.Tot.length l == size_test8_encryption2_aad} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x75; u8 0x6e; u8 0x74;
    u8 0x2d; u8 0x32;
  ] in
  assert_norm(List.Tot.length l == size_test8_encryption2_aad);
  l
let test8_encryption2_aad : lbytes size_test8_encryption2_aad = createL test8_encryption2_aad_list

// generated: "7d6359f73ef1c74ed6c1b6508305658a67051be22a26b3e09bcb301e5e7e8ecbb4cc0fd72286b344937945824d"
inline_for_extraction
let size_test8_encryption2_ciphertext: size_nat = 45
let test8_encryption2_ciphertext_list : l:list uint8{List.Tot.length l == size_test8_encryption2_ciphertext} =
  [@inline_let]
  let l = [
    u8 0x7d; u8 0x63; u8 0x59; u8 0xf7; u8 0x3e;
    u8 0xf1; u8 0xc7; u8 0x4e; u8 0xd6; u8 0xc1;
    u8 0xb6; u8 0x50; u8 0x83; u8 0x05; u8 0x65;
    u8 0x8a; u8 0x67; u8 0x05; u8 0x1b; u8 0xe2;
    u8 0x2a; u8 0x26; u8 0xb3; u8 0xe0; u8 0x9b;
    u8 0xcb; u8 0x30; u8 0x1e; u8 0x5e; u8 0x7e;
    u8 0x8e; u8 0xcb; u8 0xb4; u8 0xcc; u8 0x0f;
    u8 0xd7; u8 0x22; u8 0x86; u8 0xb3; u8 0x44;
    u8 0x93; u8 0x79; u8 0x45; u8 0x82; u8 0x4d;
  ] in
  assert_norm(List.Tot.length l == size_test8_encryption2_ciphertext);
  l
let test8_encryption2_ciphertext : lbytes size_test8_encryption2_ciphertext = createL test8_encryption2_ciphertext_list

// generated: "372867254b4044c7be47f310"
inline_for_extraction
let size_test8_encryption2_nonce: size_nat = 12
let test8_encryption2_nonce_list : l:list uint8{List.Tot.length l == size_test8_encryption2_nonce} =
  [@inline_let]
  let l = [
    u8 0x37; u8 0x28; u8 0x67; u8 0x25; u8 0x4b;
    u8 0x40; u8 0x44; u8 0xc7; u8 0xbe; u8 0x47;
    u8 0xf3; u8 0x10;
  ] in
  assert_norm(List.Tot.length l == size_test8_encryption2_nonce);
  l
let test8_encryption2_nonce : lbytes size_test8_encryption2_nonce = createL test8_encryption2_nonce_list

// generated: "4265617574792069732074727574682c20747275746820626561757479"
inline_for_extraction
let size_test8_encryption2_plaintext: size_nat = 29
let test8_encryption2_plaintext_list : l:list uint8{List.Tot.length l == size_test8_encryption2_plaintext} =
  [@inline_let]
  let l = [
    u8 0x42; u8 0x65; u8 0x61; u8 0x75; u8 0x74;
    u8 0x79; u8 0x20; u8 0x69; u8 0x73; u8 0x20;
    u8 0x74; u8 0x72; u8 0x75; u8 0x74; u8 0x68;
    u8 0x2c; u8 0x20; u8 0x74; u8 0x72; u8 0x75;
    u8 0x74; u8 0x68; u8 0x20; u8 0x62; u8 0x65;
    u8 0x61; u8 0x75; u8 0x74; u8 0x79;
  ] in
  assert_norm(List.Tot.length l == size_test8_encryption2_plaintext);
  l
let test8_encryption2_plaintext : lbytes size_test8_encryption2_plaintext = createL test8_encryption2_plaintext_list

// generated: "436f756e742d33"
inline_for_extraction
let size_test8_encryption3_aad: size_nat = 7
let test8_encryption3_aad_list : l:list uint8{List.Tot.length l == size_test8_encryption3_aad} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x75; u8 0x6e; u8 0x74;
    u8 0x2d; u8 0x33;
  ] in
  assert_norm(List.Tot.length l == size_test8_encryption3_aad);
  l
let test8_encryption3_aad : lbytes size_test8_encryption3_aad = createL test8_encryption3_aad_list

// generated: "20d535faf0720a87879e25954ac1d8c15ec64ca63201ed8e52141a0a0a3d8846fb32888ee3a490fb98741443db"
inline_for_extraction
let size_test8_encryption3_ciphertext: size_nat = 45
let test8_encryption3_ciphertext_list : l:list uint8{List.Tot.length l == size_test8_encryption3_ciphertext} =
  [@inline_let]
  let l = [
    u8 0x20; u8 0xd5; u8 0x35; u8 0xfa; u8 0xf0;
    u8 0x72; u8 0x0a; u8 0x87; u8 0x87; u8 0x9e;
    u8 0x25; u8 0x95; u8 0x4a; u8 0xc1; u8 0xd8;
    u8 0xc1; u8 0x5e; u8 0xc6; u8 0x4c; u8 0xa6;
    u8 0x32; u8 0x01; u8 0xed; u8 0x8e; u8 0x52;
    u8 0x14; u8 0x1a; u8 0x0a; u8 0x0a; u8 0x3d;
    u8 0x88; u8 0x46; u8 0xfb; u8 0x32; u8 0x88;
    u8 0x8e; u8 0xe3; u8 0xa4; u8 0x90; u8 0xfb;
    u8 0x98; u8 0x74; u8 0x14; u8 0x43; u8 0xdb;
  ] in
  assert_norm(List.Tot.length l == size_test8_encryption3_ciphertext);
  l
let test8_encryption3_ciphertext : lbytes size_test8_encryption3_ciphertext = createL test8_encryption3_ciphertext_list

// generated: "372867254b4044c7be47f311"
inline_for_extraction
let size_test8_encryption3_nonce: size_nat = 12
let test8_encryption3_nonce_list : l:list uint8{List.Tot.length l == size_test8_encryption3_nonce} =
  [@inline_let]
  let l = [
    u8 0x37; u8 0x28; u8 0x67; u8 0x25; u8 0x4b;
    u8 0x40; u8 0x44; u8 0xc7; u8 0xbe; u8 0x47;
    u8 0xf3; u8 0x11;
  ] in
  assert_norm(List.Tot.length l == size_test8_encryption3_nonce);
  l
let test8_encryption3_nonce : lbytes size_test8_encryption3_nonce = createL test8_encryption3_nonce_list

// generated: "4265617574792069732074727574682c20747275746820626561757479"
inline_for_extraction
let size_test8_encryption3_plaintext: size_nat = 29
let test8_encryption3_plaintext_list : l:list uint8{List.Tot.length l == size_test8_encryption3_plaintext} =
  [@inline_let]
  let l = [
    u8 0x42; u8 0x65; u8 0x61; u8 0x75; u8 0x74;
    u8 0x79; u8 0x20; u8 0x69; u8 0x73; u8 0x20;
    u8 0x74; u8 0x72; u8 0x75; u8 0x74; u8 0x68;
    u8 0x2c; u8 0x20; u8 0x74; u8 0x72; u8 0x75;
    u8 0x74; u8 0x68; u8 0x20; u8 0x62; u8 0x65;
    u8 0x61; u8 0x75; u8 0x74; u8 0x79;
  ] in
  assert_norm(List.Tot.length l == size_test8_encryption3_plaintext);
  l
let test8_encryption3_plaintext : lbytes size_test8_encryption3_plaintext = createL test8_encryption3_plaintext_list

// generated: "436f756e742d34"
inline_for_extraction
let size_test8_encryption4_aad: size_nat = 7
let test8_encryption4_aad_list : l:list uint8{List.Tot.length l == size_test8_encryption4_aad} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x75; u8 0x6e; u8 0x74;
    u8 0x2d; u8 0x34;
  ] in
  assert_norm(List.Tot.length l == size_test8_encryption4_aad);
  l
let test8_encryption4_aad : lbytes size_test8_encryption4_aad = createL test8_encryption4_aad_list

// generated: "0a5d480660e15025c956d4199646e3e9f57d0b2f5a81fc01830247291a5aa36478c4ac001b52030361175a9475"
inline_for_extraction
let size_test8_encryption4_ciphertext: size_nat = 45
let test8_encryption4_ciphertext_list : l:list uint8{List.Tot.length l == size_test8_encryption4_ciphertext} =
  [@inline_let]
  let l = [
    u8 0x0a; u8 0x5d; u8 0x48; u8 0x06; u8 0x60;
    u8 0xe1; u8 0x50; u8 0x25; u8 0xc9; u8 0x56;
    u8 0xd4; u8 0x19; u8 0x96; u8 0x46; u8 0xe3;
    u8 0xe9; u8 0xf5; u8 0x7d; u8 0x0b; u8 0x2f;
    u8 0x5a; u8 0x81; u8 0xfc; u8 0x01; u8 0x83;
    u8 0x02; u8 0x47; u8 0x29; u8 0x1a; u8 0x5a;
    u8 0xa3; u8 0x64; u8 0x78; u8 0xc4; u8 0xac;
    u8 0x00; u8 0x1b; u8 0x52; u8 0x03; u8 0x03;
    u8 0x61; u8 0x17; u8 0x5a; u8 0x94; u8 0x75;
  ] in
  assert_norm(List.Tot.length l == size_test8_encryption4_ciphertext);
  l
let test8_encryption4_ciphertext : lbytes size_test8_encryption4_ciphertext = createL test8_encryption4_ciphertext_list

// generated: "372867254b4044c7be47f316"
inline_for_extraction
let size_test8_encryption4_nonce: size_nat = 12
let test8_encryption4_nonce_list : l:list uint8{List.Tot.length l == size_test8_encryption4_nonce} =
  [@inline_let]
  let l = [
    u8 0x37; u8 0x28; u8 0x67; u8 0x25; u8 0x4b;
    u8 0x40; u8 0x44; u8 0xc7; u8 0xbe; u8 0x47;
    u8 0xf3; u8 0x16;
  ] in
  assert_norm(List.Tot.length l == size_test8_encryption4_nonce);
  l
let test8_encryption4_nonce : lbytes size_test8_encryption4_nonce = createL test8_encryption4_nonce_list

// generated: "4265617574792069732074727574682c20747275746820626561757479"
inline_for_extraction
let size_test8_encryption4_plaintext: size_nat = 29
let test8_encryption4_plaintext_list : l:list uint8{List.Tot.length l == size_test8_encryption4_plaintext} =
  [@inline_let]
  let l = [
    u8 0x42; u8 0x65; u8 0x61; u8 0x75; u8 0x74;
    u8 0x79; u8 0x20; u8 0x69; u8 0x73; u8 0x20;
    u8 0x74; u8 0x72; u8 0x75; u8 0x74; u8 0x68;
    u8 0x2c; u8 0x20; u8 0x74; u8 0x72; u8 0x75;
    u8 0x74; u8 0x68; u8 0x20; u8 0x62; u8 0x65;
    u8 0x61; u8 0x75; u8 0x74; u8 0x79;
  ] in
  assert_norm(List.Tot.length l == size_test8_encryption4_plaintext);
  l
let test8_encryption4_plaintext : lbytes size_test8_encryption4_plaintext = createL test8_encryption4_plaintext_list

// generated: "436f756e742d35"
inline_for_extraction
let size_test8_encryption5_aad: size_nat = 7
let test8_encryption5_aad_list : l:list uint8{List.Tot.length l == size_test8_encryption5_aad} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x75; u8 0x6e; u8 0x74;
    u8 0x2d; u8 0x35;
  ] in
  assert_norm(List.Tot.length l == size_test8_encryption5_aad);
  l
let test8_encryption5_aad : lbytes size_test8_encryption5_aad = createL test8_encryption5_aad_list

// generated: "c357ea96a6e2f84797ccf2f632b763731bb0c38e75a6f7b63d5789bcd892c6956c2e860c5507071d1a60e2a146"
inline_for_extraction
let size_test8_encryption5_ciphertext: size_nat = 45
let test8_encryption5_ciphertext_list : l:list uint8{List.Tot.length l == size_test8_encryption5_ciphertext} =
  [@inline_let]
  let l = [
    u8 0xc3; u8 0x57; u8 0xea; u8 0x96; u8 0xa6;
    u8 0xe2; u8 0xf8; u8 0x47; u8 0x97; u8 0xcc;
    u8 0xf2; u8 0xf6; u8 0x32; u8 0xb7; u8 0x63;
    u8 0x73; u8 0x1b; u8 0xb0; u8 0xc3; u8 0x8e;
    u8 0x75; u8 0xa6; u8 0xf7; u8 0xb6; u8 0x3d;
    u8 0x57; u8 0x89; u8 0xbc; u8 0xd8; u8 0x92;
    u8 0xc6; u8 0x95; u8 0x6c; u8 0x2e; u8 0x86;
    u8 0x0c; u8 0x55; u8 0x07; u8 0x07; u8 0x1d;
    u8 0x1a; u8 0x60; u8 0xe2; u8 0xa1; u8 0x46;
  ] in
  assert_norm(List.Tot.length l == size_test8_encryption5_ciphertext);
  l
let test8_encryption5_ciphertext : lbytes size_test8_encryption5_ciphertext = createL test8_encryption5_ciphertext_list

// generated: "372867254b4044c7be47f317"
inline_for_extraction
let size_test8_encryption5_nonce: size_nat = 12
let test8_encryption5_nonce_list : l:list uint8{List.Tot.length l == size_test8_encryption5_nonce} =
  [@inline_let]
  let l = [
    u8 0x37; u8 0x28; u8 0x67; u8 0x25; u8 0x4b;
    u8 0x40; u8 0x44; u8 0xc7; u8 0xbe; u8 0x47;
    u8 0xf3; u8 0x17;
  ] in
  assert_norm(List.Tot.length l == size_test8_encryption5_nonce);
  l
let test8_encryption5_nonce : lbytes size_test8_encryption5_nonce = createL test8_encryption5_nonce_list

// generated: "4265617574792069732074727574682c20747275746820626561757479"
inline_for_extraction
let size_test8_encryption5_plaintext: size_nat = 29
let test8_encryption5_plaintext_list : l:list uint8{List.Tot.length l == size_test8_encryption5_plaintext} =
  [@inline_let]
  let l = [
    u8 0x42; u8 0x65; u8 0x61; u8 0x75; u8 0x74;
    u8 0x79; u8 0x20; u8 0x69; u8 0x73; u8 0x20;
    u8 0x74; u8 0x72; u8 0x75; u8 0x74; u8 0x68;
    u8 0x2c; u8 0x20; u8 0x74; u8 0x72; u8 0x75;
    u8 0x74; u8 0x68; u8 0x20; u8 0x62; u8 0x65;
    u8 0x61; u8 0x75; u8 0x74; u8 0x79;
  ] in
  assert_norm(List.Tot.length l == size_test8_encryption5_plaintext);
  l
let test8_encryption5_plaintext : lbytes size_test8_encryption5_plaintext = createL test8_encryption5_plaintext_list

// generated: "436f756e742d36"
inline_for_extraction
let size_test8_encryption6_aad: size_nat = 7
let test8_encryption6_aad_list : l:list uint8{List.Tot.length l == size_test8_encryption6_aad} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x75; u8 0x6e; u8 0x74;
    u8 0x2d; u8 0x36;
  ] in
  assert_norm(List.Tot.length l == size_test8_encryption6_aad);
  l
let test8_encryption6_aad : lbytes size_test8_encryption6_aad = createL test8_encryption6_aad_list

// generated: "20bef05af10313210e0bcf2a442e4920e7df1d2d0018b2dc25ee128b74959927e8dbce400440205f033fd498fe"
inline_for_extraction
let size_test8_encryption6_ciphertext: size_nat = 45
let test8_encryption6_ciphertext_list : l:list uint8{List.Tot.length l == size_test8_encryption6_ciphertext} =
  [@inline_let]
  let l = [
    u8 0x20; u8 0xbe; u8 0xf0; u8 0x5a; u8 0xf1;
    u8 0x03; u8 0x13; u8 0x21; u8 0x0e; u8 0x0b;
    u8 0xcf; u8 0x2a; u8 0x44; u8 0x2e; u8 0x49;
    u8 0x20; u8 0xe7; u8 0xdf; u8 0x1d; u8 0x2d;
    u8 0x00; u8 0x18; u8 0xb2; u8 0xdc; u8 0x25;
    u8 0xee; u8 0x12; u8 0x8b; u8 0x74; u8 0x95;
    u8 0x99; u8 0x27; u8 0xe8; u8 0xdb; u8 0xce;
    u8 0x40; u8 0x04; u8 0x40; u8 0x20; u8 0x5f;
    u8 0x03; u8 0x3f; u8 0xd4; u8 0x98; u8 0xfe;
  ] in
  assert_norm(List.Tot.length l == size_test8_encryption6_ciphertext);
  l
let test8_encryption6_ciphertext : lbytes size_test8_encryption6_ciphertext = createL test8_encryption6_ciphertext_list

// generated: "372867254b4044c7be47f314"
inline_for_extraction
let size_test8_encryption6_nonce: size_nat = 12
let test8_encryption6_nonce_list : l:list uint8{List.Tot.length l == size_test8_encryption6_nonce} =
  [@inline_let]
  let l = [
    u8 0x37; u8 0x28; u8 0x67; u8 0x25; u8 0x4b;
    u8 0x40; u8 0x44; u8 0xc7; u8 0xbe; u8 0x47;
    u8 0xf3; u8 0x14;
  ] in
  assert_norm(List.Tot.length l == size_test8_encryption6_nonce);
  l
let test8_encryption6_nonce : lbytes size_test8_encryption6_nonce = createL test8_encryption6_nonce_list

// generated: "4265617574792069732074727574682c20747275746820626561757479"
inline_for_extraction
let size_test8_encryption6_plaintext: size_nat = 29
let test8_encryption6_plaintext_list : l:list uint8{List.Tot.length l == size_test8_encryption6_plaintext} =
  [@inline_let]
  let l = [
    u8 0x42; u8 0x65; u8 0x61; u8 0x75; u8 0x74;
    u8 0x79; u8 0x20; u8 0x69; u8 0x73; u8 0x20;
    u8 0x74; u8 0x72; u8 0x75; u8 0x74; u8 0x68;
    u8 0x2c; u8 0x20; u8 0x74; u8 0x72; u8 0x75;
    u8 0x74; u8 0x68; u8 0x20; u8 0x62; u8 0x65;
    u8 0x61; u8 0x75; u8 0x74; u8 0x79;
  ] in
  assert_norm(List.Tot.length l == size_test8_encryption6_plaintext);
  l
let test8_encryption6_plaintext : lbytes size_test8_encryption6_plaintext = createL test8_encryption6_plaintext_list

// generated: "436f756e742d37"
inline_for_extraction
let size_test8_encryption7_aad: size_nat = 7
let test8_encryption7_aad_list : l:list uint8{List.Tot.length l == size_test8_encryption7_aad} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x75; u8 0x6e; u8 0x74;
    u8 0x2d; u8 0x37;
  ] in
  assert_norm(List.Tot.length l == size_test8_encryption7_aad);
  l
let test8_encryption7_aad : lbytes size_test8_encryption7_aad = createL test8_encryption7_aad_list

// generated: "f98d9e8b97a2f0235cf08b619672e72c684f4e879e6d317234f08ec00844bedab7a222e76a535b971cd54fa34b"
inline_for_extraction
let size_test8_encryption7_ciphertext: size_nat = 45
let test8_encryption7_ciphertext_list : l:list uint8{List.Tot.length l == size_test8_encryption7_ciphertext} =
  [@inline_let]
  let l = [
    u8 0xf9; u8 0x8d; u8 0x9e; u8 0x8b; u8 0x97;
    u8 0xa2; u8 0xf0; u8 0x23; u8 0x5c; u8 0xf0;
    u8 0x8b; u8 0x61; u8 0x96; u8 0x72; u8 0xe7;
    u8 0x2c; u8 0x68; u8 0x4f; u8 0x4e; u8 0x87;
    u8 0x9e; u8 0x6d; u8 0x31; u8 0x72; u8 0x34;
    u8 0xf0; u8 0x8e; u8 0xc0; u8 0x08; u8 0x44;
    u8 0xbe; u8 0xda; u8 0xb7; u8 0xa2; u8 0x22;
    u8 0xe7; u8 0x6a; u8 0x53; u8 0x5b; u8 0x97;
    u8 0x1c; u8 0xd5; u8 0x4f; u8 0xa3; u8 0x4b;
  ] in
  assert_norm(List.Tot.length l == size_test8_encryption7_ciphertext);
  l
let test8_encryption7_ciphertext : lbytes size_test8_encryption7_ciphertext = createL test8_encryption7_ciphertext_list

// generated: "372867254b4044c7be47f315"
inline_for_extraction
let size_test8_encryption7_nonce: size_nat = 12
let test8_encryption7_nonce_list : l:list uint8{List.Tot.length l == size_test8_encryption7_nonce} =
  [@inline_let]
  let l = [
    u8 0x37; u8 0x28; u8 0x67; u8 0x25; u8 0x4b;
    u8 0x40; u8 0x44; u8 0xc7; u8 0xbe; u8 0x47;
    u8 0xf3; u8 0x15;
  ] in
  assert_norm(List.Tot.length l == size_test8_encryption7_nonce);
  l
let test8_encryption7_nonce : lbytes size_test8_encryption7_nonce = createL test8_encryption7_nonce_list

// generated: "4265617574792069732074727574682c20747275746820626561757479"
inline_for_extraction
let size_test8_encryption7_plaintext: size_nat = 29
let test8_encryption7_plaintext_list : l:list uint8{List.Tot.length l == size_test8_encryption7_plaintext} =
  [@inline_let]
  let l = [
    u8 0x42; u8 0x65; u8 0x61; u8 0x75; u8 0x74;
    u8 0x79; u8 0x20; u8 0x69; u8 0x73; u8 0x20;
    u8 0x74; u8 0x72; u8 0x75; u8 0x74; u8 0x68;
    u8 0x2c; u8 0x20; u8 0x74; u8 0x72; u8 0x75;
    u8 0x74; u8 0x68; u8 0x20; u8 0x62; u8 0x65;
    u8 0x61; u8 0x75; u8 0x74; u8 0x79;
  ] in
  assert_norm(List.Tot.length l == size_test8_encryption7_plaintext);
  l
let test8_encryption7_plaintext : lbytes size_test8_encryption7_plaintext = createL test8_encryption7_plaintext_list

// generated: "436f756e742d38"
inline_for_extraction
let size_test8_encryption8_aad: size_nat = 7
let test8_encryption8_aad_list : l:list uint8{List.Tot.length l == size_test8_encryption8_aad} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x75; u8 0x6e; u8 0x74;
    u8 0x2d; u8 0x38;
  ] in
  assert_norm(List.Tot.length l == size_test8_encryption8_aad);
  l
let test8_encryption8_aad : lbytes size_test8_encryption8_aad = createL test8_encryption8_aad_list

// generated: "acfc4c792a02eec936a852ca0deb7619cade9e932dd89bc04b84b50cd6b1ed93d8061161a07c4de5999166bd96"
inline_for_extraction
let size_test8_encryption8_ciphertext: size_nat = 45
let test8_encryption8_ciphertext_list : l:list uint8{List.Tot.length l == size_test8_encryption8_ciphertext} =
  [@inline_let]
  let l = [
    u8 0xac; u8 0xfc; u8 0x4c; u8 0x79; u8 0x2a;
    u8 0x02; u8 0xee; u8 0xc9; u8 0x36; u8 0xa8;
    u8 0x52; u8 0xca; u8 0x0d; u8 0xeb; u8 0x76;
    u8 0x19; u8 0xca; u8 0xde; u8 0x9e; u8 0x93;
    u8 0x2d; u8 0xd8; u8 0x9b; u8 0xc0; u8 0x4b;
    u8 0x84; u8 0xb5; u8 0x0c; u8 0xd6; u8 0xb1;
    u8 0xed; u8 0x93; u8 0xd8; u8 0x06; u8 0x11;
    u8 0x61; u8 0xa0; u8 0x7c; u8 0x4d; u8 0xe5;
    u8 0x99; u8 0x91; u8 0x66; u8 0xbd; u8 0x96;
  ] in
  assert_norm(List.Tot.length l == size_test8_encryption8_ciphertext);
  l
let test8_encryption8_ciphertext : lbytes size_test8_encryption8_ciphertext = createL test8_encryption8_ciphertext_list

// generated: "372867254b4044c7be47f31a"
inline_for_extraction
let size_test8_encryption8_nonce: size_nat = 12
let test8_encryption8_nonce_list : l:list uint8{List.Tot.length l == size_test8_encryption8_nonce} =
  [@inline_let]
  let l = [
    u8 0x37; u8 0x28; u8 0x67; u8 0x25; u8 0x4b;
    u8 0x40; u8 0x44; u8 0xc7; u8 0xbe; u8 0x47;
    u8 0xf3; u8 0x1a;
  ] in
  assert_norm(List.Tot.length l == size_test8_encryption8_nonce);
  l
let test8_encryption8_nonce : lbytes size_test8_encryption8_nonce = createL test8_encryption8_nonce_list

// generated: "4265617574792069732074727574682c20747275746820626561757479"
inline_for_extraction
let size_test8_encryption8_plaintext: size_nat = 29
let test8_encryption8_plaintext_list : l:list uint8{List.Tot.length l == size_test8_encryption8_plaintext} =
  [@inline_let]
  let l = [
    u8 0x42; u8 0x65; u8 0x61; u8 0x75; u8 0x74;
    u8 0x79; u8 0x20; u8 0x69; u8 0x73; u8 0x20;
    u8 0x74; u8 0x72; u8 0x75; u8 0x74; u8 0x68;
    u8 0x2c; u8 0x20; u8 0x74; u8 0x72; u8 0x75;
    u8 0x74; u8 0x68; u8 0x20; u8 0x62; u8 0x65;
    u8 0x61; u8 0x75; u8 0x74; u8 0x79;
  ] in
  assert_norm(List.Tot.length l == size_test8_encryption8_plaintext);
  l
let test8_encryption8_plaintext : lbytes size_test8_encryption8_plaintext = createL test8_encryption8_plaintext_list

// generated: "436f756e742d39"
inline_for_extraction
let size_test8_encryption9_aad: size_nat = 7
let test8_encryption9_aad_list : l:list uint8{List.Tot.length l == size_test8_encryption9_aad} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x75; u8 0x6e; u8 0x74;
    u8 0x2d; u8 0x39;
  ] in
  assert_norm(List.Tot.length l == size_test8_encryption9_aad);
  l
let test8_encryption9_aad : lbytes size_test8_encryption9_aad = createL test8_encryption9_aad_list

// generated: "0bdbabea8d3f6af944af72fe1d70b5450cc66896d877d3c7a113e74c337e135e166b73b2fa16db0f46b309edd8"
inline_for_extraction
let size_test8_encryption9_ciphertext: size_nat = 45
let test8_encryption9_ciphertext_list : l:list uint8{List.Tot.length l == size_test8_encryption9_ciphertext} =
  [@inline_let]
  let l = [
    u8 0x0b; u8 0xdb; u8 0xab; u8 0xea; u8 0x8d;
    u8 0x3f; u8 0x6a; u8 0xf9; u8 0x44; u8 0xaf;
    u8 0x72; u8 0xfe; u8 0x1d; u8 0x70; u8 0xb5;
    u8 0x45; u8 0x0c; u8 0xc6; u8 0x68; u8 0x96;
    u8 0xd8; u8 0x77; u8 0xd3; u8 0xc7; u8 0xa1;
    u8 0x13; u8 0xe7; u8 0x4c; u8 0x33; u8 0x7e;
    u8 0x13; u8 0x5e; u8 0x16; u8 0x6b; u8 0x73;
    u8 0xb2; u8 0xfa; u8 0x16; u8 0xdb; u8 0x0f;
    u8 0x46; u8 0xb3; u8 0x09; u8 0xed; u8 0xd8;
  ] in
  assert_norm(List.Tot.length l == size_test8_encryption9_ciphertext);
  l
let test8_encryption9_ciphertext : lbytes size_test8_encryption9_ciphertext = createL test8_encryption9_ciphertext_list

// generated: "372867254b4044c7be47f31b"
inline_for_extraction
let size_test8_encryption9_nonce: size_nat = 12
let test8_encryption9_nonce_list : l:list uint8{List.Tot.length l == size_test8_encryption9_nonce} =
  [@inline_let]
  let l = [
    u8 0x37; u8 0x28; u8 0x67; u8 0x25; u8 0x4b;
    u8 0x40; u8 0x44; u8 0xc7; u8 0xbe; u8 0x47;
    u8 0xf3; u8 0x1b;
  ] in
  assert_norm(List.Tot.length l == size_test8_encryption9_nonce);
  l
let test8_encryption9_nonce : lbytes size_test8_encryption9_nonce = createL test8_encryption9_nonce_list

// generated: "4265617574792069732074727574682c20747275746820626561757479"
inline_for_extraction
let size_test8_encryption9_plaintext: size_nat = 29
let test8_encryption9_plaintext_list : l:list uint8{List.Tot.length l == size_test8_encryption9_plaintext} =
  [@inline_let]
  let l = [
    u8 0x42; u8 0x65; u8 0x61; u8 0x75; u8 0x74;
    u8 0x79; u8 0x20; u8 0x69; u8 0x73; u8 0x20;
    u8 0x74; u8 0x72; u8 0x75; u8 0x74; u8 0x68;
    u8 0x2c; u8 0x20; u8 0x74; u8 0x72; u8 0x75;
    u8 0x74; u8 0x68; u8 0x20; u8 0x62; u8 0x65;
    u8 0x61; u8 0x75; u8 0x74; u8 0x79;
  ] in
  assert_norm(List.Tot.length l == size_test8_encryption9_plaintext);
  l
let test8_encryption9_plaintext : lbytes size_test8_encryption9_plaintext = createL test8_encryption9_plaintext_list

// generated: "436f6e746578742d30"
inline_for_extraction
let size_test8_export0_exportContext: size_nat = 9
let test8_export0_exportContext_list : l:list uint8{List.Tot.length l == size_test8_export0_exportContext} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x6e; u8 0x74; u8 0x65;
    u8 0x78; u8 0x74; u8 0x2d; u8 0x30;
  ] in
  assert_norm(List.Tot.length l == size_test8_export0_exportContext);
  l
let test8_export0_exportContext : lbytes size_test8_export0_exportContext = createL test8_export0_exportContext_list

// generated: "b0a2919b2786d709093c93474f4db89764ac4051383cc1524a1a8fa8fe7fe9fd"
inline_for_extraction
let size_test8_export0_exportValue: size_nat = 32
let test8_export0_exportValue_list : l:list uint8{List.Tot.length l == size_test8_export0_exportValue} =
  [@inline_let]
  let l = [
    u8 0xb0; u8 0xa2; u8 0x91; u8 0x9b; u8 0x27;
    u8 0x86; u8 0xd7; u8 0x09; u8 0x09; u8 0x3c;
    u8 0x93; u8 0x47; u8 0x4f; u8 0x4d; u8 0xb8;
    u8 0x97; u8 0x64; u8 0xac; u8 0x40; u8 0x51;
    u8 0x38; u8 0x3c; u8 0xc1; u8 0x52; u8 0x4a;
    u8 0x1a; u8 0x8f; u8 0xa8; u8 0xfe; u8 0x7f;
    u8 0xe9; u8 0xfd;
  ] in
  assert_norm(List.Tot.length l == size_test8_export0_exportValue);
  l
let test8_export0_exportValue : lbytes size_test8_export0_exportValue = createL test8_export0_exportValue_list

let test8_export0_len:size_nat = 32
// generated: "436f6e746578742d31"
inline_for_extraction
let size_test8_export1_exportContext: size_nat = 9
let test8_export1_exportContext_list : l:list uint8{List.Tot.length l == size_test8_export1_exportContext} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x6e; u8 0x74; u8 0x65;
    u8 0x78; u8 0x74; u8 0x2d; u8 0x31;
  ] in
  assert_norm(List.Tot.length l == size_test8_export1_exportContext);
  l
let test8_export1_exportContext : lbytes size_test8_export1_exportContext = createL test8_export1_exportContext_list

// generated: "e1b0a54b40366960448d9932db6d7f60785c3fd3c90ee5638d465b54c0dee935"
inline_for_extraction
let size_test8_export1_exportValue: size_nat = 32
let test8_export1_exportValue_list : l:list uint8{List.Tot.length l == size_test8_export1_exportValue} =
  [@inline_let]
  let l = [
    u8 0xe1; u8 0xb0; u8 0xa5; u8 0x4b; u8 0x40;
    u8 0x36; u8 0x69; u8 0x60; u8 0x44; u8 0x8d;
    u8 0x99; u8 0x32; u8 0xdb; u8 0x6d; u8 0x7f;
    u8 0x60; u8 0x78; u8 0x5c; u8 0x3f; u8 0xd3;
    u8 0xc9; u8 0x0e; u8 0xe5; u8 0x63; u8 0x8d;
    u8 0x46; u8 0x5b; u8 0x54; u8 0xc0; u8 0xde;
    u8 0xe9; u8 0x35;
  ] in
  assert_norm(List.Tot.length l == size_test8_export1_exportValue);
  l
let test8_export1_exportValue : lbytes size_test8_export1_exportValue = createL test8_export1_exportValue_list

let test8_export1_len:size_nat = 32
// generated: "436f6e746578742d32"
inline_for_extraction
let size_test8_export2_exportContext: size_nat = 9
let test8_export2_exportContext_list : l:list uint8{List.Tot.length l == size_test8_export2_exportContext} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x6e; u8 0x74; u8 0x65;
    u8 0x78; u8 0x74; u8 0x2d; u8 0x32;
  ] in
  assert_norm(List.Tot.length l == size_test8_export2_exportContext);
  l
let test8_export2_exportContext : lbytes size_test8_export2_exportContext = createL test8_export2_exportContext_list

// generated: "120ff8b43e2bef3e42450effb9c06e2b2703f45f7c23400f1ac1bf62146bd427"
inline_for_extraction
let size_test8_export2_exportValue: size_nat = 32
let test8_export2_exportValue_list : l:list uint8{List.Tot.length l == size_test8_export2_exportValue} =
  [@inline_let]
  let l = [
    u8 0x12; u8 0x0f; u8 0xf8; u8 0xb4; u8 0x3e;
    u8 0x2b; u8 0xef; u8 0x3e; u8 0x42; u8 0x45;
    u8 0x0e; u8 0xff; u8 0xb9; u8 0xc0; u8 0x6e;
    u8 0x2b; u8 0x27; u8 0x03; u8 0xf4; u8 0x5f;
    u8 0x7c; u8 0x23; u8 0x40; u8 0x0f; u8 0x1a;
    u8 0xc1; u8 0xbf; u8 0x62; u8 0x14; u8 0x6b;
    u8 0xd4; u8 0x27;
  ] in
  assert_norm(List.Tot.length l == size_test8_export2_exportValue);
  l
let test8_export2_exportValue : lbytes size_test8_export2_exportValue = createL test8_export2_exportValue_list

let test8_export2_len:size_nat = 32
// generated: "436f6e746578742d33"
inline_for_extraction
let size_test8_export3_exportContext: size_nat = 9
let test8_export3_exportContext_list : l:list uint8{List.Tot.length l == size_test8_export3_exportContext} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x6e; u8 0x74; u8 0x65;
    u8 0x78; u8 0x74; u8 0x2d; u8 0x33;
  ] in
  assert_norm(List.Tot.length l == size_test8_export3_exportContext);
  l
let test8_export3_exportContext : lbytes size_test8_export3_exportContext = createL test8_export3_exportContext_list

// generated: "8653ce08f9a263a42f03cf85736034ab20fe3f329090c95e758a03fdada558ed"
inline_for_extraction
let size_test8_export3_exportValue: size_nat = 32
let test8_export3_exportValue_list : l:list uint8{List.Tot.length l == size_test8_export3_exportValue} =
  [@inline_let]
  let l = [
    u8 0x86; u8 0x53; u8 0xce; u8 0x08; u8 0xf9;
    u8 0xa2; u8 0x63; u8 0xa4; u8 0x2f; u8 0x03;
    u8 0xcf; u8 0x85; u8 0x73; u8 0x60; u8 0x34;
    u8 0xab; u8 0x20; u8 0xfe; u8 0x3f; u8 0x32;
    u8 0x90; u8 0x90; u8 0xc9; u8 0x5e; u8 0x75;
    u8 0x8a; u8 0x03; u8 0xfd; u8 0xad; u8 0xa5;
    u8 0x58; u8 0xed;
  ] in
  assert_norm(List.Tot.length l == size_test8_export3_exportValue);
  l
let test8_export3_exportValue : lbytes size_test8_export3_exportValue = createL test8_export3_exportValue_list

let test8_export3_len:size_nat = 32
// generated: "436f6e746578742d34"
inline_for_extraction
let size_test8_export4_exportContext: size_nat = 9
let test8_export4_exportContext_list : l:list uint8{List.Tot.length l == size_test8_export4_exportContext} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x6e; u8 0x74; u8 0x65;
    u8 0x78; u8 0x74; u8 0x2d; u8 0x34;
  ] in
  assert_norm(List.Tot.length l == size_test8_export4_exportContext);
  l
let test8_export4_exportContext : lbytes size_test8_export4_exportContext = createL test8_export4_exportContext_list

// generated: "59267264d214dad59d664cd2aae7ff1962b1af500910a92c7320920d83b4ec48"
inline_for_extraction
let size_test8_export4_exportValue: size_nat = 32
let test8_export4_exportValue_list : l:list uint8{List.Tot.length l == size_test8_export4_exportValue} =
  [@inline_let]
  let l = [
    u8 0x59; u8 0x26; u8 0x72; u8 0x64; u8 0xd2;
    u8 0x14; u8 0xda; u8 0xd5; u8 0x9d; u8 0x66;
    u8 0x4c; u8 0xd2; u8 0xaa; u8 0xe7; u8 0xff;
    u8 0x19; u8 0x62; u8 0xb1; u8 0xaf; u8 0x50;
    u8 0x09; u8 0x10; u8 0xa9; u8 0x2c; u8 0x73;
    u8 0x20; u8 0x92; u8 0x0d; u8 0x83; u8 0xb4;
    u8 0xec; u8 0x48;
  ] in
  assert_norm(List.Tot.length l == size_test8_export4_exportValue);
  l
let test8_export4_exportValue : lbytes size_test8_export4_exportValue = createL test8_export4_exportValue_list

let test8_export4_len:size_nat = 32

let test8 () =
  let res = test_setupBase test8_ciphersuite test8_skEm test8_pkEm test8_skRm test8_pkRm test8_info test8_enc test8_zz test8_key_schedule_context test8_secret test8_key test8_nonce test8_exporterSecret test8_encryption0_nonce test8_encryption1_nonce in
  let seq0:HPKE.seq_aead_s test8_ciphersuite = 0 in
  let enc_res0 = test_encryption test8_ciphersuite test8_key test8_nonce test8_exporterSecret test8_encryption0_aad test8_encryption0_plaintext seq0 test8_encryption0_ciphertext test8_encryption0_nonce in

  assert_norm (1 < pow2 (8 * 12));
  let seq1:HPKE.seq_aead_s test8_ciphersuite = (seq0 + 1) in
  let enc_res1 = test_encryption test8_ciphersuite test8_key test8_nonce test8_exporterSecret test8_encryption1_aad test8_encryption1_plaintext seq1 test8_encryption1_ciphertext test8_encryption1_nonce in

  assert_norm (2 < pow2 (8 * 12));
  let seq2:HPKE.seq_aead_s test8_ciphersuite = (seq1 + 1) in
  let enc_res2 = test_encryption test8_ciphersuite test8_key test8_nonce test8_exporterSecret test8_encryption2_aad test8_encryption2_plaintext 2 test8_encryption2_ciphertext test8_encryption2_nonce in

  assert_norm (3 < pow2 (8 * 12));
  let seq3:HPKE.seq_aead_s test8_ciphersuite = (seq2 + 1) in
  let enc_res3 = test_encryption test8_ciphersuite test8_key test8_nonce test8_exporterSecret test8_encryption3_aad test8_encryption3_plaintext 3 test8_encryption3_ciphertext test8_encryption3_nonce in

  assert_norm (4 < pow2 (8 * 12));
  let seq4:HPKE.seq_aead_s test8_ciphersuite = (seq3 + 1) in
  let enc_res4 = test_encryption test8_ciphersuite test8_key test8_nonce test8_exporterSecret test8_encryption4_aad test8_encryption4_plaintext 4 test8_encryption4_ciphertext test8_encryption4_nonce in

  assert_norm (5 < pow2 (8 * 12));
  let seq5:HPKE.seq_aead_s test8_ciphersuite = (seq4 + 1) in
  let enc_res5 = test_encryption test8_ciphersuite test8_key test8_nonce test8_exporterSecret test8_encryption5_aad test8_encryption5_plaintext 5 test8_encryption5_ciphertext test8_encryption5_nonce in

  assert_norm (6 < pow2 (8 * 12));
  let seq6:HPKE.seq_aead_s test8_ciphersuite = (seq5 + 1) in
  let enc_res6 = test_encryption test8_ciphersuite test8_key test8_nonce test8_exporterSecret test8_encryption6_aad test8_encryption6_plaintext 6 test8_encryption6_ciphertext test8_encryption6_nonce in

  assert_norm (7 < pow2 (8 * 12));
  let seq7:HPKE.seq_aead_s test8_ciphersuite = (seq6 + 1) in
  let enc_res7 = test_encryption test8_ciphersuite test8_key test8_nonce test8_exporterSecret test8_encryption7_aad test8_encryption7_plaintext 7 test8_encryption7_ciphertext test8_encryption7_nonce in

  assert_norm (8 < pow2 (8 * 12));
  let seq8:HPKE.seq_aead_s test8_ciphersuite = (seq7 + 1) in
  let enc_res8 = test_encryption test8_ciphersuite test8_key test8_nonce test8_exporterSecret test8_encryption8_aad test8_encryption8_plaintext 8 test8_encryption8_ciphertext test8_encryption8_nonce in

  assert_norm (9 < pow2 (8 * 12));
  let seq9:HPKE.seq_aead_s test8_ciphersuite = (seq8 + 1) in
  let enc_res9 = test_encryption test8_ciphersuite test8_key test8_nonce test8_exporterSecret test8_encryption9_aad test8_encryption9_plaintext 9 test8_encryption9_ciphertext test8_encryption9_nonce in

  let exp_res0 = test_export test8_ciphersuite test8_key test8_nonce test8_exporterSecret test8_export0_exportContext test8_export0_len test8_export0_exportValue in

  let exp_res1 = test_export test8_ciphersuite test8_key test8_nonce test8_exporterSecret test8_export1_exportContext test8_export1_len test8_export1_exportValue in

  let exp_res2 = test_export test8_ciphersuite test8_key test8_nonce test8_exporterSecret test8_export2_exportContext test8_export2_len test8_export2_exportValue in

  let exp_res3 = test_export test8_ciphersuite test8_key test8_nonce test8_exporterSecret test8_export3_exportContext test8_export3_len test8_export3_exportValue in

  let exp_res4 = test_export test8_ciphersuite test8_key test8_nonce test8_exporterSecret test8_export4_exportContext test8_export4_len test8_export4_exportValue in

  enc_res0 && enc_res1 && enc_res2 && enc_res3 && enc_res4 && enc_res5 && enc_res6 && enc_res7 && enc_res8 && enc_res9 && res && exp_res0 && exp_res1 && exp_res2 && exp_res3 && exp_res4


// Skipped unsupported test case 9

// Skipped unsupported test case 10

// Skipped unsupported test case 11

// Skipped unsupported test case 12

// Skipped unsupported test case 13

let test14_mode: HPKE.mode = HPKE.Base
let test14_ciphersuite = DH.DH_Curve25519, Hash.SHA2_256, AEAD.AES128_GCM, Hash.SHA2_512

// generated: "4f6465206f6e2061204772656369616e2055726e"
inline_for_extraction
let size_test14_info: size_nat = 20
let test14_info_list : l:list uint8{List.Tot.length l == size_test14_info} =
  [@inline_let]
  let l = [
    u8 0x4f; u8 0x64; u8 0x65; u8 0x20; u8 0x6f;
    u8 0x6e; u8 0x20; u8 0x61; u8 0x20; u8 0x47;
    u8 0x72; u8 0x65; u8 0x63; u8 0x69; u8 0x61;
    u8 0x6e; u8 0x20; u8 0x55; u8 0x72; u8 0x6e;
  ] in
  assert_norm(List.Tot.length l == size_test14_info);
  l
let test14_info : lbytes size_test14_info = createL test14_info_list

// generated: "86d326ac34a657aefbea1a75aec2b089654ba656b219eca578a29113e4bd712a"
inline_for_extraction
let size_test14_skRm: size_nat = 32
let test14_skRm_list : l:list uint8{List.Tot.length l == size_test14_skRm} =
  [@inline_let]
  let l = [
    u8 0x86; u8 0xd3; u8 0x26; u8 0xac; u8 0x34;
    u8 0xa6; u8 0x57; u8 0xae; u8 0xfb; u8 0xea;
    u8 0x1a; u8 0x75; u8 0xae; u8 0xc2; u8 0xb0;
    u8 0x89; u8 0x65; u8 0x4b; u8 0xa6; u8 0x56;
    u8 0xb2; u8 0x19; u8 0xec; u8 0xa5; u8 0x78;
    u8 0xa2; u8 0x91; u8 0x13; u8 0xe4; u8 0xbd;
    u8 0x71; u8 0x2a;
  ] in
  assert_norm(List.Tot.length l == size_test14_skRm);
  l
let test14_skRm : lbytes size_test14_skRm = createL test14_skRm_list

// generated: "6391a538fa9e2a74ffa581a2cf45af3d9ec7bee11597aec0089a3312b981a4bd"
inline_for_extraction
let size_test14_skEm: size_nat = 32
let test14_skEm_list : l:list uint8{List.Tot.length l == size_test14_skEm} =
  [@inline_let]
  let l = [
    u8 0x63; u8 0x91; u8 0xa5; u8 0x38; u8 0xfa;
    u8 0x9e; u8 0x2a; u8 0x74; u8 0xff; u8 0xa5;
    u8 0x81; u8 0xa2; u8 0xcf; u8 0x45; u8 0xaf;
    u8 0x3d; u8 0x9e; u8 0xc7; u8 0xbe; u8 0xe1;
    u8 0x15; u8 0x97; u8 0xae; u8 0xc0; u8 0x08;
    u8 0x9a; u8 0x33; u8 0x12; u8 0xb9; u8 0x81;
    u8 0xa4; u8 0xbd;
  ] in
  assert_norm(List.Tot.length l == size_test14_skEm);
  l
let test14_skEm : lbytes size_test14_skEm = createL test14_skEm_list

// generated: "49ec6342f6cdb3bd9e4d56bd9c1f459f90b5981817d08c6b206a5334036a331a"
inline_for_extraction
let size_test14_pkRm: size_nat = 32
let test14_pkRm_list : l:list uint8{List.Tot.length l == size_test14_pkRm} =
  [@inline_let]
  let l = [
    u8 0x49; u8 0xec; u8 0x63; u8 0x42; u8 0xf6;
    u8 0xcd; u8 0xb3; u8 0xbd; u8 0x9e; u8 0x4d;
    u8 0x56; u8 0xbd; u8 0x9c; u8 0x1f; u8 0x45;
    u8 0x9f; u8 0x90; u8 0xb5; u8 0x98; u8 0x18;
    u8 0x17; u8 0xd0; u8 0x8c; u8 0x6b; u8 0x20;
    u8 0x6a; u8 0x53; u8 0x34; u8 0x03; u8 0x6a;
    u8 0x33; u8 0x1a;
  ] in
  assert_norm(List.Tot.length l == size_test14_pkRm);
  l
let test14_pkRm : lbytes size_test14_pkRm = createL test14_pkRm_list

// generated: "ed935763c638b697e6b431a14b3174b4b8d8ef5c289277a3de88acc1f8cbfa2f"
inline_for_extraction
let size_test14_pkEm: size_nat = 32
let test14_pkEm_list : l:list uint8{List.Tot.length l == size_test14_pkEm} =
  [@inline_let]
  let l = [
    u8 0xed; u8 0x93; u8 0x57; u8 0x63; u8 0xc6;
    u8 0x38; u8 0xb6; u8 0x97; u8 0xe6; u8 0xb4;
    u8 0x31; u8 0xa1; u8 0x4b; u8 0x31; u8 0x74;
    u8 0xb4; u8 0xb8; u8 0xd8; u8 0xef; u8 0x5c;
    u8 0x28; u8 0x92; u8 0x77; u8 0xa3; u8 0xde;
    u8 0x88; u8 0xac; u8 0xc1; u8 0xf8; u8 0xcb;
    u8 0xfa; u8 0x2f;
  ] in
  assert_norm(List.Tot.length l == size_test14_pkEm);
  l
let test14_pkEm : lbytes size_test14_pkEm = createL test14_pkEm_list

// generated: "ed935763c638b697e6b431a14b3174b4b8d8ef5c289277a3de88acc1f8cbfa2f"
inline_for_extraction
let size_test14_enc: size_nat = 32
let test14_enc_list : l:list uint8{List.Tot.length l == size_test14_enc} =
  [@inline_let]
  let l = [
    u8 0xed; u8 0x93; u8 0x57; u8 0x63; u8 0xc6;
    u8 0x38; u8 0xb6; u8 0x97; u8 0xe6; u8 0xb4;
    u8 0x31; u8 0xa1; u8 0x4b; u8 0x31; u8 0x74;
    u8 0xb4; u8 0xb8; u8 0xd8; u8 0xef; u8 0x5c;
    u8 0x28; u8 0x92; u8 0x77; u8 0xa3; u8 0xde;
    u8 0x88; u8 0xac; u8 0xc1; u8 0xf8; u8 0xcb;
    u8 0xfa; u8 0x2f;
  ] in
  assert_norm(List.Tot.length l == size_test14_enc);
  l
let test14_enc : lbytes size_test14_enc = createL test14_enc_list

// generated: "017d4270a0aff88ab414546966106639e6d2b35f05e1850c4f441e802ce80409"
inline_for_extraction
let size_test14_zz: size_nat = 32
let test14_zz_list : l:list uint8{List.Tot.length l == size_test14_zz} =
  [@inline_let]
  let l = [
    u8 0x01; u8 0x7d; u8 0x42; u8 0x70; u8 0xa0;
    u8 0xaf; u8 0xf8; u8 0x8a; u8 0xb4; u8 0x14;
    u8 0x54; u8 0x69; u8 0x66; u8 0x10; u8 0x66;
    u8 0x39; u8 0xe6; u8 0xd2; u8 0xb3; u8 0x5f;
    u8 0x05; u8 0xe1; u8 0x85; u8 0x0c; u8 0x4f;
    u8 0x44; u8 0x1e; u8 0x80; u8 0x2c; u8 0xe8;
    u8 0x04; u8 0x09;
  ] in
  assert_norm(List.Tot.length l == size_test14_zz);
  l
let test14_zz : lbytes size_test14_zz = createL test14_zz_list

// generated: "002000030001008ca13b5d680259cfa265de13dd24f257083c9403c01a8aa3320b9195c8d1d812a58e72ff3dd3cf71dc81b21c354f84e9ca6863d5fd871711e356ed9bf5f1e0d0c70a83df9dcea90e894cbfd709dabe93b3390a8e9c5a18498a1ff32414767a12c08bf4d4df6cf9d953da725b79d07454eb69bd002235f35a241dec5f1088177c"
inline_for_extraction
let size_test14_key_schedule_context: size_nat = 135
let test14_key_schedule_context_list : l:list uint8{List.Tot.length l == size_test14_key_schedule_context} =
  [@inline_let]
  let l = [
    u8 0x00; u8 0x20; u8 0x00; u8 0x03; u8 0x00;
    u8 0x01; u8 0x00; u8 0x8c; u8 0xa1; u8 0x3b;
    u8 0x5d; u8 0x68; u8 0x02; u8 0x59; u8 0xcf;
    u8 0xa2; u8 0x65; u8 0xde; u8 0x13; u8 0xdd;
    u8 0x24; u8 0xf2; u8 0x57; u8 0x08; u8 0x3c;
    u8 0x94; u8 0x03; u8 0xc0; u8 0x1a; u8 0x8a;
    u8 0xa3; u8 0x32; u8 0x0b; u8 0x91; u8 0x95;
    u8 0xc8; u8 0xd1; u8 0xd8; u8 0x12; u8 0xa5;
    u8 0x8e; u8 0x72; u8 0xff; u8 0x3d; u8 0xd3;
    u8 0xcf; u8 0x71; u8 0xdc; u8 0x81; u8 0xb2;
    u8 0x1c; u8 0x35; u8 0x4f; u8 0x84; u8 0xe9;
    u8 0xca; u8 0x68; u8 0x63; u8 0xd5; u8 0xfd;
    u8 0x87; u8 0x17; u8 0x11; u8 0xe3; u8 0x56;
    u8 0xed; u8 0x9b; u8 0xf5; u8 0xf1; u8 0xe0;
    u8 0xd0; u8 0xc7; u8 0x0a; u8 0x83; u8 0xdf;
    u8 0x9d; u8 0xce; u8 0xa9; u8 0x0e; u8 0x89;
    u8 0x4c; u8 0xbf; u8 0xd7; u8 0x09; u8 0xda;
    u8 0xbe; u8 0x93; u8 0xb3; u8 0x39; u8 0x0a;
    u8 0x8e; u8 0x9c; u8 0x5a; u8 0x18; u8 0x49;
    u8 0x8a; u8 0x1f; u8 0xf3; u8 0x24; u8 0x14;
    u8 0x76; u8 0x7a; u8 0x12; u8 0xc0; u8 0x8b;
    u8 0xf4; u8 0xd4; u8 0xdf; u8 0x6c; u8 0xf9;
    u8 0xd9; u8 0x53; u8 0xda; u8 0x72; u8 0x5b;
    u8 0x79; u8 0xd0; u8 0x74; u8 0x54; u8 0xeb;
    u8 0x69; u8 0xbd; u8 0x00; u8 0x22; u8 0x35;
    u8 0xf3; u8 0x5a; u8 0x24; u8 0x1d; u8 0xec;
    u8 0x5f; u8 0x10; u8 0x88; u8 0x17; u8 0x7c;
  ] in
  assert_norm(List.Tot.length l == size_test14_key_schedule_context);
  l
let test14_key_schedule_context : lbytes size_test14_key_schedule_context = createL test14_key_schedule_context_list

// generated: "665aa1299fab11e702a611f5654040e5b105f7624fb1b024cff36b722a2c2214faafd1022229c866d9ee0ef37deb3063fe0e89f95f33f57da8d96118f49e41ee"
inline_for_extraction
let size_test14_secret: size_nat = 64
let test14_secret_list : l:list uint8{List.Tot.length l == size_test14_secret} =
  [@inline_let]
  let l = [
    u8 0x66; u8 0x5a; u8 0xa1; u8 0x29; u8 0x9f;
    u8 0xab; u8 0x11; u8 0xe7; u8 0x02; u8 0xa6;
    u8 0x11; u8 0xf5; u8 0x65; u8 0x40; u8 0x40;
    u8 0xe5; u8 0xb1; u8 0x05; u8 0xf7; u8 0x62;
    u8 0x4f; u8 0xb1; u8 0xb0; u8 0x24; u8 0xcf;
    u8 0xf3; u8 0x6b; u8 0x72; u8 0x2a; u8 0x2c;
    u8 0x22; u8 0x14; u8 0xfa; u8 0xaf; u8 0xd1;
    u8 0x02; u8 0x22; u8 0x29; u8 0xc8; u8 0x66;
    u8 0xd9; u8 0xee; u8 0x0e; u8 0xf3; u8 0x7d;
    u8 0xeb; u8 0x30; u8 0x63; u8 0xfe; u8 0x0e;
    u8 0x89; u8 0xf9; u8 0x5f; u8 0x33; u8 0xf5;
    u8 0x7d; u8 0xa8; u8 0xd9; u8 0x61; u8 0x18;
    u8 0xf4; u8 0x9e; u8 0x41; u8 0xee;
  ] in
  assert_norm(List.Tot.length l == size_test14_secret);
  l
let test14_secret : lbytes size_test14_secret = createL test14_secret_list

// generated: "73050f3c1929580b196ccc500f952fca"
inline_for_extraction
let size_test14_key: size_nat = 16
let test14_key_list : l:list uint8{List.Tot.length l == size_test14_key} =
  [@inline_let]
  let l = [
    u8 0x73; u8 0x05; u8 0x0f; u8 0x3c; u8 0x19;
    u8 0x29; u8 0x58; u8 0x0b; u8 0x19; u8 0x6c;
    u8 0xcc; u8 0x50; u8 0x0f; u8 0x95; u8 0x2f;
    u8 0xca;
  ] in
  assert_norm(List.Tot.length l == size_test14_key);
  l
let test14_key : lbytes size_test14_key = createL test14_key_list

// generated: "9fb4740ceb08f5e4300421ed"
inline_for_extraction
let size_test14_nonce: size_nat = 12
let test14_nonce_list : l:list uint8{List.Tot.length l == size_test14_nonce} =
  [@inline_let]
  let l = [
    u8 0x9f; u8 0xb4; u8 0x74; u8 0x0c; u8 0xeb;
    u8 0x08; u8 0xf5; u8 0xe4; u8 0x30; u8 0x04;
    u8 0x21; u8 0xed;
  ] in
  assert_norm(List.Tot.length l == size_test14_nonce);
  l
let test14_nonce : lbytes size_test14_nonce = createL test14_nonce_list

// generated: "74cab8a6a97ff6c594bc2a4ebf8c8241bce037839a33fafffc1810b85669ea5cd4c12a96589241969b19de2afdbc62412ff3146112d6eb78c1f5da37854a9d70"
inline_for_extraction
let size_test14_exporterSecret: size_nat = 64
let test14_exporterSecret_list : l:list uint8{List.Tot.length l == size_test14_exporterSecret} =
  [@inline_let]
  let l = [
    u8 0x74; u8 0xca; u8 0xb8; u8 0xa6; u8 0xa9;
    u8 0x7f; u8 0xf6; u8 0xc5; u8 0x94; u8 0xbc;
    u8 0x2a; u8 0x4e; u8 0xbf; u8 0x8c; u8 0x82;
    u8 0x41; u8 0xbc; u8 0xe0; u8 0x37; u8 0x83;
    u8 0x9a; u8 0x33; u8 0xfa; u8 0xff; u8 0xfc;
    u8 0x18; u8 0x10; u8 0xb8; u8 0x56; u8 0x69;
    u8 0xea; u8 0x5c; u8 0xd4; u8 0xc1; u8 0x2a;
    u8 0x96; u8 0x58; u8 0x92; u8 0x41; u8 0x96;
    u8 0x9b; u8 0x19; u8 0xde; u8 0x2a; u8 0xfd;
    u8 0xbc; u8 0x62; u8 0x41; u8 0x2f; u8 0xf3;
    u8 0x14; u8 0x61; u8 0x12; u8 0xd6; u8 0xeb;
    u8 0x78; u8 0xc1; u8 0xf5; u8 0xda; u8 0x37;
    u8 0x85; u8 0x4a; u8 0x9d; u8 0x70;
  ] in
  assert_norm(List.Tot.length l == size_test14_exporterSecret);
  l
let test14_exporterSecret : lbytes size_test14_exporterSecret = createL test14_exporterSecret_list

// generated: "436f756e742d30"
inline_for_extraction
let size_test14_encryption0_aad: size_nat = 7
let test14_encryption0_aad_list : l:list uint8{List.Tot.length l == size_test14_encryption0_aad} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x75; u8 0x6e; u8 0x74;
    u8 0x2d; u8 0x30;
  ] in
  assert_norm(List.Tot.length l == size_test14_encryption0_aad);
  l
let test14_encryption0_aad : lbytes size_test14_encryption0_aad = createL test14_encryption0_aad_list

// generated: "a1aa9704d1776db487da0bf6c9bf71bc0562d04f84d221bc430fc6b9666cc7a22a10cf7ef532a6c6532e2af591"
inline_for_extraction
let size_test14_encryption0_ciphertext: size_nat = 45
let test14_encryption0_ciphertext_list : l:list uint8{List.Tot.length l == size_test14_encryption0_ciphertext} =
  [@inline_let]
  let l = [
    u8 0xa1; u8 0xaa; u8 0x97; u8 0x04; u8 0xd1;
    u8 0x77; u8 0x6d; u8 0xb4; u8 0x87; u8 0xda;
    u8 0x0b; u8 0xf6; u8 0xc9; u8 0xbf; u8 0x71;
    u8 0xbc; u8 0x05; u8 0x62; u8 0xd0; u8 0x4f;
    u8 0x84; u8 0xd2; u8 0x21; u8 0xbc; u8 0x43;
    u8 0x0f; u8 0xc6; u8 0xb9; u8 0x66; u8 0x6c;
    u8 0xc7; u8 0xa2; u8 0x2a; u8 0x10; u8 0xcf;
    u8 0x7e; u8 0xf5; u8 0x32; u8 0xa6; u8 0xc6;
    u8 0x53; u8 0x2e; u8 0x2a; u8 0xf5; u8 0x91;
  ] in
  assert_norm(List.Tot.length l == size_test14_encryption0_ciphertext);
  l
let test14_encryption0_ciphertext : lbytes size_test14_encryption0_ciphertext = createL test14_encryption0_ciphertext_list

// generated: "9fb4740ceb08f5e4300421ed"
inline_for_extraction
let size_test14_encryption0_nonce: size_nat = 12
let test14_encryption0_nonce_list : l:list uint8{List.Tot.length l == size_test14_encryption0_nonce} =
  [@inline_let]
  let l = [
    u8 0x9f; u8 0xb4; u8 0x74; u8 0x0c; u8 0xeb;
    u8 0x08; u8 0xf5; u8 0xe4; u8 0x30; u8 0x04;
    u8 0x21; u8 0xed;
  ] in
  assert_norm(List.Tot.length l == size_test14_encryption0_nonce);
  l
let test14_encryption0_nonce : lbytes size_test14_encryption0_nonce = createL test14_encryption0_nonce_list

// generated: "4265617574792069732074727574682c20747275746820626561757479"
inline_for_extraction
let size_test14_encryption0_plaintext: size_nat = 29
let test14_encryption0_plaintext_list : l:list uint8{List.Tot.length l == size_test14_encryption0_plaintext} =
  [@inline_let]
  let l = [
    u8 0x42; u8 0x65; u8 0x61; u8 0x75; u8 0x74;
    u8 0x79; u8 0x20; u8 0x69; u8 0x73; u8 0x20;
    u8 0x74; u8 0x72; u8 0x75; u8 0x74; u8 0x68;
    u8 0x2c; u8 0x20; u8 0x74; u8 0x72; u8 0x75;
    u8 0x74; u8 0x68; u8 0x20; u8 0x62; u8 0x65;
    u8 0x61; u8 0x75; u8 0x74; u8 0x79;
  ] in
  assert_norm(List.Tot.length l == size_test14_encryption0_plaintext);
  l
let test14_encryption0_plaintext : lbytes size_test14_encryption0_plaintext = createL test14_encryption0_plaintext_list

// generated: "436f756e742d31"
inline_for_extraction
let size_test14_encryption1_aad: size_nat = 7
let test14_encryption1_aad_list : l:list uint8{List.Tot.length l == size_test14_encryption1_aad} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x75; u8 0x6e; u8 0x74;
    u8 0x2d; u8 0x31;
  ] in
  assert_norm(List.Tot.length l == size_test14_encryption1_aad);
  l
let test14_encryption1_aad : lbytes size_test14_encryption1_aad = createL test14_encryption1_aad_list

// generated: "fa9516a4d83e811f40d7ba9bca7b2966764aeb044b803f3bdc24a87ecbe12279bf3acd4365c57af51bbb1a030e"
inline_for_extraction
let size_test14_encryption1_ciphertext: size_nat = 45
let test14_encryption1_ciphertext_list : l:list uint8{List.Tot.length l == size_test14_encryption1_ciphertext} =
  [@inline_let]
  let l = [
    u8 0xfa; u8 0x95; u8 0x16; u8 0xa4; u8 0xd8;
    u8 0x3e; u8 0x81; u8 0x1f; u8 0x40; u8 0xd7;
    u8 0xba; u8 0x9b; u8 0xca; u8 0x7b; u8 0x29;
    u8 0x66; u8 0x76; u8 0x4a; u8 0xeb; u8 0x04;
    u8 0x4b; u8 0x80; u8 0x3f; u8 0x3b; u8 0xdc;
    u8 0x24; u8 0xa8; u8 0x7e; u8 0xcb; u8 0xe1;
    u8 0x22; u8 0x79; u8 0xbf; u8 0x3a; u8 0xcd;
    u8 0x43; u8 0x65; u8 0xc5; u8 0x7a; u8 0xf5;
    u8 0x1b; u8 0xbb; u8 0x1a; u8 0x03; u8 0x0e;
  ] in
  assert_norm(List.Tot.length l == size_test14_encryption1_ciphertext);
  l
let test14_encryption1_ciphertext : lbytes size_test14_encryption1_ciphertext = createL test14_encryption1_ciphertext_list

// generated: "9fb4740ceb08f5e4300421ec"
inline_for_extraction
let size_test14_encryption1_nonce: size_nat = 12
let test14_encryption1_nonce_list : l:list uint8{List.Tot.length l == size_test14_encryption1_nonce} =
  [@inline_let]
  let l = [
    u8 0x9f; u8 0xb4; u8 0x74; u8 0x0c; u8 0xeb;
    u8 0x08; u8 0xf5; u8 0xe4; u8 0x30; u8 0x04;
    u8 0x21; u8 0xec;
  ] in
  assert_norm(List.Tot.length l == size_test14_encryption1_nonce);
  l
let test14_encryption1_nonce : lbytes size_test14_encryption1_nonce = createL test14_encryption1_nonce_list

// generated: "4265617574792069732074727574682c20747275746820626561757479"
inline_for_extraction
let size_test14_encryption1_plaintext: size_nat = 29
let test14_encryption1_plaintext_list : l:list uint8{List.Tot.length l == size_test14_encryption1_plaintext} =
  [@inline_let]
  let l = [
    u8 0x42; u8 0x65; u8 0x61; u8 0x75; u8 0x74;
    u8 0x79; u8 0x20; u8 0x69; u8 0x73; u8 0x20;
    u8 0x74; u8 0x72; u8 0x75; u8 0x74; u8 0x68;
    u8 0x2c; u8 0x20; u8 0x74; u8 0x72; u8 0x75;
    u8 0x74; u8 0x68; u8 0x20; u8 0x62; u8 0x65;
    u8 0x61; u8 0x75; u8 0x74; u8 0x79;
  ] in
  assert_norm(List.Tot.length l == size_test14_encryption1_plaintext);
  l
let test14_encryption1_plaintext : lbytes size_test14_encryption1_plaintext = createL test14_encryption1_plaintext_list

// generated: "436f756e742d32"
inline_for_extraction
let size_test14_encryption2_aad: size_nat = 7
let test14_encryption2_aad_list : l:list uint8{List.Tot.length l == size_test14_encryption2_aad} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x75; u8 0x6e; u8 0x74;
    u8 0x2d; u8 0x32;
  ] in
  assert_norm(List.Tot.length l == size_test14_encryption2_aad);
  l
let test14_encryption2_aad : lbytes size_test14_encryption2_aad = createL test14_encryption2_aad_list

// generated: "3e0ad57d2d2ba21fd31db9918bcb63bf4430caefab8c18563ae8ca81e7f168b08bfcababa3f77f22affc5cb239"
inline_for_extraction
let size_test14_encryption2_ciphertext: size_nat = 45
let test14_encryption2_ciphertext_list : l:list uint8{List.Tot.length l == size_test14_encryption2_ciphertext} =
  [@inline_let]
  let l = [
    u8 0x3e; u8 0x0a; u8 0xd5; u8 0x7d; u8 0x2d;
    u8 0x2b; u8 0xa2; u8 0x1f; u8 0xd3; u8 0x1d;
    u8 0xb9; u8 0x91; u8 0x8b; u8 0xcb; u8 0x63;
    u8 0xbf; u8 0x44; u8 0x30; u8 0xca; u8 0xef;
    u8 0xab; u8 0x8c; u8 0x18; u8 0x56; u8 0x3a;
    u8 0xe8; u8 0xca; u8 0x81; u8 0xe7; u8 0xf1;
    u8 0x68; u8 0xb0; u8 0x8b; u8 0xfc; u8 0xab;
    u8 0xab; u8 0xa3; u8 0xf7; u8 0x7f; u8 0x22;
    u8 0xaf; u8 0xfc; u8 0x5c; u8 0xb2; u8 0x39;
  ] in
  assert_norm(List.Tot.length l == size_test14_encryption2_ciphertext);
  l
let test14_encryption2_ciphertext : lbytes size_test14_encryption2_ciphertext = createL test14_encryption2_ciphertext_list

// generated: "9fb4740ceb08f5e4300421ef"
inline_for_extraction
let size_test14_encryption2_nonce: size_nat = 12
let test14_encryption2_nonce_list : l:list uint8{List.Tot.length l == size_test14_encryption2_nonce} =
  [@inline_let]
  let l = [
    u8 0x9f; u8 0xb4; u8 0x74; u8 0x0c; u8 0xeb;
    u8 0x08; u8 0xf5; u8 0xe4; u8 0x30; u8 0x04;
    u8 0x21; u8 0xef;
  ] in
  assert_norm(List.Tot.length l == size_test14_encryption2_nonce);
  l
let test14_encryption2_nonce : lbytes size_test14_encryption2_nonce = createL test14_encryption2_nonce_list

// generated: "4265617574792069732074727574682c20747275746820626561757479"
inline_for_extraction
let size_test14_encryption2_plaintext: size_nat = 29
let test14_encryption2_plaintext_list : l:list uint8{List.Tot.length l == size_test14_encryption2_plaintext} =
  [@inline_let]
  let l = [
    u8 0x42; u8 0x65; u8 0x61; u8 0x75; u8 0x74;
    u8 0x79; u8 0x20; u8 0x69; u8 0x73; u8 0x20;
    u8 0x74; u8 0x72; u8 0x75; u8 0x74; u8 0x68;
    u8 0x2c; u8 0x20; u8 0x74; u8 0x72; u8 0x75;
    u8 0x74; u8 0x68; u8 0x20; u8 0x62; u8 0x65;
    u8 0x61; u8 0x75; u8 0x74; u8 0x79;
  ] in
  assert_norm(List.Tot.length l == size_test14_encryption2_plaintext);
  l
let test14_encryption2_plaintext : lbytes size_test14_encryption2_plaintext = createL test14_encryption2_plaintext_list

// generated: "436f756e742d33"
inline_for_extraction
let size_test14_encryption3_aad: size_nat = 7
let test14_encryption3_aad_list : l:list uint8{List.Tot.length l == size_test14_encryption3_aad} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x75; u8 0x6e; u8 0x74;
    u8 0x2d; u8 0x33;
  ] in
  assert_norm(List.Tot.length l == size_test14_encryption3_aad);
  l
let test14_encryption3_aad : lbytes size_test14_encryption3_aad = createL test14_encryption3_aad_list

// generated: "d8dc6174ccd6dc481a8c85502b1ab3addfd4e03bc599b447564415707d7691bed4f2034749ecfa216c8b6552fd"
inline_for_extraction
let size_test14_encryption3_ciphertext: size_nat = 45
let test14_encryption3_ciphertext_list : l:list uint8{List.Tot.length l == size_test14_encryption3_ciphertext} =
  [@inline_let]
  let l = [
    u8 0xd8; u8 0xdc; u8 0x61; u8 0x74; u8 0xcc;
    u8 0xd6; u8 0xdc; u8 0x48; u8 0x1a; u8 0x8c;
    u8 0x85; u8 0x50; u8 0x2b; u8 0x1a; u8 0xb3;
    u8 0xad; u8 0xdf; u8 0xd4; u8 0xe0; u8 0x3b;
    u8 0xc5; u8 0x99; u8 0xb4; u8 0x47; u8 0x56;
    u8 0x44; u8 0x15; u8 0x70; u8 0x7d; u8 0x76;
    u8 0x91; u8 0xbe; u8 0xd4; u8 0xf2; u8 0x03;
    u8 0x47; u8 0x49; u8 0xec; u8 0xfa; u8 0x21;
    u8 0x6c; u8 0x8b; u8 0x65; u8 0x52; u8 0xfd;
  ] in
  assert_norm(List.Tot.length l == size_test14_encryption3_ciphertext);
  l
let test14_encryption3_ciphertext : lbytes size_test14_encryption3_ciphertext = createL test14_encryption3_ciphertext_list

// generated: "9fb4740ceb08f5e4300421ee"
inline_for_extraction
let size_test14_encryption3_nonce: size_nat = 12
let test14_encryption3_nonce_list : l:list uint8{List.Tot.length l == size_test14_encryption3_nonce} =
  [@inline_let]
  let l = [
    u8 0x9f; u8 0xb4; u8 0x74; u8 0x0c; u8 0xeb;
    u8 0x08; u8 0xf5; u8 0xe4; u8 0x30; u8 0x04;
    u8 0x21; u8 0xee;
  ] in
  assert_norm(List.Tot.length l == size_test14_encryption3_nonce);
  l
let test14_encryption3_nonce : lbytes size_test14_encryption3_nonce = createL test14_encryption3_nonce_list

// generated: "4265617574792069732074727574682c20747275746820626561757479"
inline_for_extraction
let size_test14_encryption3_plaintext: size_nat = 29
let test14_encryption3_plaintext_list : l:list uint8{List.Tot.length l == size_test14_encryption3_plaintext} =
  [@inline_let]
  let l = [
    u8 0x42; u8 0x65; u8 0x61; u8 0x75; u8 0x74;
    u8 0x79; u8 0x20; u8 0x69; u8 0x73; u8 0x20;
    u8 0x74; u8 0x72; u8 0x75; u8 0x74; u8 0x68;
    u8 0x2c; u8 0x20; u8 0x74; u8 0x72; u8 0x75;
    u8 0x74; u8 0x68; u8 0x20; u8 0x62; u8 0x65;
    u8 0x61; u8 0x75; u8 0x74; u8 0x79;
  ] in
  assert_norm(List.Tot.length l == size_test14_encryption3_plaintext);
  l
let test14_encryption3_plaintext : lbytes size_test14_encryption3_plaintext = createL test14_encryption3_plaintext_list

// generated: "436f756e742d34"
inline_for_extraction
let size_test14_encryption4_aad: size_nat = 7
let test14_encryption4_aad_list : l:list uint8{List.Tot.length l == size_test14_encryption4_aad} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x75; u8 0x6e; u8 0x74;
    u8 0x2d; u8 0x34;
  ] in
  assert_norm(List.Tot.length l == size_test14_encryption4_aad);
  l
let test14_encryption4_aad : lbytes size_test14_encryption4_aad = createL test14_encryption4_aad_list

// generated: "fa0a62e8c58d2df1e0c203ae962d49fa1a3e81e12e09ce0a6607f2616793e501bb20f7d68e6be3f9000c6450b1"
inline_for_extraction
let size_test14_encryption4_ciphertext: size_nat = 45
let test14_encryption4_ciphertext_list : l:list uint8{List.Tot.length l == size_test14_encryption4_ciphertext} =
  [@inline_let]
  let l = [
    u8 0xfa; u8 0x0a; u8 0x62; u8 0xe8; u8 0xc5;
    u8 0x8d; u8 0x2d; u8 0xf1; u8 0xe0; u8 0xc2;
    u8 0x03; u8 0xae; u8 0x96; u8 0x2d; u8 0x49;
    u8 0xfa; u8 0x1a; u8 0x3e; u8 0x81; u8 0xe1;
    u8 0x2e; u8 0x09; u8 0xce; u8 0x0a; u8 0x66;
    u8 0x07; u8 0xf2; u8 0x61; u8 0x67; u8 0x93;
    u8 0xe5; u8 0x01; u8 0xbb; u8 0x20; u8 0xf7;
    u8 0xd6; u8 0x8e; u8 0x6b; u8 0xe3; u8 0xf9;
    u8 0x00; u8 0x0c; u8 0x64; u8 0x50; u8 0xb1;
  ] in
  assert_norm(List.Tot.length l == size_test14_encryption4_ciphertext);
  l
let test14_encryption4_ciphertext : lbytes size_test14_encryption4_ciphertext = createL test14_encryption4_ciphertext_list

// generated: "9fb4740ceb08f5e4300421e9"
inline_for_extraction
let size_test14_encryption4_nonce: size_nat = 12
let test14_encryption4_nonce_list : l:list uint8{List.Tot.length l == size_test14_encryption4_nonce} =
  [@inline_let]
  let l = [
    u8 0x9f; u8 0xb4; u8 0x74; u8 0x0c; u8 0xeb;
    u8 0x08; u8 0xf5; u8 0xe4; u8 0x30; u8 0x04;
    u8 0x21; u8 0xe9;
  ] in
  assert_norm(List.Tot.length l == size_test14_encryption4_nonce);
  l
let test14_encryption4_nonce : lbytes size_test14_encryption4_nonce = createL test14_encryption4_nonce_list

// generated: "4265617574792069732074727574682c20747275746820626561757479"
inline_for_extraction
let size_test14_encryption4_plaintext: size_nat = 29
let test14_encryption4_plaintext_list : l:list uint8{List.Tot.length l == size_test14_encryption4_plaintext} =
  [@inline_let]
  let l = [
    u8 0x42; u8 0x65; u8 0x61; u8 0x75; u8 0x74;
    u8 0x79; u8 0x20; u8 0x69; u8 0x73; u8 0x20;
    u8 0x74; u8 0x72; u8 0x75; u8 0x74; u8 0x68;
    u8 0x2c; u8 0x20; u8 0x74; u8 0x72; u8 0x75;
    u8 0x74; u8 0x68; u8 0x20; u8 0x62; u8 0x65;
    u8 0x61; u8 0x75; u8 0x74; u8 0x79;
  ] in
  assert_norm(List.Tot.length l == size_test14_encryption4_plaintext);
  l
let test14_encryption4_plaintext : lbytes size_test14_encryption4_plaintext = createL test14_encryption4_plaintext_list

// generated: "436f756e742d35"
inline_for_extraction
let size_test14_encryption5_aad: size_nat = 7
let test14_encryption5_aad_list : l:list uint8{List.Tot.length l == size_test14_encryption5_aad} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x75; u8 0x6e; u8 0x74;
    u8 0x2d; u8 0x35;
  ] in
  assert_norm(List.Tot.length l == size_test14_encryption5_aad);
  l
let test14_encryption5_aad : lbytes size_test14_encryption5_aad = createL test14_encryption5_aad_list

// generated: "501b62f615df329bb151074f3b64a2d162d3d43bc592f34f8e63460ac12bfda2c0e7ad1670bfdda930748bf701"
inline_for_extraction
let size_test14_encryption5_ciphertext: size_nat = 45
let test14_encryption5_ciphertext_list : l:list uint8{List.Tot.length l == size_test14_encryption5_ciphertext} =
  [@inline_let]
  let l = [
    u8 0x50; u8 0x1b; u8 0x62; u8 0xf6; u8 0x15;
    u8 0xdf; u8 0x32; u8 0x9b; u8 0xb1; u8 0x51;
    u8 0x07; u8 0x4f; u8 0x3b; u8 0x64; u8 0xa2;
    u8 0xd1; u8 0x62; u8 0xd3; u8 0xd4; u8 0x3b;
    u8 0xc5; u8 0x92; u8 0xf3; u8 0x4f; u8 0x8e;
    u8 0x63; u8 0x46; u8 0x0a; u8 0xc1; u8 0x2b;
    u8 0xfd; u8 0xa2; u8 0xc0; u8 0xe7; u8 0xad;
    u8 0x16; u8 0x70; u8 0xbf; u8 0xdd; u8 0xa9;
    u8 0x30; u8 0x74; u8 0x8b; u8 0xf7; u8 0x01;
  ] in
  assert_norm(List.Tot.length l == size_test14_encryption5_ciphertext);
  l
let test14_encryption5_ciphertext : lbytes size_test14_encryption5_ciphertext = createL test14_encryption5_ciphertext_list

// generated: "9fb4740ceb08f5e4300421e8"
inline_for_extraction
let size_test14_encryption5_nonce: size_nat = 12
let test14_encryption5_nonce_list : l:list uint8{List.Tot.length l == size_test14_encryption5_nonce} =
  [@inline_let]
  let l = [
    u8 0x9f; u8 0xb4; u8 0x74; u8 0x0c; u8 0xeb;
    u8 0x08; u8 0xf5; u8 0xe4; u8 0x30; u8 0x04;
    u8 0x21; u8 0xe8;
  ] in
  assert_norm(List.Tot.length l == size_test14_encryption5_nonce);
  l
let test14_encryption5_nonce : lbytes size_test14_encryption5_nonce = createL test14_encryption5_nonce_list

// generated: "4265617574792069732074727574682c20747275746820626561757479"
inline_for_extraction
let size_test14_encryption5_plaintext: size_nat = 29
let test14_encryption5_plaintext_list : l:list uint8{List.Tot.length l == size_test14_encryption5_plaintext} =
  [@inline_let]
  let l = [
    u8 0x42; u8 0x65; u8 0x61; u8 0x75; u8 0x74;
    u8 0x79; u8 0x20; u8 0x69; u8 0x73; u8 0x20;
    u8 0x74; u8 0x72; u8 0x75; u8 0x74; u8 0x68;
    u8 0x2c; u8 0x20; u8 0x74; u8 0x72; u8 0x75;
    u8 0x74; u8 0x68; u8 0x20; u8 0x62; u8 0x65;
    u8 0x61; u8 0x75; u8 0x74; u8 0x79;
  ] in
  assert_norm(List.Tot.length l == size_test14_encryption5_plaintext);
  l
let test14_encryption5_plaintext : lbytes size_test14_encryption5_plaintext = createL test14_encryption5_plaintext_list

// generated: "436f756e742d36"
inline_for_extraction
let size_test14_encryption6_aad: size_nat = 7
let test14_encryption6_aad_list : l:list uint8{List.Tot.length l == size_test14_encryption6_aad} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x75; u8 0x6e; u8 0x74;
    u8 0x2d; u8 0x36;
  ] in
  assert_norm(List.Tot.length l == size_test14_encryption6_aad);
  l
let test14_encryption6_aad : lbytes size_test14_encryption6_aad = createL test14_encryption6_aad_list

// generated: "3256b463eae3e56a0fe0a444644afbeb66af5bedb38cba7cc8c63e7ef7ab6f292fe58123d09a85c52f8a85dc99"
inline_for_extraction
let size_test14_encryption6_ciphertext: size_nat = 45
let test14_encryption6_ciphertext_list : l:list uint8{List.Tot.length l == size_test14_encryption6_ciphertext} =
  [@inline_let]
  let l = [
    u8 0x32; u8 0x56; u8 0xb4; u8 0x63; u8 0xea;
    u8 0xe3; u8 0xe5; u8 0x6a; u8 0x0f; u8 0xe0;
    u8 0xa4; u8 0x44; u8 0x64; u8 0x4a; u8 0xfb;
    u8 0xeb; u8 0x66; u8 0xaf; u8 0x5b; u8 0xed;
    u8 0xb3; u8 0x8c; u8 0xba; u8 0x7c; u8 0xc8;
    u8 0xc6; u8 0x3e; u8 0x7e; u8 0xf7; u8 0xab;
    u8 0x6f; u8 0x29; u8 0x2f; u8 0xe5; u8 0x81;
    u8 0x23; u8 0xd0; u8 0x9a; u8 0x85; u8 0xc5;
    u8 0x2f; u8 0x8a; u8 0x85; u8 0xdc; u8 0x99;
  ] in
  assert_norm(List.Tot.length l == size_test14_encryption6_ciphertext);
  l
let test14_encryption6_ciphertext : lbytes size_test14_encryption6_ciphertext = createL test14_encryption6_ciphertext_list

// generated: "9fb4740ceb08f5e4300421eb"
inline_for_extraction
let size_test14_encryption6_nonce: size_nat = 12
let test14_encryption6_nonce_list : l:list uint8{List.Tot.length l == size_test14_encryption6_nonce} =
  [@inline_let]
  let l = [
    u8 0x9f; u8 0xb4; u8 0x74; u8 0x0c; u8 0xeb;
    u8 0x08; u8 0xf5; u8 0xe4; u8 0x30; u8 0x04;
    u8 0x21; u8 0xeb;
  ] in
  assert_norm(List.Tot.length l == size_test14_encryption6_nonce);
  l
let test14_encryption6_nonce : lbytes size_test14_encryption6_nonce = createL test14_encryption6_nonce_list

// generated: "4265617574792069732074727574682c20747275746820626561757479"
inline_for_extraction
let size_test14_encryption6_plaintext: size_nat = 29
let test14_encryption6_plaintext_list : l:list uint8{List.Tot.length l == size_test14_encryption6_plaintext} =
  [@inline_let]
  let l = [
    u8 0x42; u8 0x65; u8 0x61; u8 0x75; u8 0x74;
    u8 0x79; u8 0x20; u8 0x69; u8 0x73; u8 0x20;
    u8 0x74; u8 0x72; u8 0x75; u8 0x74; u8 0x68;
    u8 0x2c; u8 0x20; u8 0x74; u8 0x72; u8 0x75;
    u8 0x74; u8 0x68; u8 0x20; u8 0x62; u8 0x65;
    u8 0x61; u8 0x75; u8 0x74; u8 0x79;
  ] in
  assert_norm(List.Tot.length l == size_test14_encryption6_plaintext);
  l
let test14_encryption6_plaintext : lbytes size_test14_encryption6_plaintext = createL test14_encryption6_plaintext_list

// generated: "436f756e742d37"
inline_for_extraction
let size_test14_encryption7_aad: size_nat = 7
let test14_encryption7_aad_list : l:list uint8{List.Tot.length l == size_test14_encryption7_aad} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x75; u8 0x6e; u8 0x74;
    u8 0x2d; u8 0x37;
  ] in
  assert_norm(List.Tot.length l == size_test14_encryption7_aad);
  l
let test14_encryption7_aad : lbytes size_test14_encryption7_aad = createL test14_encryption7_aad_list

// generated: "f3c2c8732daecc57f8d482ae32849d294b4257928ba5a38c8545e8dbe786476eabed0a2c5a8f707a93e3ff559b"
inline_for_extraction
let size_test14_encryption7_ciphertext: size_nat = 45
let test14_encryption7_ciphertext_list : l:list uint8{List.Tot.length l == size_test14_encryption7_ciphertext} =
  [@inline_let]
  let l = [
    u8 0xf3; u8 0xc2; u8 0xc8; u8 0x73; u8 0x2d;
    u8 0xae; u8 0xcc; u8 0x57; u8 0xf8; u8 0xd4;
    u8 0x82; u8 0xae; u8 0x32; u8 0x84; u8 0x9d;
    u8 0x29; u8 0x4b; u8 0x42; u8 0x57; u8 0x92;
    u8 0x8b; u8 0xa5; u8 0xa3; u8 0x8c; u8 0x85;
    u8 0x45; u8 0xe8; u8 0xdb; u8 0xe7; u8 0x86;
    u8 0x47; u8 0x6e; u8 0xab; u8 0xed; u8 0x0a;
    u8 0x2c; u8 0x5a; u8 0x8f; u8 0x70; u8 0x7a;
    u8 0x93; u8 0xe3; u8 0xff; u8 0x55; u8 0x9b;
  ] in
  assert_norm(List.Tot.length l == size_test14_encryption7_ciphertext);
  l
let test14_encryption7_ciphertext : lbytes size_test14_encryption7_ciphertext = createL test14_encryption7_ciphertext_list

// generated: "9fb4740ceb08f5e4300421ea"
inline_for_extraction
let size_test14_encryption7_nonce: size_nat = 12
let test14_encryption7_nonce_list : l:list uint8{List.Tot.length l == size_test14_encryption7_nonce} =
  [@inline_let]
  let l = [
    u8 0x9f; u8 0xb4; u8 0x74; u8 0x0c; u8 0xeb;
    u8 0x08; u8 0xf5; u8 0xe4; u8 0x30; u8 0x04;
    u8 0x21; u8 0xea;
  ] in
  assert_norm(List.Tot.length l == size_test14_encryption7_nonce);
  l
let test14_encryption7_nonce : lbytes size_test14_encryption7_nonce = createL test14_encryption7_nonce_list

// generated: "4265617574792069732074727574682c20747275746820626561757479"
inline_for_extraction
let size_test14_encryption7_plaintext: size_nat = 29
let test14_encryption7_plaintext_list : l:list uint8{List.Tot.length l == size_test14_encryption7_plaintext} =
  [@inline_let]
  let l = [
    u8 0x42; u8 0x65; u8 0x61; u8 0x75; u8 0x74;
    u8 0x79; u8 0x20; u8 0x69; u8 0x73; u8 0x20;
    u8 0x74; u8 0x72; u8 0x75; u8 0x74; u8 0x68;
    u8 0x2c; u8 0x20; u8 0x74; u8 0x72; u8 0x75;
    u8 0x74; u8 0x68; u8 0x20; u8 0x62; u8 0x65;
    u8 0x61; u8 0x75; u8 0x74; u8 0x79;
  ] in
  assert_norm(List.Tot.length l == size_test14_encryption7_plaintext);
  l
let test14_encryption7_plaintext : lbytes size_test14_encryption7_plaintext = createL test14_encryption7_plaintext_list

// generated: "436f756e742d38"
inline_for_extraction
let size_test14_encryption8_aad: size_nat = 7
let test14_encryption8_aad_list : l:list uint8{List.Tot.length l == size_test14_encryption8_aad} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x75; u8 0x6e; u8 0x74;
    u8 0x2d; u8 0x38;
  ] in
  assert_norm(List.Tot.length l == size_test14_encryption8_aad);
  l
let test14_encryption8_aad : lbytes size_test14_encryption8_aad = createL test14_encryption8_aad_list

// generated: "7a323d65496f0c444f04d24834a9029dfe8a82fa5a2b174146595d133ae9aa9c681d7dc605fda0b3e71d8d2b16"
inline_for_extraction
let size_test14_encryption8_ciphertext: size_nat = 45
let test14_encryption8_ciphertext_list : l:list uint8{List.Tot.length l == size_test14_encryption8_ciphertext} =
  [@inline_let]
  let l = [
    u8 0x7a; u8 0x32; u8 0x3d; u8 0x65; u8 0x49;
    u8 0x6f; u8 0x0c; u8 0x44; u8 0x4f; u8 0x04;
    u8 0xd2; u8 0x48; u8 0x34; u8 0xa9; u8 0x02;
    u8 0x9d; u8 0xfe; u8 0x8a; u8 0x82; u8 0xfa;
    u8 0x5a; u8 0x2b; u8 0x17; u8 0x41; u8 0x46;
    u8 0x59; u8 0x5d; u8 0x13; u8 0x3a; u8 0xe9;
    u8 0xaa; u8 0x9c; u8 0x68; u8 0x1d; u8 0x7d;
    u8 0xc6; u8 0x05; u8 0xfd; u8 0xa0; u8 0xb3;
    u8 0xe7; u8 0x1d; u8 0x8d; u8 0x2b; u8 0x16;
  ] in
  assert_norm(List.Tot.length l == size_test14_encryption8_ciphertext);
  l
let test14_encryption8_ciphertext : lbytes size_test14_encryption8_ciphertext = createL test14_encryption8_ciphertext_list

// generated: "9fb4740ceb08f5e4300421e5"
inline_for_extraction
let size_test14_encryption8_nonce: size_nat = 12
let test14_encryption8_nonce_list : l:list uint8{List.Tot.length l == size_test14_encryption8_nonce} =
  [@inline_let]
  let l = [
    u8 0x9f; u8 0xb4; u8 0x74; u8 0x0c; u8 0xeb;
    u8 0x08; u8 0xf5; u8 0xe4; u8 0x30; u8 0x04;
    u8 0x21; u8 0xe5;
  ] in
  assert_norm(List.Tot.length l == size_test14_encryption8_nonce);
  l
let test14_encryption8_nonce : lbytes size_test14_encryption8_nonce = createL test14_encryption8_nonce_list

// generated: "4265617574792069732074727574682c20747275746820626561757479"
inline_for_extraction
let size_test14_encryption8_plaintext: size_nat = 29
let test14_encryption8_plaintext_list : l:list uint8{List.Tot.length l == size_test14_encryption8_plaintext} =
  [@inline_let]
  let l = [
    u8 0x42; u8 0x65; u8 0x61; u8 0x75; u8 0x74;
    u8 0x79; u8 0x20; u8 0x69; u8 0x73; u8 0x20;
    u8 0x74; u8 0x72; u8 0x75; u8 0x74; u8 0x68;
    u8 0x2c; u8 0x20; u8 0x74; u8 0x72; u8 0x75;
    u8 0x74; u8 0x68; u8 0x20; u8 0x62; u8 0x65;
    u8 0x61; u8 0x75; u8 0x74; u8 0x79;
  ] in
  assert_norm(List.Tot.length l == size_test14_encryption8_plaintext);
  l
let test14_encryption8_plaintext : lbytes size_test14_encryption8_plaintext = createL test14_encryption8_plaintext_list

// generated: "436f756e742d39"
inline_for_extraction
let size_test14_encryption9_aad: size_nat = 7
let test14_encryption9_aad_list : l:list uint8{List.Tot.length l == size_test14_encryption9_aad} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x75; u8 0x6e; u8 0x74;
    u8 0x2d; u8 0x39;
  ] in
  assert_norm(List.Tot.length l == size_test14_encryption9_aad);
  l
let test14_encryption9_aad : lbytes size_test14_encryption9_aad = createL test14_encryption9_aad_list

// generated: "e7e9557d14aff8acbc7dbef77200f5bd20dee9a30a44511b7b39cf6647d981140b5db94be00ef96f6c66def8df"
inline_for_extraction
let size_test14_encryption9_ciphertext: size_nat = 45
let test14_encryption9_ciphertext_list : l:list uint8{List.Tot.length l == size_test14_encryption9_ciphertext} =
  [@inline_let]
  let l = [
    u8 0xe7; u8 0xe9; u8 0x55; u8 0x7d; u8 0x14;
    u8 0xaf; u8 0xf8; u8 0xac; u8 0xbc; u8 0x7d;
    u8 0xbe; u8 0xf7; u8 0x72; u8 0x00; u8 0xf5;
    u8 0xbd; u8 0x20; u8 0xde; u8 0xe9; u8 0xa3;
    u8 0x0a; u8 0x44; u8 0x51; u8 0x1b; u8 0x7b;
    u8 0x39; u8 0xcf; u8 0x66; u8 0x47; u8 0xd9;
    u8 0x81; u8 0x14; u8 0x0b; u8 0x5d; u8 0xb9;
    u8 0x4b; u8 0xe0; u8 0x0e; u8 0xf9; u8 0x6f;
    u8 0x6c; u8 0x66; u8 0xde; u8 0xf8; u8 0xdf;
  ] in
  assert_norm(List.Tot.length l == size_test14_encryption9_ciphertext);
  l
let test14_encryption9_ciphertext : lbytes size_test14_encryption9_ciphertext = createL test14_encryption9_ciphertext_list

// generated: "9fb4740ceb08f5e4300421e4"
inline_for_extraction
let size_test14_encryption9_nonce: size_nat = 12
let test14_encryption9_nonce_list : l:list uint8{List.Tot.length l == size_test14_encryption9_nonce} =
  [@inline_let]
  let l = [
    u8 0x9f; u8 0xb4; u8 0x74; u8 0x0c; u8 0xeb;
    u8 0x08; u8 0xf5; u8 0xe4; u8 0x30; u8 0x04;
    u8 0x21; u8 0xe4;
  ] in
  assert_norm(List.Tot.length l == size_test14_encryption9_nonce);
  l
let test14_encryption9_nonce : lbytes size_test14_encryption9_nonce = createL test14_encryption9_nonce_list

// generated: "4265617574792069732074727574682c20747275746820626561757479"
inline_for_extraction
let size_test14_encryption9_plaintext: size_nat = 29
let test14_encryption9_plaintext_list : l:list uint8{List.Tot.length l == size_test14_encryption9_plaintext} =
  [@inline_let]
  let l = [
    u8 0x42; u8 0x65; u8 0x61; u8 0x75; u8 0x74;
    u8 0x79; u8 0x20; u8 0x69; u8 0x73; u8 0x20;
    u8 0x74; u8 0x72; u8 0x75; u8 0x74; u8 0x68;
    u8 0x2c; u8 0x20; u8 0x74; u8 0x72; u8 0x75;
    u8 0x74; u8 0x68; u8 0x20; u8 0x62; u8 0x65;
    u8 0x61; u8 0x75; u8 0x74; u8 0x79;
  ] in
  assert_norm(List.Tot.length l == size_test14_encryption9_plaintext);
  l
let test14_encryption9_plaintext : lbytes size_test14_encryption9_plaintext = createL test14_encryption9_plaintext_list

// generated: "436f6e746578742d30"
inline_for_extraction
let size_test14_export0_exportContext: size_nat = 9
let test14_export0_exportContext_list : l:list uint8{List.Tot.length l == size_test14_export0_exportContext} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x6e; u8 0x74; u8 0x65;
    u8 0x78; u8 0x74; u8 0x2d; u8 0x30;
  ] in
  assert_norm(List.Tot.length l == size_test14_export0_exportContext);
  l
let test14_export0_exportContext : lbytes size_test14_export0_exportContext = createL test14_export0_exportContext_list

// generated: "55a15ca30623b8f8c2bab472648e7e5bf19ae1dd15951b65a6f995e95dafb266"
inline_for_extraction
let size_test14_export0_exportValue: size_nat = 32
let test14_export0_exportValue_list : l:list uint8{List.Tot.length l == size_test14_export0_exportValue} =
  [@inline_let]
  let l = [
    u8 0x55; u8 0xa1; u8 0x5c; u8 0xa3; u8 0x06;
    u8 0x23; u8 0xb8; u8 0xf8; u8 0xc2; u8 0xba;
    u8 0xb4; u8 0x72; u8 0x64; u8 0x8e; u8 0x7e;
    u8 0x5b; u8 0xf1; u8 0x9a; u8 0xe1; u8 0xdd;
    u8 0x15; u8 0x95; u8 0x1b; u8 0x65; u8 0xa6;
    u8 0xf9; u8 0x95; u8 0xe9; u8 0x5d; u8 0xaf;
    u8 0xb2; u8 0x66;
  ] in
  assert_norm(List.Tot.length l == size_test14_export0_exportValue);
  l
let test14_export0_exportValue : lbytes size_test14_export0_exportValue = createL test14_export0_exportValue_list

let test14_export0_len:size_nat = 32
// generated: "436f6e746578742d31"
inline_for_extraction
let size_test14_export1_exportContext: size_nat = 9
let test14_export1_exportContext_list : l:list uint8{List.Tot.length l == size_test14_export1_exportContext} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x6e; u8 0x74; u8 0x65;
    u8 0x78; u8 0x74; u8 0x2d; u8 0x31;
  ] in
  assert_norm(List.Tot.length l == size_test14_export1_exportContext);
  l
let test14_export1_exportContext : lbytes size_test14_export1_exportContext = createL test14_export1_exportContext_list

// generated: "27c8a81cf30b55f2697ae9eaf6f86355dcecb0ec32fd2134f8aaf5e7d611227a"
inline_for_extraction
let size_test14_export1_exportValue: size_nat = 32
let test14_export1_exportValue_list : l:list uint8{List.Tot.length l == size_test14_export1_exportValue} =
  [@inline_let]
  let l = [
    u8 0x27; u8 0xc8; u8 0xa8; u8 0x1c; u8 0xf3;
    u8 0x0b; u8 0x55; u8 0xf2; u8 0x69; u8 0x7a;
    u8 0xe9; u8 0xea; u8 0xf6; u8 0xf8; u8 0x63;
    u8 0x55; u8 0xdc; u8 0xec; u8 0xb0; u8 0xec;
    u8 0x32; u8 0xfd; u8 0x21; u8 0x34; u8 0xf8;
    u8 0xaa; u8 0xf5; u8 0xe7; u8 0xd6; u8 0x11;
    u8 0x22; u8 0x7a;
  ] in
  assert_norm(List.Tot.length l == size_test14_export1_exportValue);
  l
let test14_export1_exportValue : lbytes size_test14_export1_exportValue = createL test14_export1_exportValue_list

let test14_export1_len:size_nat = 32
// generated: "436f6e746578742d32"
inline_for_extraction
let size_test14_export2_exportContext: size_nat = 9
let test14_export2_exportContext_list : l:list uint8{List.Tot.length l == size_test14_export2_exportContext} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x6e; u8 0x74; u8 0x65;
    u8 0x78; u8 0x74; u8 0x2d; u8 0x32;
  ] in
  assert_norm(List.Tot.length l == size_test14_export2_exportContext);
  l
let test14_export2_exportContext : lbytes size_test14_export2_exportContext = createL test14_export2_exportContext_list

// generated: "fe045c82e5d5b96926ba4e9e6dd78c2aeb01a51bf24ffa8aea1280b27fd7af5e"
inline_for_extraction
let size_test14_export2_exportValue: size_nat = 32
let test14_export2_exportValue_list : l:list uint8{List.Tot.length l == size_test14_export2_exportValue} =
  [@inline_let]
  let l = [
    u8 0xfe; u8 0x04; u8 0x5c; u8 0x82; u8 0xe5;
    u8 0xd5; u8 0xb9; u8 0x69; u8 0x26; u8 0xba;
    u8 0x4e; u8 0x9e; u8 0x6d; u8 0xd7; u8 0x8c;
    u8 0x2a; u8 0xeb; u8 0x01; u8 0xa5; u8 0x1b;
    u8 0xf2; u8 0x4f; u8 0xfa; u8 0x8a; u8 0xea;
    u8 0x12; u8 0x80; u8 0xb2; u8 0x7f; u8 0xd7;
    u8 0xaf; u8 0x5e;
  ] in
  assert_norm(List.Tot.length l == size_test14_export2_exportValue);
  l
let test14_export2_exportValue : lbytes size_test14_export2_exportValue = createL test14_export2_exportValue_list

let test14_export2_len:size_nat = 32
// generated: "436f6e746578742d33"
inline_for_extraction
let size_test14_export3_exportContext: size_nat = 9
let test14_export3_exportContext_list : l:list uint8{List.Tot.length l == size_test14_export3_exportContext} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x6e; u8 0x74; u8 0x65;
    u8 0x78; u8 0x74; u8 0x2d; u8 0x33;
  ] in
  assert_norm(List.Tot.length l == size_test14_export3_exportContext);
  l
let test14_export3_exportContext : lbytes size_test14_export3_exportContext = createL test14_export3_exportContext_list

// generated: "34ee0e328cb270d3c273b05223aec38ff9eda790f769c1108da5db18bd1253da"
inline_for_extraction
let size_test14_export3_exportValue: size_nat = 32
let test14_export3_exportValue_list : l:list uint8{List.Tot.length l == size_test14_export3_exportValue} =
  [@inline_let]
  let l = [
    u8 0x34; u8 0xee; u8 0x0e; u8 0x32; u8 0x8c;
    u8 0xb2; u8 0x70; u8 0xd3; u8 0xc2; u8 0x73;
    u8 0xb0; u8 0x52; u8 0x23; u8 0xae; u8 0xc3;
    u8 0x8f; u8 0xf9; u8 0xed; u8 0xa7; u8 0x90;
    u8 0xf7; u8 0x69; u8 0xc1; u8 0x10; u8 0x8d;
    u8 0xa5; u8 0xdb; u8 0x18; u8 0xbd; u8 0x12;
    u8 0x53; u8 0xda;
  ] in
  assert_norm(List.Tot.length l == size_test14_export3_exportValue);
  l
let test14_export3_exportValue : lbytes size_test14_export3_exportValue = createL test14_export3_exportValue_list

let test14_export3_len:size_nat = 32
// generated: "436f6e746578742d34"
inline_for_extraction
let size_test14_export4_exportContext: size_nat = 9
let test14_export4_exportContext_list : l:list uint8{List.Tot.length l == size_test14_export4_exportContext} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x6e; u8 0x74; u8 0x65;
    u8 0x78; u8 0x74; u8 0x2d; u8 0x34;
  ] in
  assert_norm(List.Tot.length l == size_test14_export4_exportContext);
  l
let test14_export4_exportContext : lbytes size_test14_export4_exportContext = createL test14_export4_exportContext_list

// generated: "258cf23484e170fb2864dd0b34bba27457e77325ab64b5188a04823a0877d208"
inline_for_extraction
let size_test14_export4_exportValue: size_nat = 32
let test14_export4_exportValue_list : l:list uint8{List.Tot.length l == size_test14_export4_exportValue} =
  [@inline_let]
  let l = [
    u8 0x25; u8 0x8c; u8 0xf2; u8 0x34; u8 0x84;
    u8 0xe1; u8 0x70; u8 0xfb; u8 0x28; u8 0x64;
    u8 0xdd; u8 0x0b; u8 0x34; u8 0xbb; u8 0xa2;
    u8 0x74; u8 0x57; u8 0xe7; u8 0x73; u8 0x25;
    u8 0xab; u8 0x64; u8 0xb5; u8 0x18; u8 0x8a;
    u8 0x04; u8 0x82; u8 0x3a; u8 0x08; u8 0x77;
    u8 0xd2; u8 0x08;
  ] in
  assert_norm(List.Tot.length l == size_test14_export4_exportValue);
  l
let test14_export4_exportValue : lbytes size_test14_export4_exportValue = createL test14_export4_exportValue_list

let test14_export4_len:size_nat = 32

let test14 () =
  let res = test_setupBase test14_ciphersuite test14_skEm test14_pkEm test14_skRm test14_pkRm test14_info test14_enc test14_zz test14_key_schedule_context test14_secret test14_key test14_nonce test14_exporterSecret test14_encryption0_nonce test14_encryption1_nonce in
  let seq0:HPKE.seq_aead_s test14_ciphersuite = 0 in
  let enc_res0 = test_encryption test14_ciphersuite test14_key test14_nonce test14_exporterSecret test14_encryption0_aad test14_encryption0_plaintext seq0 test14_encryption0_ciphertext test14_encryption0_nonce in

  assert_norm (1 < pow2 (8 * 12));
  let seq1:HPKE.seq_aead_s test14_ciphersuite = (seq0 + 1) in
  let enc_res1 = test_encryption test14_ciphersuite test14_key test14_nonce test14_exporterSecret test14_encryption1_aad test14_encryption1_plaintext seq1 test14_encryption1_ciphertext test14_encryption1_nonce in

  assert_norm (2 < pow2 (8 * 12));
  let seq2:HPKE.seq_aead_s test14_ciphersuite = (seq1 + 1) in
  let enc_res2 = test_encryption test14_ciphersuite test14_key test14_nonce test14_exporterSecret test14_encryption2_aad test14_encryption2_plaintext 2 test14_encryption2_ciphertext test14_encryption2_nonce in

  assert_norm (3 < pow2 (8 * 12));
  let seq3:HPKE.seq_aead_s test14_ciphersuite = (seq2 + 1) in
  let enc_res3 = test_encryption test14_ciphersuite test14_key test14_nonce test14_exporterSecret test14_encryption3_aad test14_encryption3_plaintext 3 test14_encryption3_ciphertext test14_encryption3_nonce in

  assert_norm (4 < pow2 (8 * 12));
  let seq4:HPKE.seq_aead_s test14_ciphersuite = (seq3 + 1) in
  let enc_res4 = test_encryption test14_ciphersuite test14_key test14_nonce test14_exporterSecret test14_encryption4_aad test14_encryption4_plaintext 4 test14_encryption4_ciphertext test14_encryption4_nonce in

  assert_norm (5 < pow2 (8 * 12));
  let seq5:HPKE.seq_aead_s test14_ciphersuite = (seq4 + 1) in
  let enc_res5 = test_encryption test14_ciphersuite test14_key test14_nonce test14_exporterSecret test14_encryption5_aad test14_encryption5_plaintext 5 test14_encryption5_ciphertext test14_encryption5_nonce in

  assert_norm (6 < pow2 (8 * 12));
  let seq6:HPKE.seq_aead_s test14_ciphersuite = (seq5 + 1) in
  let enc_res6 = test_encryption test14_ciphersuite test14_key test14_nonce test14_exporterSecret test14_encryption6_aad test14_encryption6_plaintext 6 test14_encryption6_ciphertext test14_encryption6_nonce in

  assert_norm (7 < pow2 (8 * 12));
  let seq7:HPKE.seq_aead_s test14_ciphersuite = (seq6 + 1) in
  let enc_res7 = test_encryption test14_ciphersuite test14_key test14_nonce test14_exporterSecret test14_encryption7_aad test14_encryption7_plaintext 7 test14_encryption7_ciphertext test14_encryption7_nonce in

  assert_norm (8 < pow2 (8 * 12));
  let seq8:HPKE.seq_aead_s test14_ciphersuite = (seq7 + 1) in
  let enc_res8 = test_encryption test14_ciphersuite test14_key test14_nonce test14_exporterSecret test14_encryption8_aad test14_encryption8_plaintext 8 test14_encryption8_ciphertext test14_encryption8_nonce in

  assert_norm (9 < pow2 (8 * 12));
  let seq9:HPKE.seq_aead_s test14_ciphersuite = (seq8 + 1) in
  let enc_res9 = test_encryption test14_ciphersuite test14_key test14_nonce test14_exporterSecret test14_encryption9_aad test14_encryption9_plaintext 9 test14_encryption9_ciphertext test14_encryption9_nonce in

  let exp_res0 = test_export test14_ciphersuite test14_key test14_nonce test14_exporterSecret test14_export0_exportContext test14_export0_len test14_export0_exportValue in

  let exp_res1 = test_export test14_ciphersuite test14_key test14_nonce test14_exporterSecret test14_export1_exportContext test14_export1_len test14_export1_exportValue in

  let exp_res2 = test_export test14_ciphersuite test14_key test14_nonce test14_exporterSecret test14_export2_exportContext test14_export2_len test14_export2_exportValue in

  let exp_res3 = test_export test14_ciphersuite test14_key test14_nonce test14_exporterSecret test14_export3_exportContext test14_export3_len test14_export3_exportValue in

  let exp_res4 = test_export test14_ciphersuite test14_key test14_nonce test14_exporterSecret test14_export4_exportContext test14_export4_len test14_export4_exportValue in

  enc_res0 && enc_res1 && enc_res2 && enc_res3 && enc_res4 && enc_res5 && enc_res6 && enc_res7 && enc_res8 && enc_res9 && res && exp_res0 && exp_res1 && exp_res2 && exp_res3 && exp_res4


// Skipped unsupported test case 15

let test16_mode: HPKE.mode = HPKE.Base
let test16_ciphersuite = DH.DH_Curve25519, Hash.SHA2_256, AEAD.AES256_GCM, Hash.SHA2_512

// generated: "4f6465206f6e2061204772656369616e2055726e"
inline_for_extraction
let size_test16_info: size_nat = 20
let test16_info_list : l:list uint8{List.Tot.length l == size_test16_info} =
  [@inline_let]
  let l = [
    u8 0x4f; u8 0x64; u8 0x65; u8 0x20; u8 0x6f;
    u8 0x6e; u8 0x20; u8 0x61; u8 0x20; u8 0x47;
    u8 0x72; u8 0x65; u8 0x63; u8 0x69; u8 0x61;
    u8 0x6e; u8 0x20; u8 0x55; u8 0x72; u8 0x6e;
  ] in
  assert_norm(List.Tot.length l == size_test16_info);
  l
let test16_info : lbytes size_test16_info = createL test16_info_list

// generated: "1fe49e70e374eff4f67dcb46e2cdf7c5620c7f839c474f0773c5d7e56502c976"
inline_for_extraction
let size_test16_skRm: size_nat = 32
let test16_skRm_list : l:list uint8{List.Tot.length l == size_test16_skRm} =
  [@inline_let]
  let l = [
    u8 0x1f; u8 0xe4; u8 0x9e; u8 0x70; u8 0xe3;
    u8 0x74; u8 0xef; u8 0xf4; u8 0xf6; u8 0x7d;
    u8 0xcb; u8 0x46; u8 0xe2; u8 0xcd; u8 0xf7;
    u8 0xc5; u8 0x62; u8 0x0c; u8 0x7f; u8 0x83;
    u8 0x9c; u8 0x47; u8 0x4f; u8 0x07; u8 0x73;
    u8 0xc5; u8 0xd7; u8 0xe5; u8 0x65; u8 0x02;
    u8 0xc9; u8 0x76;
  ] in
  assert_norm(List.Tot.length l == size_test16_skRm);
  l
let test16_skRm : lbytes size_test16_skRm = createL test16_skRm_list

// generated: "61f543f8a7aa9d71c222a7704331c691e4ec816bc79b838e42b844f11c048f15"
inline_for_extraction
let size_test16_skEm: size_nat = 32
let test16_skEm_list : l:list uint8{List.Tot.length l == size_test16_skEm} =
  [@inline_let]
  let l = [
    u8 0x61; u8 0xf5; u8 0x43; u8 0xf8; u8 0xa7;
    u8 0xaa; u8 0x9d; u8 0x71; u8 0xc2; u8 0x22;
    u8 0xa7; u8 0x70; u8 0x43; u8 0x31; u8 0xc6;
    u8 0x91; u8 0xe4; u8 0xec; u8 0x81; u8 0x6b;
    u8 0xc7; u8 0x9b; u8 0x83; u8 0x8e; u8 0x42;
    u8 0xb8; u8 0x44; u8 0xf1; u8 0x1c; u8 0x04;
    u8 0x8f; u8 0x15;
  ] in
  assert_norm(List.Tot.length l == size_test16_skEm);
  l
let test16_skEm : lbytes size_test16_skEm = createL test16_skEm_list

// generated: "4937cb375f0196ab4db1c55bb6d346279b8f5455a6576cc0c26b14090b008b01"
inline_for_extraction
let size_test16_pkRm: size_nat = 32
let test16_pkRm_list : l:list uint8{List.Tot.length l == size_test16_pkRm} =
  [@inline_let]
  let l = [
    u8 0x49; u8 0x37; u8 0xcb; u8 0x37; u8 0x5f;
    u8 0x01; u8 0x96; u8 0xab; u8 0x4d; u8 0xb1;
    u8 0xc5; u8 0x5b; u8 0xb6; u8 0xd3; u8 0x46;
    u8 0x27; u8 0x9b; u8 0x8f; u8 0x54; u8 0x55;
    u8 0xa6; u8 0x57; u8 0x6c; u8 0xc0; u8 0xc2;
    u8 0x6b; u8 0x14; u8 0x09; u8 0x0b; u8 0x00;
    u8 0x8b; u8 0x01;
  ] in
  assert_norm(List.Tot.length l == size_test16_pkRm);
  l
let test16_pkRm : lbytes size_test16_pkRm = createL test16_pkRm_list

// generated: "eeab32e002ed152db080f2ca9847c52a04766c30ecd65826f37055c8d7d9db1d"
inline_for_extraction
let size_test16_pkEm: size_nat = 32
let test16_pkEm_list : l:list uint8{List.Tot.length l == size_test16_pkEm} =
  [@inline_let]
  let l = [
    u8 0xee; u8 0xab; u8 0x32; u8 0xe0; u8 0x02;
    u8 0xed; u8 0x15; u8 0x2d; u8 0xb0; u8 0x80;
    u8 0xf2; u8 0xca; u8 0x98; u8 0x47; u8 0xc5;
    u8 0x2a; u8 0x04; u8 0x76; u8 0x6c; u8 0x30;
    u8 0xec; u8 0xd6; u8 0x58; u8 0x26; u8 0xf3;
    u8 0x70; u8 0x55; u8 0xc8; u8 0xd7; u8 0xd9;
    u8 0xdb; u8 0x1d;
  ] in
  assert_norm(List.Tot.length l == size_test16_pkEm);
  l
let test16_pkEm : lbytes size_test16_pkEm = createL test16_pkEm_list

// generated: "eeab32e002ed152db080f2ca9847c52a04766c30ecd65826f37055c8d7d9db1d"
inline_for_extraction
let size_test16_enc: size_nat = 32
let test16_enc_list : l:list uint8{List.Tot.length l == size_test16_enc} =
  [@inline_let]
  let l = [
    u8 0xee; u8 0xab; u8 0x32; u8 0xe0; u8 0x02;
    u8 0xed; u8 0x15; u8 0x2d; u8 0xb0; u8 0x80;
    u8 0xf2; u8 0xca; u8 0x98; u8 0x47; u8 0xc5;
    u8 0x2a; u8 0x04; u8 0x76; u8 0x6c; u8 0x30;
    u8 0xec; u8 0xd6; u8 0x58; u8 0x26; u8 0xf3;
    u8 0x70; u8 0x55; u8 0xc8; u8 0xd7; u8 0xd9;
    u8 0xdb; u8 0x1d;
  ] in
  assert_norm(List.Tot.length l == size_test16_enc);
  l
let test16_enc : lbytes size_test16_enc = createL test16_enc_list

// generated: "2a0f6e12b567e634c82316f9a8fd86f50d80f4fe9769774698e3bd1d43f6d734"
inline_for_extraction
let size_test16_zz: size_nat = 32
let test16_zz_list : l:list uint8{List.Tot.length l == size_test16_zz} =
  [@inline_let]
  let l = [
    u8 0x2a; u8 0x0f; u8 0x6e; u8 0x12; u8 0xb5;
    u8 0x67; u8 0xe6; u8 0x34; u8 0xc8; u8 0x23;
    u8 0x16; u8 0xf9; u8 0xa8; u8 0xfd; u8 0x86;
    u8 0xf5; u8 0x0d; u8 0x80; u8 0xf4; u8 0xfe;
    u8 0x97; u8 0x69; u8 0x77; u8 0x46; u8 0x98;
    u8 0xe3; u8 0xbd; u8 0x1d; u8 0x43; u8 0xf6;
    u8 0xd7; u8 0x34;
  ] in
  assert_norm(List.Tot.length l == size_test16_zz);
  l
let test16_zz : lbytes size_test16_zz = createL test16_zz_list

// generated: "002000030002008ca13b5d680259cfa265de13dd24f257083c9403c01a8aa3320b9195c8d1d812a58e72ff3dd3cf71dc81b21c354f84e9ca6863d5fd871711e356ed9bf5f1e0d0c70a83df9dcea90e894cbfd709dabe93b3390a8e9c5a18498a1ff32414767a12c08bf4d4df6cf9d953da725b79d07454eb69bd002235f35a241dec5f1088177c"
inline_for_extraction
let size_test16_key_schedule_context: size_nat = 135
let test16_key_schedule_context_list : l:list uint8{List.Tot.length l == size_test16_key_schedule_context} =
  [@inline_let]
  let l = [
    u8 0x00; u8 0x20; u8 0x00; u8 0x03; u8 0x00;
    u8 0x02; u8 0x00; u8 0x8c; u8 0xa1; u8 0x3b;
    u8 0x5d; u8 0x68; u8 0x02; u8 0x59; u8 0xcf;
    u8 0xa2; u8 0x65; u8 0xde; u8 0x13; u8 0xdd;
    u8 0x24; u8 0xf2; u8 0x57; u8 0x08; u8 0x3c;
    u8 0x94; u8 0x03; u8 0xc0; u8 0x1a; u8 0x8a;
    u8 0xa3; u8 0x32; u8 0x0b; u8 0x91; u8 0x95;
    u8 0xc8; u8 0xd1; u8 0xd8; u8 0x12; u8 0xa5;
    u8 0x8e; u8 0x72; u8 0xff; u8 0x3d; u8 0xd3;
    u8 0xcf; u8 0x71; u8 0xdc; u8 0x81; u8 0xb2;
    u8 0x1c; u8 0x35; u8 0x4f; u8 0x84; u8 0xe9;
    u8 0xca; u8 0x68; u8 0x63; u8 0xd5; u8 0xfd;
    u8 0x87; u8 0x17; u8 0x11; u8 0xe3; u8 0x56;
    u8 0xed; u8 0x9b; u8 0xf5; u8 0xf1; u8 0xe0;
    u8 0xd0; u8 0xc7; u8 0x0a; u8 0x83; u8 0xdf;
    u8 0x9d; u8 0xce; u8 0xa9; u8 0x0e; u8 0x89;
    u8 0x4c; u8 0xbf; u8 0xd7; u8 0x09; u8 0xda;
    u8 0xbe; u8 0x93; u8 0xb3; u8 0x39; u8 0x0a;
    u8 0x8e; u8 0x9c; u8 0x5a; u8 0x18; u8 0x49;
    u8 0x8a; u8 0x1f; u8 0xf3; u8 0x24; u8 0x14;
    u8 0x76; u8 0x7a; u8 0x12; u8 0xc0; u8 0x8b;
    u8 0xf4; u8 0xd4; u8 0xdf; u8 0x6c; u8 0xf9;
    u8 0xd9; u8 0x53; u8 0xda; u8 0x72; u8 0x5b;
    u8 0x79; u8 0xd0; u8 0x74; u8 0x54; u8 0xeb;
    u8 0x69; u8 0xbd; u8 0x00; u8 0x22; u8 0x35;
    u8 0xf3; u8 0x5a; u8 0x24; u8 0x1d; u8 0xec;
    u8 0x5f; u8 0x10; u8 0x88; u8 0x17; u8 0x7c;
  ] in
  assert_norm(List.Tot.length l == size_test16_key_schedule_context);
  l
let test16_key_schedule_context : lbytes size_test16_key_schedule_context = createL test16_key_schedule_context_list

// generated: "a8a2b5b1c999475fa64d28e882656b6ac935e66692e124091ffcadf4ab200e55d0528de530e09e3d7db1bf731d0b609ff83e8bd5f43c873c9a06d94899de8524"
inline_for_extraction
let size_test16_secret: size_nat = 64
let test16_secret_list : l:list uint8{List.Tot.length l == size_test16_secret} =
  [@inline_let]
  let l = [
    u8 0xa8; u8 0xa2; u8 0xb5; u8 0xb1; u8 0xc9;
    u8 0x99; u8 0x47; u8 0x5f; u8 0xa6; u8 0x4d;
    u8 0x28; u8 0xe8; u8 0x82; u8 0x65; u8 0x6b;
    u8 0x6a; u8 0xc9; u8 0x35; u8 0xe6; u8 0x66;
    u8 0x92; u8 0xe1; u8 0x24; u8 0x09; u8 0x1f;
    u8 0xfc; u8 0xad; u8 0xf4; u8 0xab; u8 0x20;
    u8 0x0e; u8 0x55; u8 0xd0; u8 0x52; u8 0x8d;
    u8 0xe5; u8 0x30; u8 0xe0; u8 0x9e; u8 0x3d;
    u8 0x7d; u8 0xb1; u8 0xbf; u8 0x73; u8 0x1d;
    u8 0x0b; u8 0x60; u8 0x9f; u8 0xf8; u8 0x3e;
    u8 0x8b; u8 0xd5; u8 0xf4; u8 0x3c; u8 0x87;
    u8 0x3c; u8 0x9a; u8 0x06; u8 0xd9; u8 0x48;
    u8 0x99; u8 0xde; u8 0x85; u8 0x24;
  ] in
  assert_norm(List.Tot.length l == size_test16_secret);
  l
let test16_secret : lbytes size_test16_secret = createL test16_secret_list

// generated: "e6b2b657503f3bf512a0f522ec80ff3eeabe99048b2737587eb27184aa311166"
inline_for_extraction
let size_test16_key: size_nat = 32
let test16_key_list : l:list uint8{List.Tot.length l == size_test16_key} =
  [@inline_let]
  let l = [
    u8 0xe6; u8 0xb2; u8 0xb6; u8 0x57; u8 0x50;
    u8 0x3f; u8 0x3b; u8 0xf5; u8 0x12; u8 0xa0;
    u8 0xf5; u8 0x22; u8 0xec; u8 0x80; u8 0xff;
    u8 0x3e; u8 0xea; u8 0xbe; u8 0x99; u8 0x04;
    u8 0x8b; u8 0x27; u8 0x37; u8 0x58; u8 0x7e;
    u8 0xb2; u8 0x71; u8 0x84; u8 0xaa; u8 0x31;
    u8 0x11; u8 0x66;
  ] in
  assert_norm(List.Tot.length l == size_test16_key);
  l
let test16_key : lbytes size_test16_key = createL test16_key_list

// generated: "6cfe3f33c4eb86856348e308"
inline_for_extraction
let size_test16_nonce: size_nat = 12
let test16_nonce_list : l:list uint8{List.Tot.length l == size_test16_nonce} =
  [@inline_let]
  let l = [
    u8 0x6c; u8 0xfe; u8 0x3f; u8 0x33; u8 0xc4;
    u8 0xeb; u8 0x86; u8 0x85; u8 0x63; u8 0x48;
    u8 0xe3; u8 0x08;
  ] in
  assert_norm(List.Tot.length l == size_test16_nonce);
  l
let test16_nonce : lbytes size_test16_nonce = createL test16_nonce_list

// generated: "c54a12f1aaec867711c1afbda57f517fcd5cc25f81c3d155254fc88f05f0ba29dac72b509be69888ad979215993d36a8530cc445ae1ea5958bd75db57bceb918"
inline_for_extraction
let size_test16_exporterSecret: size_nat = 64
let test16_exporterSecret_list : l:list uint8{List.Tot.length l == size_test16_exporterSecret} =
  [@inline_let]
  let l = [
    u8 0xc5; u8 0x4a; u8 0x12; u8 0xf1; u8 0xaa;
    u8 0xec; u8 0x86; u8 0x77; u8 0x11; u8 0xc1;
    u8 0xaf; u8 0xbd; u8 0xa5; u8 0x7f; u8 0x51;
    u8 0x7f; u8 0xcd; u8 0x5c; u8 0xc2; u8 0x5f;
    u8 0x81; u8 0xc3; u8 0xd1; u8 0x55; u8 0x25;
    u8 0x4f; u8 0xc8; u8 0x8f; u8 0x05; u8 0xf0;
    u8 0xba; u8 0x29; u8 0xda; u8 0xc7; u8 0x2b;
    u8 0x50; u8 0x9b; u8 0xe6; u8 0x98; u8 0x88;
    u8 0xad; u8 0x97; u8 0x92; u8 0x15; u8 0x99;
    u8 0x3d; u8 0x36; u8 0xa8; u8 0x53; u8 0x0c;
    u8 0xc4; u8 0x45; u8 0xae; u8 0x1e; u8 0xa5;
    u8 0x95; u8 0x8b; u8 0xd7; u8 0x5d; u8 0xb5;
    u8 0x7b; u8 0xce; u8 0xb9; u8 0x18;
  ] in
  assert_norm(List.Tot.length l == size_test16_exporterSecret);
  l
let test16_exporterSecret : lbytes size_test16_exporterSecret = createL test16_exporterSecret_list

// generated: "436f756e742d30"
inline_for_extraction
let size_test16_encryption0_aad: size_nat = 7
let test16_encryption0_aad_list : l:list uint8{List.Tot.length l == size_test16_encryption0_aad} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x75; u8 0x6e; u8 0x74;
    u8 0x2d; u8 0x30;
  ] in
  assert_norm(List.Tot.length l == size_test16_encryption0_aad);
  l
let test16_encryption0_aad : lbytes size_test16_encryption0_aad = createL test16_encryption0_aad_list

// generated: "4d092aa2c8135e0bd3e0d5296f976bb7c6f805965ad56e1f5bb61ed5a845e2a3a7c4664ae50960fe10a47da5f3"
inline_for_extraction
let size_test16_encryption0_ciphertext: size_nat = 45
let test16_encryption0_ciphertext_list : l:list uint8{List.Tot.length l == size_test16_encryption0_ciphertext} =
  [@inline_let]
  let l = [
    u8 0x4d; u8 0x09; u8 0x2a; u8 0xa2; u8 0xc8;
    u8 0x13; u8 0x5e; u8 0x0b; u8 0xd3; u8 0xe0;
    u8 0xd5; u8 0x29; u8 0x6f; u8 0x97; u8 0x6b;
    u8 0xb7; u8 0xc6; u8 0xf8; u8 0x05; u8 0x96;
    u8 0x5a; u8 0xd5; u8 0x6e; u8 0x1f; u8 0x5b;
    u8 0xb6; u8 0x1e; u8 0xd5; u8 0xa8; u8 0x45;
    u8 0xe2; u8 0xa3; u8 0xa7; u8 0xc4; u8 0x66;
    u8 0x4a; u8 0xe5; u8 0x09; u8 0x60; u8 0xfe;
    u8 0x10; u8 0xa4; u8 0x7d; u8 0xa5; u8 0xf3;
  ] in
  assert_norm(List.Tot.length l == size_test16_encryption0_ciphertext);
  l
let test16_encryption0_ciphertext : lbytes size_test16_encryption0_ciphertext = createL test16_encryption0_ciphertext_list

// generated: "6cfe3f33c4eb86856348e308"
inline_for_extraction
let size_test16_encryption0_nonce: size_nat = 12
let test16_encryption0_nonce_list : l:list uint8{List.Tot.length l == size_test16_encryption0_nonce} =
  [@inline_let]
  let l = [
    u8 0x6c; u8 0xfe; u8 0x3f; u8 0x33; u8 0xc4;
    u8 0xeb; u8 0x86; u8 0x85; u8 0x63; u8 0x48;
    u8 0xe3; u8 0x08;
  ] in
  assert_norm(List.Tot.length l == size_test16_encryption0_nonce);
  l
let test16_encryption0_nonce : lbytes size_test16_encryption0_nonce = createL test16_encryption0_nonce_list

// generated: "4265617574792069732074727574682c20747275746820626561757479"
inline_for_extraction
let size_test16_encryption0_plaintext: size_nat = 29
let test16_encryption0_plaintext_list : l:list uint8{List.Tot.length l == size_test16_encryption0_plaintext} =
  [@inline_let]
  let l = [
    u8 0x42; u8 0x65; u8 0x61; u8 0x75; u8 0x74;
    u8 0x79; u8 0x20; u8 0x69; u8 0x73; u8 0x20;
    u8 0x74; u8 0x72; u8 0x75; u8 0x74; u8 0x68;
    u8 0x2c; u8 0x20; u8 0x74; u8 0x72; u8 0x75;
    u8 0x74; u8 0x68; u8 0x20; u8 0x62; u8 0x65;
    u8 0x61; u8 0x75; u8 0x74; u8 0x79;
  ] in
  assert_norm(List.Tot.length l == size_test16_encryption0_plaintext);
  l
let test16_encryption0_plaintext : lbytes size_test16_encryption0_plaintext = createL test16_encryption0_plaintext_list

// generated: "436f756e742d31"
inline_for_extraction
let size_test16_encryption1_aad: size_nat = 7
let test16_encryption1_aad_list : l:list uint8{List.Tot.length l == size_test16_encryption1_aad} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x75; u8 0x6e; u8 0x74;
    u8 0x2d; u8 0x31;
  ] in
  assert_norm(List.Tot.length l == size_test16_encryption1_aad);
  l
let test16_encryption1_aad : lbytes size_test16_encryption1_aad = createL test16_encryption1_aad_list

// generated: "31762dbf9cf135a30e745171495c56c68d5da9b586af0516ddd87639f32c6fec220cc006fcb8727165fe005d7a"
inline_for_extraction
let size_test16_encryption1_ciphertext: size_nat = 45
let test16_encryption1_ciphertext_list : l:list uint8{List.Tot.length l == size_test16_encryption1_ciphertext} =
  [@inline_let]
  let l = [
    u8 0x31; u8 0x76; u8 0x2d; u8 0xbf; u8 0x9c;
    u8 0xf1; u8 0x35; u8 0xa3; u8 0x0e; u8 0x74;
    u8 0x51; u8 0x71; u8 0x49; u8 0x5c; u8 0x56;
    u8 0xc6; u8 0x8d; u8 0x5d; u8 0xa9; u8 0xb5;
    u8 0x86; u8 0xaf; u8 0x05; u8 0x16; u8 0xdd;
    u8 0xd8; u8 0x76; u8 0x39; u8 0xf3; u8 0x2c;
    u8 0x6f; u8 0xec; u8 0x22; u8 0x0c; u8 0xc0;
    u8 0x06; u8 0xfc; u8 0xb8; u8 0x72; u8 0x71;
    u8 0x65; u8 0xfe; u8 0x00; u8 0x5d; u8 0x7a;
  ] in
  assert_norm(List.Tot.length l == size_test16_encryption1_ciphertext);
  l
let test16_encryption1_ciphertext : lbytes size_test16_encryption1_ciphertext = createL test16_encryption1_ciphertext_list

// generated: "6cfe3f33c4eb86856348e309"
inline_for_extraction
let size_test16_encryption1_nonce: size_nat = 12
let test16_encryption1_nonce_list : l:list uint8{List.Tot.length l == size_test16_encryption1_nonce} =
  [@inline_let]
  let l = [
    u8 0x6c; u8 0xfe; u8 0x3f; u8 0x33; u8 0xc4;
    u8 0xeb; u8 0x86; u8 0x85; u8 0x63; u8 0x48;
    u8 0xe3; u8 0x09;
  ] in
  assert_norm(List.Tot.length l == size_test16_encryption1_nonce);
  l
let test16_encryption1_nonce : lbytes size_test16_encryption1_nonce = createL test16_encryption1_nonce_list

// generated: "4265617574792069732074727574682c20747275746820626561757479"
inline_for_extraction
let size_test16_encryption1_plaintext: size_nat = 29
let test16_encryption1_plaintext_list : l:list uint8{List.Tot.length l == size_test16_encryption1_plaintext} =
  [@inline_let]
  let l = [
    u8 0x42; u8 0x65; u8 0x61; u8 0x75; u8 0x74;
    u8 0x79; u8 0x20; u8 0x69; u8 0x73; u8 0x20;
    u8 0x74; u8 0x72; u8 0x75; u8 0x74; u8 0x68;
    u8 0x2c; u8 0x20; u8 0x74; u8 0x72; u8 0x75;
    u8 0x74; u8 0x68; u8 0x20; u8 0x62; u8 0x65;
    u8 0x61; u8 0x75; u8 0x74; u8 0x79;
  ] in
  assert_norm(List.Tot.length l == size_test16_encryption1_plaintext);
  l
let test16_encryption1_plaintext : lbytes size_test16_encryption1_plaintext = createL test16_encryption1_plaintext_list

// generated: "436f756e742d32"
inline_for_extraction
let size_test16_encryption2_aad: size_nat = 7
let test16_encryption2_aad_list : l:list uint8{List.Tot.length l == size_test16_encryption2_aad} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x75; u8 0x6e; u8 0x74;
    u8 0x2d; u8 0x32;
  ] in
  assert_norm(List.Tot.length l == size_test16_encryption2_aad);
  l
let test16_encryption2_aad : lbytes size_test16_encryption2_aad = createL test16_encryption2_aad_list

// generated: "d58d5793fca52476190c0485d0be4b5cb1fe79f0b135660a704717e68ea846bbf8054455cd92c78fd7cadcda2e"
inline_for_extraction
let size_test16_encryption2_ciphertext: size_nat = 45
let test16_encryption2_ciphertext_list : l:list uint8{List.Tot.length l == size_test16_encryption2_ciphertext} =
  [@inline_let]
  let l = [
    u8 0xd5; u8 0x8d; u8 0x57; u8 0x93; u8 0xfc;
    u8 0xa5; u8 0x24; u8 0x76; u8 0x19; u8 0x0c;
    u8 0x04; u8 0x85; u8 0xd0; u8 0xbe; u8 0x4b;
    u8 0x5c; u8 0xb1; u8 0xfe; u8 0x79; u8 0xf0;
    u8 0xb1; u8 0x35; u8 0x66; u8 0x0a; u8 0x70;
    u8 0x47; u8 0x17; u8 0xe6; u8 0x8e; u8 0xa8;
    u8 0x46; u8 0xbb; u8 0xf8; u8 0x05; u8 0x44;
    u8 0x55; u8 0xcd; u8 0x92; u8 0xc7; u8 0x8f;
    u8 0xd7; u8 0xca; u8 0xdc; u8 0xda; u8 0x2e;
  ] in
  assert_norm(List.Tot.length l == size_test16_encryption2_ciphertext);
  l
let test16_encryption2_ciphertext : lbytes size_test16_encryption2_ciphertext = createL test16_encryption2_ciphertext_list

// generated: "6cfe3f33c4eb86856348e30a"
inline_for_extraction
let size_test16_encryption2_nonce: size_nat = 12
let test16_encryption2_nonce_list : l:list uint8{List.Tot.length l == size_test16_encryption2_nonce} =
  [@inline_let]
  let l = [
    u8 0x6c; u8 0xfe; u8 0x3f; u8 0x33; u8 0xc4;
    u8 0xeb; u8 0x86; u8 0x85; u8 0x63; u8 0x48;
    u8 0xe3; u8 0x0a;
  ] in
  assert_norm(List.Tot.length l == size_test16_encryption2_nonce);
  l
let test16_encryption2_nonce : lbytes size_test16_encryption2_nonce = createL test16_encryption2_nonce_list

// generated: "4265617574792069732074727574682c20747275746820626561757479"
inline_for_extraction
let size_test16_encryption2_plaintext: size_nat = 29
let test16_encryption2_plaintext_list : l:list uint8{List.Tot.length l == size_test16_encryption2_plaintext} =
  [@inline_let]
  let l = [
    u8 0x42; u8 0x65; u8 0x61; u8 0x75; u8 0x74;
    u8 0x79; u8 0x20; u8 0x69; u8 0x73; u8 0x20;
    u8 0x74; u8 0x72; u8 0x75; u8 0x74; u8 0x68;
    u8 0x2c; u8 0x20; u8 0x74; u8 0x72; u8 0x75;
    u8 0x74; u8 0x68; u8 0x20; u8 0x62; u8 0x65;
    u8 0x61; u8 0x75; u8 0x74; u8 0x79;
  ] in
  assert_norm(List.Tot.length l == size_test16_encryption2_plaintext);
  l
let test16_encryption2_plaintext : lbytes size_test16_encryption2_plaintext = createL test16_encryption2_plaintext_list

// generated: "436f756e742d33"
inline_for_extraction
let size_test16_encryption3_aad: size_nat = 7
let test16_encryption3_aad_list : l:list uint8{List.Tot.length l == size_test16_encryption3_aad} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x75; u8 0x6e; u8 0x74;
    u8 0x2d; u8 0x33;
  ] in
  assert_norm(List.Tot.length l == size_test16_encryption3_aad);
  l
let test16_encryption3_aad : lbytes size_test16_encryption3_aad = createL test16_encryption3_aad_list

// generated: "7ee778412b815dc27dc69b5a08f740201e38ea8d29962ff4f6fde0027512c8727c5444b710774487f9fe04eb8c"
inline_for_extraction
let size_test16_encryption3_ciphertext: size_nat = 45
let test16_encryption3_ciphertext_list : l:list uint8{List.Tot.length l == size_test16_encryption3_ciphertext} =
  [@inline_let]
  let l = [
    u8 0x7e; u8 0xe7; u8 0x78; u8 0x41; u8 0x2b;
    u8 0x81; u8 0x5d; u8 0xc2; u8 0x7d; u8 0xc6;
    u8 0x9b; u8 0x5a; u8 0x08; u8 0xf7; u8 0x40;
    u8 0x20; u8 0x1e; u8 0x38; u8 0xea; u8 0x8d;
    u8 0x29; u8 0x96; u8 0x2f; u8 0xf4; u8 0xf6;
    u8 0xfd; u8 0xe0; u8 0x02; u8 0x75; u8 0x12;
    u8 0xc8; u8 0x72; u8 0x7c; u8 0x54; u8 0x44;
    u8 0xb7; u8 0x10; u8 0x77; u8 0x44; u8 0x87;
    u8 0xf9; u8 0xfe; u8 0x04; u8 0xeb; u8 0x8c;
  ] in
  assert_norm(List.Tot.length l == size_test16_encryption3_ciphertext);
  l
let test16_encryption3_ciphertext : lbytes size_test16_encryption3_ciphertext = createL test16_encryption3_ciphertext_list

// generated: "6cfe3f33c4eb86856348e30b"
inline_for_extraction
let size_test16_encryption3_nonce: size_nat = 12
let test16_encryption3_nonce_list : l:list uint8{List.Tot.length l == size_test16_encryption3_nonce} =
  [@inline_let]
  let l = [
    u8 0x6c; u8 0xfe; u8 0x3f; u8 0x33; u8 0xc4;
    u8 0xeb; u8 0x86; u8 0x85; u8 0x63; u8 0x48;
    u8 0xe3; u8 0x0b;
  ] in
  assert_norm(List.Tot.length l == size_test16_encryption3_nonce);
  l
let test16_encryption3_nonce : lbytes size_test16_encryption3_nonce = createL test16_encryption3_nonce_list

// generated: "4265617574792069732074727574682c20747275746820626561757479"
inline_for_extraction
let size_test16_encryption3_plaintext: size_nat = 29
let test16_encryption3_plaintext_list : l:list uint8{List.Tot.length l == size_test16_encryption3_plaintext} =
  [@inline_let]
  let l = [
    u8 0x42; u8 0x65; u8 0x61; u8 0x75; u8 0x74;
    u8 0x79; u8 0x20; u8 0x69; u8 0x73; u8 0x20;
    u8 0x74; u8 0x72; u8 0x75; u8 0x74; u8 0x68;
    u8 0x2c; u8 0x20; u8 0x74; u8 0x72; u8 0x75;
    u8 0x74; u8 0x68; u8 0x20; u8 0x62; u8 0x65;
    u8 0x61; u8 0x75; u8 0x74; u8 0x79;
  ] in
  assert_norm(List.Tot.length l == size_test16_encryption3_plaintext);
  l
let test16_encryption3_plaintext : lbytes size_test16_encryption3_plaintext = createL test16_encryption3_plaintext_list

// generated: "436f756e742d34"
inline_for_extraction
let size_test16_encryption4_aad: size_nat = 7
let test16_encryption4_aad_list : l:list uint8{List.Tot.length l == size_test16_encryption4_aad} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x75; u8 0x6e; u8 0x74;
    u8 0x2d; u8 0x34;
  ] in
  assert_norm(List.Tot.length l == size_test16_encryption4_aad);
  l
let test16_encryption4_aad : lbytes size_test16_encryption4_aad = createL test16_encryption4_aad_list

// generated: "a0e024691a243581c055bf19345a5ec07dbb64dcab0252501de2b10494ea9056fe83fa54184a53025b19f210da"
inline_for_extraction
let size_test16_encryption4_ciphertext: size_nat = 45
let test16_encryption4_ciphertext_list : l:list uint8{List.Tot.length l == size_test16_encryption4_ciphertext} =
  [@inline_let]
  let l = [
    u8 0xa0; u8 0xe0; u8 0x24; u8 0x69; u8 0x1a;
    u8 0x24; u8 0x35; u8 0x81; u8 0xc0; u8 0x55;
    u8 0xbf; u8 0x19; u8 0x34; u8 0x5a; u8 0x5e;
    u8 0xc0; u8 0x7d; u8 0xbb; u8 0x64; u8 0xdc;
    u8 0xab; u8 0x02; u8 0x52; u8 0x50; u8 0x1d;
    u8 0xe2; u8 0xb1; u8 0x04; u8 0x94; u8 0xea;
    u8 0x90; u8 0x56; u8 0xfe; u8 0x83; u8 0xfa;
    u8 0x54; u8 0x18; u8 0x4a; u8 0x53; u8 0x02;
    u8 0x5b; u8 0x19; u8 0xf2; u8 0x10; u8 0xda;
  ] in
  assert_norm(List.Tot.length l == size_test16_encryption4_ciphertext);
  l
let test16_encryption4_ciphertext : lbytes size_test16_encryption4_ciphertext = createL test16_encryption4_ciphertext_list

// generated: "6cfe3f33c4eb86856348e30c"
inline_for_extraction
let size_test16_encryption4_nonce: size_nat = 12
let test16_encryption4_nonce_list : l:list uint8{List.Tot.length l == size_test16_encryption4_nonce} =
  [@inline_let]
  let l = [
    u8 0x6c; u8 0xfe; u8 0x3f; u8 0x33; u8 0xc4;
    u8 0xeb; u8 0x86; u8 0x85; u8 0x63; u8 0x48;
    u8 0xe3; u8 0x0c;
  ] in
  assert_norm(List.Tot.length l == size_test16_encryption4_nonce);
  l
let test16_encryption4_nonce : lbytes size_test16_encryption4_nonce = createL test16_encryption4_nonce_list

// generated: "4265617574792069732074727574682c20747275746820626561757479"
inline_for_extraction
let size_test16_encryption4_plaintext: size_nat = 29
let test16_encryption4_plaintext_list : l:list uint8{List.Tot.length l == size_test16_encryption4_plaintext} =
  [@inline_let]
  let l = [
    u8 0x42; u8 0x65; u8 0x61; u8 0x75; u8 0x74;
    u8 0x79; u8 0x20; u8 0x69; u8 0x73; u8 0x20;
    u8 0x74; u8 0x72; u8 0x75; u8 0x74; u8 0x68;
    u8 0x2c; u8 0x20; u8 0x74; u8 0x72; u8 0x75;
    u8 0x74; u8 0x68; u8 0x20; u8 0x62; u8 0x65;
    u8 0x61; u8 0x75; u8 0x74; u8 0x79;
  ] in
  assert_norm(List.Tot.length l == size_test16_encryption4_plaintext);
  l
let test16_encryption4_plaintext : lbytes size_test16_encryption4_plaintext = createL test16_encryption4_plaintext_list

// generated: "436f756e742d35"
inline_for_extraction
let size_test16_encryption5_aad: size_nat = 7
let test16_encryption5_aad_list : l:list uint8{List.Tot.length l == size_test16_encryption5_aad} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x75; u8 0x6e; u8 0x74;
    u8 0x2d; u8 0x35;
  ] in
  assert_norm(List.Tot.length l == size_test16_encryption5_aad);
  l
let test16_encryption5_aad : lbytes size_test16_encryption5_aad = createL test16_encryption5_aad_list

// generated: "46cb5522c3c1b5e336b33f81c92b3634bcec8293e5c73b689a1ca31aaf809a9439cb19ccce5aac3363a51eb34c"
inline_for_extraction
let size_test16_encryption5_ciphertext: size_nat = 45
let test16_encryption5_ciphertext_list : l:list uint8{List.Tot.length l == size_test16_encryption5_ciphertext} =
  [@inline_let]
  let l = [
    u8 0x46; u8 0xcb; u8 0x55; u8 0x22; u8 0xc3;
    u8 0xc1; u8 0xb5; u8 0xe3; u8 0x36; u8 0xb3;
    u8 0x3f; u8 0x81; u8 0xc9; u8 0x2b; u8 0x36;
    u8 0x34; u8 0xbc; u8 0xec; u8 0x82; u8 0x93;
    u8 0xe5; u8 0xc7; u8 0x3b; u8 0x68; u8 0x9a;
    u8 0x1c; u8 0xa3; u8 0x1a; u8 0xaf; u8 0x80;
    u8 0x9a; u8 0x94; u8 0x39; u8 0xcb; u8 0x19;
    u8 0xcc; u8 0xce; u8 0x5a; u8 0xac; u8 0x33;
    u8 0x63; u8 0xa5; u8 0x1e; u8 0xb3; u8 0x4c;
  ] in
  assert_norm(List.Tot.length l == size_test16_encryption5_ciphertext);
  l
let test16_encryption5_ciphertext : lbytes size_test16_encryption5_ciphertext = createL test16_encryption5_ciphertext_list

// generated: "6cfe3f33c4eb86856348e30d"
inline_for_extraction
let size_test16_encryption5_nonce: size_nat = 12
let test16_encryption5_nonce_list : l:list uint8{List.Tot.length l == size_test16_encryption5_nonce} =
  [@inline_let]
  let l = [
    u8 0x6c; u8 0xfe; u8 0x3f; u8 0x33; u8 0xc4;
    u8 0xeb; u8 0x86; u8 0x85; u8 0x63; u8 0x48;
    u8 0xe3; u8 0x0d;
  ] in
  assert_norm(List.Tot.length l == size_test16_encryption5_nonce);
  l
let test16_encryption5_nonce : lbytes size_test16_encryption5_nonce = createL test16_encryption5_nonce_list

// generated: "4265617574792069732074727574682c20747275746820626561757479"
inline_for_extraction
let size_test16_encryption5_plaintext: size_nat = 29
let test16_encryption5_plaintext_list : l:list uint8{List.Tot.length l == size_test16_encryption5_plaintext} =
  [@inline_let]
  let l = [
    u8 0x42; u8 0x65; u8 0x61; u8 0x75; u8 0x74;
    u8 0x79; u8 0x20; u8 0x69; u8 0x73; u8 0x20;
    u8 0x74; u8 0x72; u8 0x75; u8 0x74; u8 0x68;
    u8 0x2c; u8 0x20; u8 0x74; u8 0x72; u8 0x75;
    u8 0x74; u8 0x68; u8 0x20; u8 0x62; u8 0x65;
    u8 0x61; u8 0x75; u8 0x74; u8 0x79;
  ] in
  assert_norm(List.Tot.length l == size_test16_encryption5_plaintext);
  l
let test16_encryption5_plaintext : lbytes size_test16_encryption5_plaintext = createL test16_encryption5_plaintext_list

// generated: "436f756e742d36"
inline_for_extraction
let size_test16_encryption6_aad: size_nat = 7
let test16_encryption6_aad_list : l:list uint8{List.Tot.length l == size_test16_encryption6_aad} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x75; u8 0x6e; u8 0x74;
    u8 0x2d; u8 0x36;
  ] in
  assert_norm(List.Tot.length l == size_test16_encryption6_aad);
  l
let test16_encryption6_aad : lbytes size_test16_encryption6_aad = createL test16_encryption6_aad_list

// generated: "2543401893febd047e2f9a7dde92a6b4aa8a66642063c561445d49c2b3ed0df0289f5e8d50399e877ab212e4b6"
inline_for_extraction
let size_test16_encryption6_ciphertext: size_nat = 45
let test16_encryption6_ciphertext_list : l:list uint8{List.Tot.length l == size_test16_encryption6_ciphertext} =
  [@inline_let]
  let l = [
    u8 0x25; u8 0x43; u8 0x40; u8 0x18; u8 0x93;
    u8 0xfe; u8 0xbd; u8 0x04; u8 0x7e; u8 0x2f;
    u8 0x9a; u8 0x7d; u8 0xde; u8 0x92; u8 0xa6;
    u8 0xb4; u8 0xaa; u8 0x8a; u8 0x66; u8 0x64;
    u8 0x20; u8 0x63; u8 0xc5; u8 0x61; u8 0x44;
    u8 0x5d; u8 0x49; u8 0xc2; u8 0xb3; u8 0xed;
    u8 0x0d; u8 0xf0; u8 0x28; u8 0x9f; u8 0x5e;
    u8 0x8d; u8 0x50; u8 0x39; u8 0x9e; u8 0x87;
    u8 0x7a; u8 0xb2; u8 0x12; u8 0xe4; u8 0xb6;
  ] in
  assert_norm(List.Tot.length l == size_test16_encryption6_ciphertext);
  l
let test16_encryption6_ciphertext : lbytes size_test16_encryption6_ciphertext = createL test16_encryption6_ciphertext_list

// generated: "6cfe3f33c4eb86856348e30e"
inline_for_extraction
let size_test16_encryption6_nonce: size_nat = 12
let test16_encryption6_nonce_list : l:list uint8{List.Tot.length l == size_test16_encryption6_nonce} =
  [@inline_let]
  let l = [
    u8 0x6c; u8 0xfe; u8 0x3f; u8 0x33; u8 0xc4;
    u8 0xeb; u8 0x86; u8 0x85; u8 0x63; u8 0x48;
    u8 0xe3; u8 0x0e;
  ] in
  assert_norm(List.Tot.length l == size_test16_encryption6_nonce);
  l
let test16_encryption6_nonce : lbytes size_test16_encryption6_nonce = createL test16_encryption6_nonce_list

// generated: "4265617574792069732074727574682c20747275746820626561757479"
inline_for_extraction
let size_test16_encryption6_plaintext: size_nat = 29
let test16_encryption6_plaintext_list : l:list uint8{List.Tot.length l == size_test16_encryption6_plaintext} =
  [@inline_let]
  let l = [
    u8 0x42; u8 0x65; u8 0x61; u8 0x75; u8 0x74;
    u8 0x79; u8 0x20; u8 0x69; u8 0x73; u8 0x20;
    u8 0x74; u8 0x72; u8 0x75; u8 0x74; u8 0x68;
    u8 0x2c; u8 0x20; u8 0x74; u8 0x72; u8 0x75;
    u8 0x74; u8 0x68; u8 0x20; u8 0x62; u8 0x65;
    u8 0x61; u8 0x75; u8 0x74; u8 0x79;
  ] in
  assert_norm(List.Tot.length l == size_test16_encryption6_plaintext);
  l
let test16_encryption6_plaintext : lbytes size_test16_encryption6_plaintext = createL test16_encryption6_plaintext_list

// generated: "436f756e742d37"
inline_for_extraction
let size_test16_encryption7_aad: size_nat = 7
let test16_encryption7_aad_list : l:list uint8{List.Tot.length l == size_test16_encryption7_aad} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x75; u8 0x6e; u8 0x74;
    u8 0x2d; u8 0x37;
  ] in
  assert_norm(List.Tot.length l == size_test16_encryption7_aad);
  l
let test16_encryption7_aad : lbytes size_test16_encryption7_aad = createL test16_encryption7_aad_list

// generated: "e09d4675d29b9943dc74ae5e36802283e066e033578bd02611acb8ef41682dab354fd3b22492358b953b4c9060"
inline_for_extraction
let size_test16_encryption7_ciphertext: size_nat = 45
let test16_encryption7_ciphertext_list : l:list uint8{List.Tot.length l == size_test16_encryption7_ciphertext} =
  [@inline_let]
  let l = [
    u8 0xe0; u8 0x9d; u8 0x46; u8 0x75; u8 0xd2;
    u8 0x9b; u8 0x99; u8 0x43; u8 0xdc; u8 0x74;
    u8 0xae; u8 0x5e; u8 0x36; u8 0x80; u8 0x22;
    u8 0x83; u8 0xe0; u8 0x66; u8 0xe0; u8 0x33;
    u8 0x57; u8 0x8b; u8 0xd0; u8 0x26; u8 0x11;
    u8 0xac; u8 0xb8; u8 0xef; u8 0x41; u8 0x68;
    u8 0x2d; u8 0xab; u8 0x35; u8 0x4f; u8 0xd3;
    u8 0xb2; u8 0x24; u8 0x92; u8 0x35; u8 0x8b;
    u8 0x95; u8 0x3b; u8 0x4c; u8 0x90; u8 0x60;
  ] in
  assert_norm(List.Tot.length l == size_test16_encryption7_ciphertext);
  l
let test16_encryption7_ciphertext : lbytes size_test16_encryption7_ciphertext = createL test16_encryption7_ciphertext_list

// generated: "6cfe3f33c4eb86856348e30f"
inline_for_extraction
let size_test16_encryption7_nonce: size_nat = 12
let test16_encryption7_nonce_list : l:list uint8{List.Tot.length l == size_test16_encryption7_nonce} =
  [@inline_let]
  let l = [
    u8 0x6c; u8 0xfe; u8 0x3f; u8 0x33; u8 0xc4;
    u8 0xeb; u8 0x86; u8 0x85; u8 0x63; u8 0x48;
    u8 0xe3; u8 0x0f;
  ] in
  assert_norm(List.Tot.length l == size_test16_encryption7_nonce);
  l
let test16_encryption7_nonce : lbytes size_test16_encryption7_nonce = createL test16_encryption7_nonce_list

// generated: "4265617574792069732074727574682c20747275746820626561757479"
inline_for_extraction
let size_test16_encryption7_plaintext: size_nat = 29
let test16_encryption7_plaintext_list : l:list uint8{List.Tot.length l == size_test16_encryption7_plaintext} =
  [@inline_let]
  let l = [
    u8 0x42; u8 0x65; u8 0x61; u8 0x75; u8 0x74;
    u8 0x79; u8 0x20; u8 0x69; u8 0x73; u8 0x20;
    u8 0x74; u8 0x72; u8 0x75; u8 0x74; u8 0x68;
    u8 0x2c; u8 0x20; u8 0x74; u8 0x72; u8 0x75;
    u8 0x74; u8 0x68; u8 0x20; u8 0x62; u8 0x65;
    u8 0x61; u8 0x75; u8 0x74; u8 0x79;
  ] in
  assert_norm(List.Tot.length l == size_test16_encryption7_plaintext);
  l
let test16_encryption7_plaintext : lbytes size_test16_encryption7_plaintext = createL test16_encryption7_plaintext_list

// generated: "436f756e742d38"
inline_for_extraction
let size_test16_encryption8_aad: size_nat = 7
let test16_encryption8_aad_list : l:list uint8{List.Tot.length l == size_test16_encryption8_aad} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x75; u8 0x6e; u8 0x74;
    u8 0x2d; u8 0x38;
  ] in
  assert_norm(List.Tot.length l == size_test16_encryption8_aad);
  l
let test16_encryption8_aad : lbytes size_test16_encryption8_aad = createL test16_encryption8_aad_list

// generated: "1510639c736a01b5b55b32ec2c0f400119444e8d574822d2d96bb37df5869a19853ad9508a81bf414233c48c20"
inline_for_extraction
let size_test16_encryption8_ciphertext: size_nat = 45
let test16_encryption8_ciphertext_list : l:list uint8{List.Tot.length l == size_test16_encryption8_ciphertext} =
  [@inline_let]
  let l = [
    u8 0x15; u8 0x10; u8 0x63; u8 0x9c; u8 0x73;
    u8 0x6a; u8 0x01; u8 0xb5; u8 0xb5; u8 0x5b;
    u8 0x32; u8 0xec; u8 0x2c; u8 0x0f; u8 0x40;
    u8 0x01; u8 0x19; u8 0x44; u8 0x4e; u8 0x8d;
    u8 0x57; u8 0x48; u8 0x22; u8 0xd2; u8 0xd9;
    u8 0x6b; u8 0xb3; u8 0x7d; u8 0xf5; u8 0x86;
    u8 0x9a; u8 0x19; u8 0x85; u8 0x3a; u8 0xd9;
    u8 0x50; u8 0x8a; u8 0x81; u8 0xbf; u8 0x41;
    u8 0x42; u8 0x33; u8 0xc4; u8 0x8c; u8 0x20;
  ] in
  assert_norm(List.Tot.length l == size_test16_encryption8_ciphertext);
  l
let test16_encryption8_ciphertext : lbytes size_test16_encryption8_ciphertext = createL test16_encryption8_ciphertext_list

// generated: "6cfe3f33c4eb86856348e300"
inline_for_extraction
let size_test16_encryption8_nonce: size_nat = 12
let test16_encryption8_nonce_list : l:list uint8{List.Tot.length l == size_test16_encryption8_nonce} =
  [@inline_let]
  let l = [
    u8 0x6c; u8 0xfe; u8 0x3f; u8 0x33; u8 0xc4;
    u8 0xeb; u8 0x86; u8 0x85; u8 0x63; u8 0x48;
    u8 0xe3; u8 0x00;
  ] in
  assert_norm(List.Tot.length l == size_test16_encryption8_nonce);
  l
let test16_encryption8_nonce : lbytes size_test16_encryption8_nonce = createL test16_encryption8_nonce_list

// generated: "4265617574792069732074727574682c20747275746820626561757479"
inline_for_extraction
let size_test16_encryption8_plaintext: size_nat = 29
let test16_encryption8_plaintext_list : l:list uint8{List.Tot.length l == size_test16_encryption8_plaintext} =
  [@inline_let]
  let l = [
    u8 0x42; u8 0x65; u8 0x61; u8 0x75; u8 0x74;
    u8 0x79; u8 0x20; u8 0x69; u8 0x73; u8 0x20;
    u8 0x74; u8 0x72; u8 0x75; u8 0x74; u8 0x68;
    u8 0x2c; u8 0x20; u8 0x74; u8 0x72; u8 0x75;
    u8 0x74; u8 0x68; u8 0x20; u8 0x62; u8 0x65;
    u8 0x61; u8 0x75; u8 0x74; u8 0x79;
  ] in
  assert_norm(List.Tot.length l == size_test16_encryption8_plaintext);
  l
let test16_encryption8_plaintext : lbytes size_test16_encryption8_plaintext = createL test16_encryption8_plaintext_list

// generated: "436f756e742d39"
inline_for_extraction
let size_test16_encryption9_aad: size_nat = 7
let test16_encryption9_aad_list : l:list uint8{List.Tot.length l == size_test16_encryption9_aad} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x75; u8 0x6e; u8 0x74;
    u8 0x2d; u8 0x39;
  ] in
  assert_norm(List.Tot.length l == size_test16_encryption9_aad);
  l
let test16_encryption9_aad : lbytes size_test16_encryption9_aad = createL test16_encryption9_aad_list

// generated: "7683d8c8449d962607fd07e4f04db63e581b8684c1524a45049b1a9524b8a053855f7d1ab2cee2b8c86fd55718"
inline_for_extraction
let size_test16_encryption9_ciphertext: size_nat = 45
let test16_encryption9_ciphertext_list : l:list uint8{List.Tot.length l == size_test16_encryption9_ciphertext} =
  [@inline_let]
  let l = [
    u8 0x76; u8 0x83; u8 0xd8; u8 0xc8; u8 0x44;
    u8 0x9d; u8 0x96; u8 0x26; u8 0x07; u8 0xfd;
    u8 0x07; u8 0xe4; u8 0xf0; u8 0x4d; u8 0xb6;
    u8 0x3e; u8 0x58; u8 0x1b; u8 0x86; u8 0x84;
    u8 0xc1; u8 0x52; u8 0x4a; u8 0x45; u8 0x04;
    u8 0x9b; u8 0x1a; u8 0x95; u8 0x24; u8 0xb8;
    u8 0xa0; u8 0x53; u8 0x85; u8 0x5f; u8 0x7d;
    u8 0x1a; u8 0xb2; u8 0xce; u8 0xe2; u8 0xb8;
    u8 0xc8; u8 0x6f; u8 0xd5; u8 0x57; u8 0x18;
  ] in
  assert_norm(List.Tot.length l == size_test16_encryption9_ciphertext);
  l
let test16_encryption9_ciphertext : lbytes size_test16_encryption9_ciphertext = createL test16_encryption9_ciphertext_list

// generated: "6cfe3f33c4eb86856348e301"
inline_for_extraction
let size_test16_encryption9_nonce: size_nat = 12
let test16_encryption9_nonce_list : l:list uint8{List.Tot.length l == size_test16_encryption9_nonce} =
  [@inline_let]
  let l = [
    u8 0x6c; u8 0xfe; u8 0x3f; u8 0x33; u8 0xc4;
    u8 0xeb; u8 0x86; u8 0x85; u8 0x63; u8 0x48;
    u8 0xe3; u8 0x01;
  ] in
  assert_norm(List.Tot.length l == size_test16_encryption9_nonce);
  l
let test16_encryption9_nonce : lbytes size_test16_encryption9_nonce = createL test16_encryption9_nonce_list

// generated: "4265617574792069732074727574682c20747275746820626561757479"
inline_for_extraction
let size_test16_encryption9_plaintext: size_nat = 29
let test16_encryption9_plaintext_list : l:list uint8{List.Tot.length l == size_test16_encryption9_plaintext} =
  [@inline_let]
  let l = [
    u8 0x42; u8 0x65; u8 0x61; u8 0x75; u8 0x74;
    u8 0x79; u8 0x20; u8 0x69; u8 0x73; u8 0x20;
    u8 0x74; u8 0x72; u8 0x75; u8 0x74; u8 0x68;
    u8 0x2c; u8 0x20; u8 0x74; u8 0x72; u8 0x75;
    u8 0x74; u8 0x68; u8 0x20; u8 0x62; u8 0x65;
    u8 0x61; u8 0x75; u8 0x74; u8 0x79;
  ] in
  assert_norm(List.Tot.length l == size_test16_encryption9_plaintext);
  l
let test16_encryption9_plaintext : lbytes size_test16_encryption9_plaintext = createL test16_encryption9_plaintext_list

// generated: "436f6e746578742d30"
inline_for_extraction
let size_test16_export0_exportContext: size_nat = 9
let test16_export0_exportContext_list : l:list uint8{List.Tot.length l == size_test16_export0_exportContext} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x6e; u8 0x74; u8 0x65;
    u8 0x78; u8 0x74; u8 0x2d; u8 0x30;
  ] in
  assert_norm(List.Tot.length l == size_test16_export0_exportContext);
  l
let test16_export0_exportContext : lbytes size_test16_export0_exportContext = createL test16_export0_exportContext_list

// generated: "4b073609a63f277780f23e8053e2b6dc42574e529e4079451e9933da3ca7db6f"
inline_for_extraction
let size_test16_export0_exportValue: size_nat = 32
let test16_export0_exportValue_list : l:list uint8{List.Tot.length l == size_test16_export0_exportValue} =
  [@inline_let]
  let l = [
    u8 0x4b; u8 0x07; u8 0x36; u8 0x09; u8 0xa6;
    u8 0x3f; u8 0x27; u8 0x77; u8 0x80; u8 0xf2;
    u8 0x3e; u8 0x80; u8 0x53; u8 0xe2; u8 0xb6;
    u8 0xdc; u8 0x42; u8 0x57; u8 0x4e; u8 0x52;
    u8 0x9e; u8 0x40; u8 0x79; u8 0x45; u8 0x1e;
    u8 0x99; u8 0x33; u8 0xda; u8 0x3c; u8 0xa7;
    u8 0xdb; u8 0x6f;
  ] in
  assert_norm(List.Tot.length l == size_test16_export0_exportValue);
  l
let test16_export0_exportValue : lbytes size_test16_export0_exportValue = createL test16_export0_exportValue_list

let test16_export0_len:size_nat = 32
// generated: "436f6e746578742d31"
inline_for_extraction
let size_test16_export1_exportContext: size_nat = 9
let test16_export1_exportContext_list : l:list uint8{List.Tot.length l == size_test16_export1_exportContext} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x6e; u8 0x74; u8 0x65;
    u8 0x78; u8 0x74; u8 0x2d; u8 0x31;
  ] in
  assert_norm(List.Tot.length l == size_test16_export1_exportContext);
  l
let test16_export1_exportContext : lbytes size_test16_export1_exportContext = createL test16_export1_exportContext_list

// generated: "675eb779bdd2afa5afce6299702c50c50780d691dbe8ce036be8fbf32ecc4f24"
inline_for_extraction
let size_test16_export1_exportValue: size_nat = 32
let test16_export1_exportValue_list : l:list uint8{List.Tot.length l == size_test16_export1_exportValue} =
  [@inline_let]
  let l = [
    u8 0x67; u8 0x5e; u8 0xb7; u8 0x79; u8 0xbd;
    u8 0xd2; u8 0xaf; u8 0xa5; u8 0xaf; u8 0xce;
    u8 0x62; u8 0x99; u8 0x70; u8 0x2c; u8 0x50;
    u8 0xc5; u8 0x07; u8 0x80; u8 0xd6; u8 0x91;
    u8 0xdb; u8 0xe8; u8 0xce; u8 0x03; u8 0x6b;
    u8 0xe8; u8 0xfb; u8 0xf3; u8 0x2e; u8 0xcc;
    u8 0x4f; u8 0x24;
  ] in
  assert_norm(List.Tot.length l == size_test16_export1_exportValue);
  l
let test16_export1_exportValue : lbytes size_test16_export1_exportValue = createL test16_export1_exportValue_list

let test16_export1_len:size_nat = 32
// generated: "436f6e746578742d32"
inline_for_extraction
let size_test16_export2_exportContext: size_nat = 9
let test16_export2_exportContext_list : l:list uint8{List.Tot.length l == size_test16_export2_exportContext} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x6e; u8 0x74; u8 0x65;
    u8 0x78; u8 0x74; u8 0x2d; u8 0x32;
  ] in
  assert_norm(List.Tot.length l == size_test16_export2_exportContext);
  l
let test16_export2_exportContext : lbytes size_test16_export2_exportContext = createL test16_export2_exportContext_list

// generated: "1f7b7578bd6223808ecd7d67479340c6a53415affeb99e5b1d85e4714bdbd27e"
inline_for_extraction
let size_test16_export2_exportValue: size_nat = 32
let test16_export2_exportValue_list : l:list uint8{List.Tot.length l == size_test16_export2_exportValue} =
  [@inline_let]
  let l = [
    u8 0x1f; u8 0x7b; u8 0x75; u8 0x78; u8 0xbd;
    u8 0x62; u8 0x23; u8 0x80; u8 0x8e; u8 0xcd;
    u8 0x7d; u8 0x67; u8 0x47; u8 0x93; u8 0x40;
    u8 0xc6; u8 0xa5; u8 0x34; u8 0x15; u8 0xaf;
    u8 0xfe; u8 0xb9; u8 0x9e; u8 0x5b; u8 0x1d;
    u8 0x85; u8 0xe4; u8 0x71; u8 0x4b; u8 0xdb;
    u8 0xd2; u8 0x7e;
  ] in
  assert_norm(List.Tot.length l == size_test16_export2_exportValue);
  l
let test16_export2_exportValue : lbytes size_test16_export2_exportValue = createL test16_export2_exportValue_list

let test16_export2_len:size_nat = 32
// generated: "436f6e746578742d33"
inline_for_extraction
let size_test16_export3_exportContext: size_nat = 9
let test16_export3_exportContext_list : l:list uint8{List.Tot.length l == size_test16_export3_exportContext} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x6e; u8 0x74; u8 0x65;
    u8 0x78; u8 0x74; u8 0x2d; u8 0x33;
  ] in
  assert_norm(List.Tot.length l == size_test16_export3_exportContext);
  l
let test16_export3_exportContext : lbytes size_test16_export3_exportContext = createL test16_export3_exportContext_list

// generated: "6e757409acf25d436b845f811fcaea5aac04079f19ed10b94807aabb260893de"
inline_for_extraction
let size_test16_export3_exportValue: size_nat = 32
let test16_export3_exportValue_list : l:list uint8{List.Tot.length l == size_test16_export3_exportValue} =
  [@inline_let]
  let l = [
    u8 0x6e; u8 0x75; u8 0x74; u8 0x09; u8 0xac;
    u8 0xf2; u8 0x5d; u8 0x43; u8 0x6b; u8 0x84;
    u8 0x5f; u8 0x81; u8 0x1f; u8 0xca; u8 0xea;
    u8 0x5a; u8 0xac; u8 0x04; u8 0x07; u8 0x9f;
    u8 0x19; u8 0xed; u8 0x10; u8 0xb9; u8 0x48;
    u8 0x07; u8 0xaa; u8 0xbb; u8 0x26; u8 0x08;
    u8 0x93; u8 0xde;
  ] in
  assert_norm(List.Tot.length l == size_test16_export3_exportValue);
  l
let test16_export3_exportValue : lbytes size_test16_export3_exportValue = createL test16_export3_exportValue_list

let test16_export3_len:size_nat = 32
// generated: "436f6e746578742d34"
inline_for_extraction
let size_test16_export4_exportContext: size_nat = 9
let test16_export4_exportContext_list : l:list uint8{List.Tot.length l == size_test16_export4_exportContext} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x6e; u8 0x74; u8 0x65;
    u8 0x78; u8 0x74; u8 0x2d; u8 0x34;
  ] in
  assert_norm(List.Tot.length l == size_test16_export4_exportContext);
  l
let test16_export4_exportContext : lbytes size_test16_export4_exportContext = createL test16_export4_exportContext_list

// generated: "fd0cacf2b1ebbd72836418c2a9ec8220992c055350ed03bddb927b3cdad288c9"
inline_for_extraction
let size_test16_export4_exportValue: size_nat = 32
let test16_export4_exportValue_list : l:list uint8{List.Tot.length l == size_test16_export4_exportValue} =
  [@inline_let]
  let l = [
    u8 0xfd; u8 0x0c; u8 0xac; u8 0xf2; u8 0xb1;
    u8 0xeb; u8 0xbd; u8 0x72; u8 0x83; u8 0x64;
    u8 0x18; u8 0xc2; u8 0xa9; u8 0xec; u8 0x82;
    u8 0x20; u8 0x99; u8 0x2c; u8 0x05; u8 0x53;
    u8 0x50; u8 0xed; u8 0x03; u8 0xbd; u8 0xdb;
    u8 0x92; u8 0x7b; u8 0x3c; u8 0xda; u8 0xd2;
    u8 0x88; u8 0xc9;
  ] in
  assert_norm(List.Tot.length l == size_test16_export4_exportValue);
  l
let test16_export4_exportValue : lbytes size_test16_export4_exportValue = createL test16_export4_exportValue_list

let test16_export4_len:size_nat = 32

let test16 () =
  let res = test_setupBase test16_ciphersuite test16_skEm test16_pkEm test16_skRm test16_pkRm test16_info test16_enc test16_zz test16_key_schedule_context test16_secret test16_key test16_nonce test16_exporterSecret test16_encryption0_nonce test16_encryption1_nonce in
  let seq0:HPKE.seq_aead_s test16_ciphersuite = 0 in
  let enc_res0 = test_encryption test16_ciphersuite test16_key test16_nonce test16_exporterSecret test16_encryption0_aad test16_encryption0_plaintext seq0 test16_encryption0_ciphertext test16_encryption0_nonce in

  assert_norm (1 < pow2 (8 * 12));
  let seq1:HPKE.seq_aead_s test16_ciphersuite = (seq0 + 1) in
  let enc_res1 = test_encryption test16_ciphersuite test16_key test16_nonce test16_exporterSecret test16_encryption1_aad test16_encryption1_plaintext seq1 test16_encryption1_ciphertext test16_encryption1_nonce in

  assert_norm (2 < pow2 (8 * 12));
  let seq2:HPKE.seq_aead_s test16_ciphersuite = (seq1 + 1) in
  let enc_res2 = test_encryption test16_ciphersuite test16_key test16_nonce test16_exporterSecret test16_encryption2_aad test16_encryption2_plaintext 2 test16_encryption2_ciphertext test16_encryption2_nonce in

  assert_norm (3 < pow2 (8 * 12));
  let seq3:HPKE.seq_aead_s test16_ciphersuite = (seq2 + 1) in
  let enc_res3 = test_encryption test16_ciphersuite test16_key test16_nonce test16_exporterSecret test16_encryption3_aad test16_encryption3_plaintext 3 test16_encryption3_ciphertext test16_encryption3_nonce in

  assert_norm (4 < pow2 (8 * 12));
  let seq4:HPKE.seq_aead_s test16_ciphersuite = (seq3 + 1) in
  let enc_res4 = test_encryption test16_ciphersuite test16_key test16_nonce test16_exporterSecret test16_encryption4_aad test16_encryption4_plaintext 4 test16_encryption4_ciphertext test16_encryption4_nonce in

  assert_norm (5 < pow2 (8 * 12));
  let seq5:HPKE.seq_aead_s test16_ciphersuite = (seq4 + 1) in
  let enc_res5 = test_encryption test16_ciphersuite test16_key test16_nonce test16_exporterSecret test16_encryption5_aad test16_encryption5_plaintext 5 test16_encryption5_ciphertext test16_encryption5_nonce in

  assert_norm (6 < pow2 (8 * 12));
  let seq6:HPKE.seq_aead_s test16_ciphersuite = (seq5 + 1) in
  let enc_res6 = test_encryption test16_ciphersuite test16_key test16_nonce test16_exporterSecret test16_encryption6_aad test16_encryption6_plaintext 6 test16_encryption6_ciphertext test16_encryption6_nonce in

  assert_norm (7 < pow2 (8 * 12));
  let seq7:HPKE.seq_aead_s test16_ciphersuite = (seq6 + 1) in
  let enc_res7 = test_encryption test16_ciphersuite test16_key test16_nonce test16_exporterSecret test16_encryption7_aad test16_encryption7_plaintext 7 test16_encryption7_ciphertext test16_encryption7_nonce in

  assert_norm (8 < pow2 (8 * 12));
  let seq8:HPKE.seq_aead_s test16_ciphersuite = (seq7 + 1) in
  let enc_res8 = test_encryption test16_ciphersuite test16_key test16_nonce test16_exporterSecret test16_encryption8_aad test16_encryption8_plaintext 8 test16_encryption8_ciphertext test16_encryption8_nonce in

  assert_norm (9 < pow2 (8 * 12));
  let seq9:HPKE.seq_aead_s test16_ciphersuite = (seq8 + 1) in
  let enc_res9 = test_encryption test16_ciphersuite test16_key test16_nonce test16_exporterSecret test16_encryption9_aad test16_encryption9_plaintext 9 test16_encryption9_ciphertext test16_encryption9_nonce in

  let exp_res0 = test_export test16_ciphersuite test16_key test16_nonce test16_exporterSecret test16_export0_exportContext test16_export0_len test16_export0_exportValue in

  let exp_res1 = test_export test16_ciphersuite test16_key test16_nonce test16_exporterSecret test16_export1_exportContext test16_export1_len test16_export1_exportValue in

  let exp_res2 = test_export test16_ciphersuite test16_key test16_nonce test16_exporterSecret test16_export2_exportContext test16_export2_len test16_export2_exportValue in

  let exp_res3 = test_export test16_ciphersuite test16_key test16_nonce test16_exporterSecret test16_export3_exportContext test16_export3_len test16_export3_exportValue in

  let exp_res4 = test_export test16_ciphersuite test16_key test16_nonce test16_exporterSecret test16_export4_exportContext test16_export4_len test16_export4_exportValue in

  enc_res0 && enc_res1 && enc_res2 && enc_res3 && enc_res4 && enc_res5 && enc_res6 && enc_res7 && enc_res8 && enc_res9 && res && exp_res0 && exp_res1 && exp_res2 && exp_res3 && exp_res4


// Skipped unsupported test case 17

// Skipped unsupported test case 18

// Skipped unsupported test case 19

let test20_mode: HPKE.mode = HPKE.Base
let test20_ciphersuite = DH.DH_Curve25519, Hash.SHA2_256, AEAD.CHACHA20_POLY1305, Hash.SHA2_512

// generated: "4f6465206f6e2061204772656369616e2055726e"
inline_for_extraction
let size_test20_info: size_nat = 20
let test20_info_list : l:list uint8{List.Tot.length l == size_test20_info} =
  [@inline_let]
  let l = [
    u8 0x4f; u8 0x64; u8 0x65; u8 0x20; u8 0x6f;
    u8 0x6e; u8 0x20; u8 0x61; u8 0x20; u8 0x47;
    u8 0x72; u8 0x65; u8 0x63; u8 0x69; u8 0x61;
    u8 0x6e; u8 0x20; u8 0x55; u8 0x72; u8 0x6e;
  ] in
  assert_norm(List.Tot.length l == size_test20_info);
  l
let test20_info : lbytes size_test20_info = createL test20_info_list

// generated: "a68784cf502a2f696383753096d9985892a6a01b37c3010d6ef02be8ffc352c5"
inline_for_extraction
let size_test20_skRm: size_nat = 32
let test20_skRm_list : l:list uint8{List.Tot.length l == size_test20_skRm} =
  [@inline_let]
  let l = [
    u8 0xa6; u8 0x87; u8 0x84; u8 0xcf; u8 0x50;
    u8 0x2a; u8 0x2f; u8 0x69; u8 0x63; u8 0x83;
    u8 0x75; u8 0x30; u8 0x96; u8 0xd9; u8 0x98;
    u8 0x58; u8 0x92; u8 0xa6; u8 0xa0; u8 0x1b;
    u8 0x37; u8 0xc3; u8 0x01; u8 0x0d; u8 0x6e;
    u8 0xf0; u8 0x2b; u8 0xe8; u8 0xff; u8 0xc3;
    u8 0x52; u8 0xc5;
  ] in
  assert_norm(List.Tot.length l == size_test20_skRm);
  l
let test20_skRm : lbytes size_test20_skRm = createL test20_skRm_list

// generated: "254ddb0301025713b36d6ed284b7c5ea2e50ef6dd7834e722f64ec784c93a016"
inline_for_extraction
let size_test20_skEm: size_nat = 32
let test20_skEm_list : l:list uint8{List.Tot.length l == size_test20_skEm} =
  [@inline_let]
  let l = [
    u8 0x25; u8 0x4d; u8 0xdb; u8 0x03; u8 0x01;
    u8 0x02; u8 0x57; u8 0x13; u8 0xb3; u8 0x6d;
    u8 0x6e; u8 0xd2; u8 0x84; u8 0xb7; u8 0xc5;
    u8 0xea; u8 0x2e; u8 0x50; u8 0xef; u8 0x6d;
    u8 0xd7; u8 0x83; u8 0x4e; u8 0x72; u8 0x2f;
    u8 0x64; u8 0xec; u8 0x78; u8 0x4c; u8 0x93;
    u8 0xa0; u8 0x16;
  ] in
  assert_norm(List.Tot.length l == size_test20_skEm);
  l
let test20_skEm : lbytes size_test20_skEm = createL test20_skEm_list

// generated: "846b3213db7fdf58ddb00276a5cf1aed611d44006ac515d7275c063eaaaf7818"
inline_for_extraction
let size_test20_pkRm: size_nat = 32
let test20_pkRm_list : l:list uint8{List.Tot.length l == size_test20_pkRm} =
  [@inline_let]
  let l = [
    u8 0x84; u8 0x6b; u8 0x32; u8 0x13; u8 0xdb;
    u8 0x7f; u8 0xdf; u8 0x58; u8 0xdd; u8 0xb0;
    u8 0x02; u8 0x76; u8 0xa5; u8 0xcf; u8 0x1a;
    u8 0xed; u8 0x61; u8 0x1d; u8 0x44; u8 0x00;
    u8 0x6a; u8 0xc5; u8 0x15; u8 0xd7; u8 0x27;
    u8 0x5c; u8 0x06; u8 0x3e; u8 0xaa; u8 0xaf;
    u8 0x78; u8 0x18;
  ] in
  assert_norm(List.Tot.length l == size_test20_pkRm);
  l
let test20_pkRm : lbytes size_test20_pkRm = createL test20_pkRm_list

// generated: "9bd600df413fc7d6960479c97618e034bf5bfc8bce6ff62d06aca9c5c06ff67e"
inline_for_extraction
let size_test20_pkEm: size_nat = 32
let test20_pkEm_list : l:list uint8{List.Tot.length l == size_test20_pkEm} =
  [@inline_let]
  let l = [
    u8 0x9b; u8 0xd6; u8 0x00; u8 0xdf; u8 0x41;
    u8 0x3f; u8 0xc7; u8 0xd6; u8 0x96; u8 0x04;
    u8 0x79; u8 0xc9; u8 0x76; u8 0x18; u8 0xe0;
    u8 0x34; u8 0xbf; u8 0x5b; u8 0xfc; u8 0x8b;
    u8 0xce; u8 0x6f; u8 0xf6; u8 0x2d; u8 0x06;
    u8 0xac; u8 0xa9; u8 0xc5; u8 0xc0; u8 0x6f;
    u8 0xf6; u8 0x7e;
  ] in
  assert_norm(List.Tot.length l == size_test20_pkEm);
  l
let test20_pkEm : lbytes size_test20_pkEm = createL test20_pkEm_list

// generated: "9bd600df413fc7d6960479c97618e034bf5bfc8bce6ff62d06aca9c5c06ff67e"
inline_for_extraction
let size_test20_enc: size_nat = 32
let test20_enc_list : l:list uint8{List.Tot.length l == size_test20_enc} =
  [@inline_let]
  let l = [
    u8 0x9b; u8 0xd6; u8 0x00; u8 0xdf; u8 0x41;
    u8 0x3f; u8 0xc7; u8 0xd6; u8 0x96; u8 0x04;
    u8 0x79; u8 0xc9; u8 0x76; u8 0x18; u8 0xe0;
    u8 0x34; u8 0xbf; u8 0x5b; u8 0xfc; u8 0x8b;
    u8 0xce; u8 0x6f; u8 0xf6; u8 0x2d; u8 0x06;
    u8 0xac; u8 0xa9; u8 0xc5; u8 0xc0; u8 0x6f;
    u8 0xf6; u8 0x7e;
  ] in
  assert_norm(List.Tot.length l == size_test20_enc);
  l
let test20_enc : lbytes size_test20_enc = createL test20_enc_list

// generated: "3f2fb629f4187835c5abdf6b811ae26f062319de8b7d6ca5758a45e76f1ee930"
inline_for_extraction
let size_test20_zz: size_nat = 32
let test20_zz_list : l:list uint8{List.Tot.length l == size_test20_zz} =
  [@inline_let]
  let l = [
    u8 0x3f; u8 0x2f; u8 0xb6; u8 0x29; u8 0xf4;
    u8 0x18; u8 0x78; u8 0x35; u8 0xc5; u8 0xab;
    u8 0xdf; u8 0x6b; u8 0x81; u8 0x1a; u8 0xe2;
    u8 0x6f; u8 0x06; u8 0x23; u8 0x19; u8 0xde;
    u8 0x8b; u8 0x7d; u8 0x6c; u8 0xa5; u8 0x75;
    u8 0x8a; u8 0x45; u8 0xe7; u8 0x6f; u8 0x1e;
    u8 0xe9; u8 0x30;
  ] in
  assert_norm(List.Tot.length l == size_test20_zz);
  l
let test20_zz : lbytes size_test20_zz = createL test20_zz_list

// generated: "002000030003008ca13b5d680259cfa265de13dd24f257083c9403c01a8aa3320b9195c8d1d812a58e72ff3dd3cf71dc81b21c354f84e9ca6863d5fd871711e356ed9bf5f1e0d0c70a83df9dcea90e894cbfd709dabe93b3390a8e9c5a18498a1ff32414767a12c08bf4d4df6cf9d953da725b79d07454eb69bd002235f35a241dec5f1088177c"
inline_for_extraction
let size_test20_key_schedule_context: size_nat = 135
let test20_key_schedule_context_list : l:list uint8{List.Tot.length l == size_test20_key_schedule_context} =
  [@inline_let]
  let l = [
    u8 0x00; u8 0x20; u8 0x00; u8 0x03; u8 0x00;
    u8 0x03; u8 0x00; u8 0x8c; u8 0xa1; u8 0x3b;
    u8 0x5d; u8 0x68; u8 0x02; u8 0x59; u8 0xcf;
    u8 0xa2; u8 0x65; u8 0xde; u8 0x13; u8 0xdd;
    u8 0x24; u8 0xf2; u8 0x57; u8 0x08; u8 0x3c;
    u8 0x94; u8 0x03; u8 0xc0; u8 0x1a; u8 0x8a;
    u8 0xa3; u8 0x32; u8 0x0b; u8 0x91; u8 0x95;
    u8 0xc8; u8 0xd1; u8 0xd8; u8 0x12; u8 0xa5;
    u8 0x8e; u8 0x72; u8 0xff; u8 0x3d; u8 0xd3;
    u8 0xcf; u8 0x71; u8 0xdc; u8 0x81; u8 0xb2;
    u8 0x1c; u8 0x35; u8 0x4f; u8 0x84; u8 0xe9;
    u8 0xca; u8 0x68; u8 0x63; u8 0xd5; u8 0xfd;
    u8 0x87; u8 0x17; u8 0x11; u8 0xe3; u8 0x56;
    u8 0xed; u8 0x9b; u8 0xf5; u8 0xf1; u8 0xe0;
    u8 0xd0; u8 0xc7; u8 0x0a; u8 0x83; u8 0xdf;
    u8 0x9d; u8 0xce; u8 0xa9; u8 0x0e; u8 0x89;
    u8 0x4c; u8 0xbf; u8 0xd7; u8 0x09; u8 0xda;
    u8 0xbe; u8 0x93; u8 0xb3; u8 0x39; u8 0x0a;
    u8 0x8e; u8 0x9c; u8 0x5a; u8 0x18; u8 0x49;
    u8 0x8a; u8 0x1f; u8 0xf3; u8 0x24; u8 0x14;
    u8 0x76; u8 0x7a; u8 0x12; u8 0xc0; u8 0x8b;
    u8 0xf4; u8 0xd4; u8 0xdf; u8 0x6c; u8 0xf9;
    u8 0xd9; u8 0x53; u8 0xda; u8 0x72; u8 0x5b;
    u8 0x79; u8 0xd0; u8 0x74; u8 0x54; u8 0xeb;
    u8 0x69; u8 0xbd; u8 0x00; u8 0x22; u8 0x35;
    u8 0xf3; u8 0x5a; u8 0x24; u8 0x1d; u8 0xec;
    u8 0x5f; u8 0x10; u8 0x88; u8 0x17; u8 0x7c;
  ] in
  assert_norm(List.Tot.length l == size_test20_key_schedule_context);
  l
let test20_key_schedule_context : lbytes size_test20_key_schedule_context = createL test20_key_schedule_context_list

// generated: "44dad06d4b8478c0f3de05b757e6ab15b9fa3176e1463b4957b8274d05d3b934c61a31371b5bb9e4bdba743c9e531e82b23c2671e64eee255bfd4ef46fa9cd21"
inline_for_extraction
let size_test20_secret: size_nat = 64
let test20_secret_list : l:list uint8{List.Tot.length l == size_test20_secret} =
  [@inline_let]
  let l = [
    u8 0x44; u8 0xda; u8 0xd0; u8 0x6d; u8 0x4b;
    u8 0x84; u8 0x78; u8 0xc0; u8 0xf3; u8 0xde;
    u8 0x05; u8 0xb7; u8 0x57; u8 0xe6; u8 0xab;
    u8 0x15; u8 0xb9; u8 0xfa; u8 0x31; u8 0x76;
    u8 0xe1; u8 0x46; u8 0x3b; u8 0x49; u8 0x57;
    u8 0xb8; u8 0x27; u8 0x4d; u8 0x05; u8 0xd3;
    u8 0xb9; u8 0x34; u8 0xc6; u8 0x1a; u8 0x31;
    u8 0x37; u8 0x1b; u8 0x5b; u8 0xb9; u8 0xe4;
    u8 0xbd; u8 0xba; u8 0x74; u8 0x3c; u8 0x9e;
    u8 0x53; u8 0x1e; u8 0x82; u8 0xb2; u8 0x3c;
    u8 0x26; u8 0x71; u8 0xe6; u8 0x4e; u8 0xee;
    u8 0x25; u8 0x5b; u8 0xfd; u8 0x4e; u8 0xf4;
    u8 0x6f; u8 0xa9; u8 0xcd; u8 0x21;
  ] in
  assert_norm(List.Tot.length l == size_test20_secret);
  l
let test20_secret : lbytes size_test20_secret = createL test20_secret_list

// generated: "672a3a4fd5f8722b64b0bb8affe6b0e98969521e0cd0dc800288ce8d62518aac"
inline_for_extraction
let size_test20_key: size_nat = 32
let test20_key_list : l:list uint8{List.Tot.length l == size_test20_key} =
  [@inline_let]
  let l = [
    u8 0x67; u8 0x2a; u8 0x3a; u8 0x4f; u8 0xd5;
    u8 0xf8; u8 0x72; u8 0x2b; u8 0x64; u8 0xb0;
    u8 0xbb; u8 0x8a; u8 0xff; u8 0xe6; u8 0xb0;
    u8 0xe9; u8 0x89; u8 0x69; u8 0x52; u8 0x1e;
    u8 0x0c; u8 0xd0; u8 0xdc; u8 0x80; u8 0x02;
    u8 0x88; u8 0xce; u8 0x8d; u8 0x62; u8 0x51;
    u8 0x8a; u8 0xac;
  ] in
  assert_norm(List.Tot.length l == size_test20_key);
  l
let test20_key : lbytes size_test20_key = createL test20_key_list

// generated: "45f6c510a1fc0edb6daa3202"
inline_for_extraction
let size_test20_nonce: size_nat = 12
let test20_nonce_list : l:list uint8{List.Tot.length l == size_test20_nonce} =
  [@inline_let]
  let l = [
    u8 0x45; u8 0xf6; u8 0xc5; u8 0x10; u8 0xa1;
    u8 0xfc; u8 0x0e; u8 0xdb; u8 0x6d; u8 0xaa;
    u8 0x32; u8 0x02;
  ] in
  assert_norm(List.Tot.length l == size_test20_nonce);
  l
let test20_nonce : lbytes size_test20_nonce = createL test20_nonce_list

// generated: "40ce32780357e5da5e433dc0b098359441f53f89a04322d5a8e2f71314da53c78bd7b9686c1d130a5961964e2c79ae8f109c0d89348e4c9aad47ab5df459c319"
inline_for_extraction
let size_test20_exporterSecret: size_nat = 64
let test20_exporterSecret_list : l:list uint8{List.Tot.length l == size_test20_exporterSecret} =
  [@inline_let]
  let l = [
    u8 0x40; u8 0xce; u8 0x32; u8 0x78; u8 0x03;
    u8 0x57; u8 0xe5; u8 0xda; u8 0x5e; u8 0x43;
    u8 0x3d; u8 0xc0; u8 0xb0; u8 0x98; u8 0x35;
    u8 0x94; u8 0x41; u8 0xf5; u8 0x3f; u8 0x89;
    u8 0xa0; u8 0x43; u8 0x22; u8 0xd5; u8 0xa8;
    u8 0xe2; u8 0xf7; u8 0x13; u8 0x14; u8 0xda;
    u8 0x53; u8 0xc7; u8 0x8b; u8 0xd7; u8 0xb9;
    u8 0x68; u8 0x6c; u8 0x1d; u8 0x13; u8 0x0a;
    u8 0x59; u8 0x61; u8 0x96; u8 0x4e; u8 0x2c;
    u8 0x79; u8 0xae; u8 0x8f; u8 0x10; u8 0x9c;
    u8 0x0d; u8 0x89; u8 0x34; u8 0x8e; u8 0x4c;
    u8 0x9a; u8 0xad; u8 0x47; u8 0xab; u8 0x5d;
    u8 0xf4; u8 0x59; u8 0xc3; u8 0x19;
  ] in
  assert_norm(List.Tot.length l == size_test20_exporterSecret);
  l
let test20_exporterSecret : lbytes size_test20_exporterSecret = createL test20_exporterSecret_list

// generated: "436f756e742d30"
inline_for_extraction
let size_test20_encryption0_aad: size_nat = 7
let test20_encryption0_aad_list : l:list uint8{List.Tot.length l == size_test20_encryption0_aad} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x75; u8 0x6e; u8 0x74;
    u8 0x2d; u8 0x30;
  ] in
  assert_norm(List.Tot.length l == size_test20_encryption0_aad);
  l
let test20_encryption0_aad : lbytes size_test20_encryption0_aad = createL test20_encryption0_aad_list

// generated: "f8ac57cff63855813b4691bbaa83781a366129a27b1294c2e870ecf489fe4b41d643cb370927c0bdcfdd64bd9d"
inline_for_extraction
let size_test20_encryption0_ciphertext: size_nat = 45
let test20_encryption0_ciphertext_list : l:list uint8{List.Tot.length l == size_test20_encryption0_ciphertext} =
  [@inline_let]
  let l = [
    u8 0xf8; u8 0xac; u8 0x57; u8 0xcf; u8 0xf6;
    u8 0x38; u8 0x55; u8 0x81; u8 0x3b; u8 0x46;
    u8 0x91; u8 0xbb; u8 0xaa; u8 0x83; u8 0x78;
    u8 0x1a; u8 0x36; u8 0x61; u8 0x29; u8 0xa2;
    u8 0x7b; u8 0x12; u8 0x94; u8 0xc2; u8 0xe8;
    u8 0x70; u8 0xec; u8 0xf4; u8 0x89; u8 0xfe;
    u8 0x4b; u8 0x41; u8 0xd6; u8 0x43; u8 0xcb;
    u8 0x37; u8 0x09; u8 0x27; u8 0xc0; u8 0xbd;
    u8 0xcf; u8 0xdd; u8 0x64; u8 0xbd; u8 0x9d;
  ] in
  assert_norm(List.Tot.length l == size_test20_encryption0_ciphertext);
  l
let test20_encryption0_ciphertext : lbytes size_test20_encryption0_ciphertext = createL test20_encryption0_ciphertext_list

// generated: "45f6c510a1fc0edb6daa3202"
inline_for_extraction
let size_test20_encryption0_nonce: size_nat = 12
let test20_encryption0_nonce_list : l:list uint8{List.Tot.length l == size_test20_encryption0_nonce} =
  [@inline_let]
  let l = [
    u8 0x45; u8 0xf6; u8 0xc5; u8 0x10; u8 0xa1;
    u8 0xfc; u8 0x0e; u8 0xdb; u8 0x6d; u8 0xaa;
    u8 0x32; u8 0x02;
  ] in
  assert_norm(List.Tot.length l == size_test20_encryption0_nonce);
  l
let test20_encryption0_nonce : lbytes size_test20_encryption0_nonce = createL test20_encryption0_nonce_list

// generated: "4265617574792069732074727574682c20747275746820626561757479"
inline_for_extraction
let size_test20_encryption0_plaintext: size_nat = 29
let test20_encryption0_plaintext_list : l:list uint8{List.Tot.length l == size_test20_encryption0_plaintext} =
  [@inline_let]
  let l = [
    u8 0x42; u8 0x65; u8 0x61; u8 0x75; u8 0x74;
    u8 0x79; u8 0x20; u8 0x69; u8 0x73; u8 0x20;
    u8 0x74; u8 0x72; u8 0x75; u8 0x74; u8 0x68;
    u8 0x2c; u8 0x20; u8 0x74; u8 0x72; u8 0x75;
    u8 0x74; u8 0x68; u8 0x20; u8 0x62; u8 0x65;
    u8 0x61; u8 0x75; u8 0x74; u8 0x79;
  ] in
  assert_norm(List.Tot.length l == size_test20_encryption0_plaintext);
  l
let test20_encryption0_plaintext : lbytes size_test20_encryption0_plaintext = createL test20_encryption0_plaintext_list

// generated: "436f756e742d31"
inline_for_extraction
let size_test20_encryption1_aad: size_nat = 7
let test20_encryption1_aad_list : l:list uint8{List.Tot.length l == size_test20_encryption1_aad} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x75; u8 0x6e; u8 0x74;
    u8 0x2d; u8 0x31;
  ] in
  assert_norm(List.Tot.length l == size_test20_encryption1_aad);
  l
let test20_encryption1_aad : lbytes size_test20_encryption1_aad = createL test20_encryption1_aad_list

// generated: "738fa47fdedca3e0cd2884c23875b601b8e88d1009db00454634eab4e5db5316b30528642b3082a77f165aecf6"
inline_for_extraction
let size_test20_encryption1_ciphertext: size_nat = 45
let test20_encryption1_ciphertext_list : l:list uint8{List.Tot.length l == size_test20_encryption1_ciphertext} =
  [@inline_let]
  let l = [
    u8 0x73; u8 0x8f; u8 0xa4; u8 0x7f; u8 0xde;
    u8 0xdc; u8 0xa3; u8 0xe0; u8 0xcd; u8 0x28;
    u8 0x84; u8 0xc2; u8 0x38; u8 0x75; u8 0xb6;
    u8 0x01; u8 0xb8; u8 0xe8; u8 0x8d; u8 0x10;
    u8 0x09; u8 0xdb; u8 0x00; u8 0x45; u8 0x46;
    u8 0x34; u8 0xea; u8 0xb4; u8 0xe5; u8 0xdb;
    u8 0x53; u8 0x16; u8 0xb3; u8 0x05; u8 0x28;
    u8 0x64; u8 0x2b; u8 0x30; u8 0x82; u8 0xa7;
    u8 0x7f; u8 0x16; u8 0x5a; u8 0xec; u8 0xf6;
  ] in
  assert_norm(List.Tot.length l == size_test20_encryption1_ciphertext);
  l
let test20_encryption1_ciphertext : lbytes size_test20_encryption1_ciphertext = createL test20_encryption1_ciphertext_list

// generated: "45f6c510a1fc0edb6daa3203"
inline_for_extraction
let size_test20_encryption1_nonce: size_nat = 12
let test20_encryption1_nonce_list : l:list uint8{List.Tot.length l == size_test20_encryption1_nonce} =
  [@inline_let]
  let l = [
    u8 0x45; u8 0xf6; u8 0xc5; u8 0x10; u8 0xa1;
    u8 0xfc; u8 0x0e; u8 0xdb; u8 0x6d; u8 0xaa;
    u8 0x32; u8 0x03;
  ] in
  assert_norm(List.Tot.length l == size_test20_encryption1_nonce);
  l
let test20_encryption1_nonce : lbytes size_test20_encryption1_nonce = createL test20_encryption1_nonce_list

// generated: "4265617574792069732074727574682c20747275746820626561757479"
inline_for_extraction
let size_test20_encryption1_plaintext: size_nat = 29
let test20_encryption1_plaintext_list : l:list uint8{List.Tot.length l == size_test20_encryption1_plaintext} =
  [@inline_let]
  let l = [
    u8 0x42; u8 0x65; u8 0x61; u8 0x75; u8 0x74;
    u8 0x79; u8 0x20; u8 0x69; u8 0x73; u8 0x20;
    u8 0x74; u8 0x72; u8 0x75; u8 0x74; u8 0x68;
    u8 0x2c; u8 0x20; u8 0x74; u8 0x72; u8 0x75;
    u8 0x74; u8 0x68; u8 0x20; u8 0x62; u8 0x65;
    u8 0x61; u8 0x75; u8 0x74; u8 0x79;
  ] in
  assert_norm(List.Tot.length l == size_test20_encryption1_plaintext);
  l
let test20_encryption1_plaintext : lbytes size_test20_encryption1_plaintext = createL test20_encryption1_plaintext_list

// generated: "436f756e742d32"
inline_for_extraction
let size_test20_encryption2_aad: size_nat = 7
let test20_encryption2_aad_list : l:list uint8{List.Tot.length l == size_test20_encryption2_aad} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x75; u8 0x6e; u8 0x74;
    u8 0x2d; u8 0x32;
  ] in
  assert_norm(List.Tot.length l == size_test20_encryption2_aad);
  l
let test20_encryption2_aad : lbytes size_test20_encryption2_aad = createL test20_encryption2_aad_list

// generated: "b68cd2b2c7eb87d736f2325f131827557c40958b61165e0fc533ce940c6709a9f9135fd54355beb668028c9dbd"
inline_for_extraction
let size_test20_encryption2_ciphertext: size_nat = 45
let test20_encryption2_ciphertext_list : l:list uint8{List.Tot.length l == size_test20_encryption2_ciphertext} =
  [@inline_let]
  let l = [
    u8 0xb6; u8 0x8c; u8 0xd2; u8 0xb2; u8 0xc7;
    u8 0xeb; u8 0x87; u8 0xd7; u8 0x36; u8 0xf2;
    u8 0x32; u8 0x5f; u8 0x13; u8 0x18; u8 0x27;
    u8 0x55; u8 0x7c; u8 0x40; u8 0x95; u8 0x8b;
    u8 0x61; u8 0x16; u8 0x5e; u8 0x0f; u8 0xc5;
    u8 0x33; u8 0xce; u8 0x94; u8 0x0c; u8 0x67;
    u8 0x09; u8 0xa9; u8 0xf9; u8 0x13; u8 0x5f;
    u8 0xd5; u8 0x43; u8 0x55; u8 0xbe; u8 0xb6;
    u8 0x68; u8 0x02; u8 0x8c; u8 0x9d; u8 0xbd;
  ] in
  assert_norm(List.Tot.length l == size_test20_encryption2_ciphertext);
  l
let test20_encryption2_ciphertext : lbytes size_test20_encryption2_ciphertext = createL test20_encryption2_ciphertext_list

// generated: "45f6c510a1fc0edb6daa3200"
inline_for_extraction
let size_test20_encryption2_nonce: size_nat = 12
let test20_encryption2_nonce_list : l:list uint8{List.Tot.length l == size_test20_encryption2_nonce} =
  [@inline_let]
  let l = [
    u8 0x45; u8 0xf6; u8 0xc5; u8 0x10; u8 0xa1;
    u8 0xfc; u8 0x0e; u8 0xdb; u8 0x6d; u8 0xaa;
    u8 0x32; u8 0x00;
  ] in
  assert_norm(List.Tot.length l == size_test20_encryption2_nonce);
  l
let test20_encryption2_nonce : lbytes size_test20_encryption2_nonce = createL test20_encryption2_nonce_list

// generated: "4265617574792069732074727574682c20747275746820626561757479"
inline_for_extraction
let size_test20_encryption2_plaintext: size_nat = 29
let test20_encryption2_plaintext_list : l:list uint8{List.Tot.length l == size_test20_encryption2_plaintext} =
  [@inline_let]
  let l = [
    u8 0x42; u8 0x65; u8 0x61; u8 0x75; u8 0x74;
    u8 0x79; u8 0x20; u8 0x69; u8 0x73; u8 0x20;
    u8 0x74; u8 0x72; u8 0x75; u8 0x74; u8 0x68;
    u8 0x2c; u8 0x20; u8 0x74; u8 0x72; u8 0x75;
    u8 0x74; u8 0x68; u8 0x20; u8 0x62; u8 0x65;
    u8 0x61; u8 0x75; u8 0x74; u8 0x79;
  ] in
  assert_norm(List.Tot.length l == size_test20_encryption2_plaintext);
  l
let test20_encryption2_plaintext : lbytes size_test20_encryption2_plaintext = createL test20_encryption2_plaintext_list

// generated: "436f756e742d33"
inline_for_extraction
let size_test20_encryption3_aad: size_nat = 7
let test20_encryption3_aad_list : l:list uint8{List.Tot.length l == size_test20_encryption3_aad} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x75; u8 0x6e; u8 0x74;
    u8 0x2d; u8 0x33;
  ] in
  assert_norm(List.Tot.length l == size_test20_encryption3_aad);
  l
let test20_encryption3_aad : lbytes size_test20_encryption3_aad = createL test20_encryption3_aad_list

// generated: "213042fbe3ab17e30dc4eb76d916983a22d3a420018fe769647bb90b5444407f2d72cf2b3352f63f7f5943ae6b"
inline_for_extraction
let size_test20_encryption3_ciphertext: size_nat = 45
let test20_encryption3_ciphertext_list : l:list uint8{List.Tot.length l == size_test20_encryption3_ciphertext} =
  [@inline_let]
  let l = [
    u8 0x21; u8 0x30; u8 0x42; u8 0xfb; u8 0xe3;
    u8 0xab; u8 0x17; u8 0xe3; u8 0x0d; u8 0xc4;
    u8 0xeb; u8 0x76; u8 0xd9; u8 0x16; u8 0x98;
    u8 0x3a; u8 0x22; u8 0xd3; u8 0xa4; u8 0x20;
    u8 0x01; u8 0x8f; u8 0xe7; u8 0x69; u8 0x64;
    u8 0x7b; u8 0xb9; u8 0x0b; u8 0x54; u8 0x44;
    u8 0x40; u8 0x7f; u8 0x2d; u8 0x72; u8 0xcf;
    u8 0x2b; u8 0x33; u8 0x52; u8 0xf6; u8 0x3f;
    u8 0x7f; u8 0x59; u8 0x43; u8 0xae; u8 0x6b;
  ] in
  assert_norm(List.Tot.length l == size_test20_encryption3_ciphertext);
  l
let test20_encryption3_ciphertext : lbytes size_test20_encryption3_ciphertext = createL test20_encryption3_ciphertext_list

// generated: "45f6c510a1fc0edb6daa3201"
inline_for_extraction
let size_test20_encryption3_nonce: size_nat = 12
let test20_encryption3_nonce_list : l:list uint8{List.Tot.length l == size_test20_encryption3_nonce} =
  [@inline_let]
  let l = [
    u8 0x45; u8 0xf6; u8 0xc5; u8 0x10; u8 0xa1;
    u8 0xfc; u8 0x0e; u8 0xdb; u8 0x6d; u8 0xaa;
    u8 0x32; u8 0x01;
  ] in
  assert_norm(List.Tot.length l == size_test20_encryption3_nonce);
  l
let test20_encryption3_nonce : lbytes size_test20_encryption3_nonce = createL test20_encryption3_nonce_list

// generated: "4265617574792069732074727574682c20747275746820626561757479"
inline_for_extraction
let size_test20_encryption3_plaintext: size_nat = 29
let test20_encryption3_plaintext_list : l:list uint8{List.Tot.length l == size_test20_encryption3_plaintext} =
  [@inline_let]
  let l = [
    u8 0x42; u8 0x65; u8 0x61; u8 0x75; u8 0x74;
    u8 0x79; u8 0x20; u8 0x69; u8 0x73; u8 0x20;
    u8 0x74; u8 0x72; u8 0x75; u8 0x74; u8 0x68;
    u8 0x2c; u8 0x20; u8 0x74; u8 0x72; u8 0x75;
    u8 0x74; u8 0x68; u8 0x20; u8 0x62; u8 0x65;
    u8 0x61; u8 0x75; u8 0x74; u8 0x79;
  ] in
  assert_norm(List.Tot.length l == size_test20_encryption3_plaintext);
  l
let test20_encryption3_plaintext : lbytes size_test20_encryption3_plaintext = createL test20_encryption3_plaintext_list

// generated: "436f756e742d34"
inline_for_extraction
let size_test20_encryption4_aad: size_nat = 7
let test20_encryption4_aad_list : l:list uint8{List.Tot.length l == size_test20_encryption4_aad} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x75; u8 0x6e; u8 0x74;
    u8 0x2d; u8 0x34;
  ] in
  assert_norm(List.Tot.length l == size_test20_encryption4_aad);
  l
let test20_encryption4_aad : lbytes size_test20_encryption4_aad = createL test20_encryption4_aad_list

// generated: "8a25d2a5409ff2fe8a48b89a0bb7726f59a11a284acbd055f55086ebd3b608b3db492511197c4293f029ae69e0"
inline_for_extraction
let size_test20_encryption4_ciphertext: size_nat = 45
let test20_encryption4_ciphertext_list : l:list uint8{List.Tot.length l == size_test20_encryption4_ciphertext} =
  [@inline_let]
  let l = [
    u8 0x8a; u8 0x25; u8 0xd2; u8 0xa5; u8 0x40;
    u8 0x9f; u8 0xf2; u8 0xfe; u8 0x8a; u8 0x48;
    u8 0xb8; u8 0x9a; u8 0x0b; u8 0xb7; u8 0x72;
    u8 0x6f; u8 0x59; u8 0xa1; u8 0x1a; u8 0x28;
    u8 0x4a; u8 0xcb; u8 0xd0; u8 0x55; u8 0xf5;
    u8 0x50; u8 0x86; u8 0xeb; u8 0xd3; u8 0xb6;
    u8 0x08; u8 0xb3; u8 0xdb; u8 0x49; u8 0x25;
    u8 0x11; u8 0x19; u8 0x7c; u8 0x42; u8 0x93;
    u8 0xf0; u8 0x29; u8 0xae; u8 0x69; u8 0xe0;
  ] in
  assert_norm(List.Tot.length l == size_test20_encryption4_ciphertext);
  l
let test20_encryption4_ciphertext : lbytes size_test20_encryption4_ciphertext = createL test20_encryption4_ciphertext_list

// generated: "45f6c510a1fc0edb6daa3206"
inline_for_extraction
let size_test20_encryption4_nonce: size_nat = 12
let test20_encryption4_nonce_list : l:list uint8{List.Tot.length l == size_test20_encryption4_nonce} =
  [@inline_let]
  let l = [
    u8 0x45; u8 0xf6; u8 0xc5; u8 0x10; u8 0xa1;
    u8 0xfc; u8 0x0e; u8 0xdb; u8 0x6d; u8 0xaa;
    u8 0x32; u8 0x06;
  ] in
  assert_norm(List.Tot.length l == size_test20_encryption4_nonce);
  l
let test20_encryption4_nonce : lbytes size_test20_encryption4_nonce = createL test20_encryption4_nonce_list

// generated: "4265617574792069732074727574682c20747275746820626561757479"
inline_for_extraction
let size_test20_encryption4_plaintext: size_nat = 29
let test20_encryption4_plaintext_list : l:list uint8{List.Tot.length l == size_test20_encryption4_plaintext} =
  [@inline_let]
  let l = [
    u8 0x42; u8 0x65; u8 0x61; u8 0x75; u8 0x74;
    u8 0x79; u8 0x20; u8 0x69; u8 0x73; u8 0x20;
    u8 0x74; u8 0x72; u8 0x75; u8 0x74; u8 0x68;
    u8 0x2c; u8 0x20; u8 0x74; u8 0x72; u8 0x75;
    u8 0x74; u8 0x68; u8 0x20; u8 0x62; u8 0x65;
    u8 0x61; u8 0x75; u8 0x74; u8 0x79;
  ] in
  assert_norm(List.Tot.length l == size_test20_encryption4_plaintext);
  l
let test20_encryption4_plaintext : lbytes size_test20_encryption4_plaintext = createL test20_encryption4_plaintext_list

// generated: "436f756e742d35"
inline_for_extraction
let size_test20_encryption5_aad: size_nat = 7
let test20_encryption5_aad_list : l:list uint8{List.Tot.length l == size_test20_encryption5_aad} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x75; u8 0x6e; u8 0x74;
    u8 0x2d; u8 0x35;
  ] in
  assert_norm(List.Tot.length l == size_test20_encryption5_aad);
  l
let test20_encryption5_aad : lbytes size_test20_encryption5_aad = createL test20_encryption5_aad_list

// generated: "0cd0816307162dbb636902701b8aca8c608a5f8d3cd4ac908a587584fe16cb3fa3f11694a873fd330d5b23a684"
inline_for_extraction
let size_test20_encryption5_ciphertext: size_nat = 45
let test20_encryption5_ciphertext_list : l:list uint8{List.Tot.length l == size_test20_encryption5_ciphertext} =
  [@inline_let]
  let l = [
    u8 0x0c; u8 0xd0; u8 0x81; u8 0x63; u8 0x07;
    u8 0x16; u8 0x2d; u8 0xbb; u8 0x63; u8 0x69;
    u8 0x02; u8 0x70; u8 0x1b; u8 0x8a; u8 0xca;
    u8 0x8c; u8 0x60; u8 0x8a; u8 0x5f; u8 0x8d;
    u8 0x3c; u8 0xd4; u8 0xac; u8 0x90; u8 0x8a;
    u8 0x58; u8 0x75; u8 0x84; u8 0xfe; u8 0x16;
    u8 0xcb; u8 0x3f; u8 0xa3; u8 0xf1; u8 0x16;
    u8 0x94; u8 0xa8; u8 0x73; u8 0xfd; u8 0x33;
    u8 0x0d; u8 0x5b; u8 0x23; u8 0xa6; u8 0x84;
  ] in
  assert_norm(List.Tot.length l == size_test20_encryption5_ciphertext);
  l
let test20_encryption5_ciphertext : lbytes size_test20_encryption5_ciphertext = createL test20_encryption5_ciphertext_list

// generated: "45f6c510a1fc0edb6daa3207"
inline_for_extraction
let size_test20_encryption5_nonce: size_nat = 12
let test20_encryption5_nonce_list : l:list uint8{List.Tot.length l == size_test20_encryption5_nonce} =
  [@inline_let]
  let l = [
    u8 0x45; u8 0xf6; u8 0xc5; u8 0x10; u8 0xa1;
    u8 0xfc; u8 0x0e; u8 0xdb; u8 0x6d; u8 0xaa;
    u8 0x32; u8 0x07;
  ] in
  assert_norm(List.Tot.length l == size_test20_encryption5_nonce);
  l
let test20_encryption5_nonce : lbytes size_test20_encryption5_nonce = createL test20_encryption5_nonce_list

// generated: "4265617574792069732074727574682c20747275746820626561757479"
inline_for_extraction
let size_test20_encryption5_plaintext: size_nat = 29
let test20_encryption5_plaintext_list : l:list uint8{List.Tot.length l == size_test20_encryption5_plaintext} =
  [@inline_let]
  let l = [
    u8 0x42; u8 0x65; u8 0x61; u8 0x75; u8 0x74;
    u8 0x79; u8 0x20; u8 0x69; u8 0x73; u8 0x20;
    u8 0x74; u8 0x72; u8 0x75; u8 0x74; u8 0x68;
    u8 0x2c; u8 0x20; u8 0x74; u8 0x72; u8 0x75;
    u8 0x74; u8 0x68; u8 0x20; u8 0x62; u8 0x65;
    u8 0x61; u8 0x75; u8 0x74; u8 0x79;
  ] in
  assert_norm(List.Tot.length l == size_test20_encryption5_plaintext);
  l
let test20_encryption5_plaintext : lbytes size_test20_encryption5_plaintext = createL test20_encryption5_plaintext_list

// generated: "436f756e742d36"
inline_for_extraction
let size_test20_encryption6_aad: size_nat = 7
let test20_encryption6_aad_list : l:list uint8{List.Tot.length l == size_test20_encryption6_aad} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x75; u8 0x6e; u8 0x74;
    u8 0x2d; u8 0x36;
  ] in
  assert_norm(List.Tot.length l == size_test20_encryption6_aad);
  l
let test20_encryption6_aad : lbytes size_test20_encryption6_aad = createL test20_encryption6_aad_list

// generated: "517c11c403fd70eef5af68a3296908187e27a818320b701ce1ae50ef9b07328b752f8dba3243fe949fe67576ba"
inline_for_extraction
let size_test20_encryption6_ciphertext: size_nat = 45
let test20_encryption6_ciphertext_list : l:list uint8{List.Tot.length l == size_test20_encryption6_ciphertext} =
  [@inline_let]
  let l = [
    u8 0x51; u8 0x7c; u8 0x11; u8 0xc4; u8 0x03;
    u8 0xfd; u8 0x70; u8 0xee; u8 0xf5; u8 0xaf;
    u8 0x68; u8 0xa3; u8 0x29; u8 0x69; u8 0x08;
    u8 0x18; u8 0x7e; u8 0x27; u8 0xa8; u8 0x18;
    u8 0x32; u8 0x0b; u8 0x70; u8 0x1c; u8 0xe1;
    u8 0xae; u8 0x50; u8 0xef; u8 0x9b; u8 0x07;
    u8 0x32; u8 0x8b; u8 0x75; u8 0x2f; u8 0x8d;
    u8 0xba; u8 0x32; u8 0x43; u8 0xfe; u8 0x94;
    u8 0x9f; u8 0xe6; u8 0x75; u8 0x76; u8 0xba;
  ] in
  assert_norm(List.Tot.length l == size_test20_encryption6_ciphertext);
  l
let test20_encryption6_ciphertext : lbytes size_test20_encryption6_ciphertext = createL test20_encryption6_ciphertext_list

// generated: "45f6c510a1fc0edb6daa3204"
inline_for_extraction
let size_test20_encryption6_nonce: size_nat = 12
let test20_encryption6_nonce_list : l:list uint8{List.Tot.length l == size_test20_encryption6_nonce} =
  [@inline_let]
  let l = [
    u8 0x45; u8 0xf6; u8 0xc5; u8 0x10; u8 0xa1;
    u8 0xfc; u8 0x0e; u8 0xdb; u8 0x6d; u8 0xaa;
    u8 0x32; u8 0x04;
  ] in
  assert_norm(List.Tot.length l == size_test20_encryption6_nonce);
  l
let test20_encryption6_nonce : lbytes size_test20_encryption6_nonce = createL test20_encryption6_nonce_list

// generated: "4265617574792069732074727574682c20747275746820626561757479"
inline_for_extraction
let size_test20_encryption6_plaintext: size_nat = 29
let test20_encryption6_plaintext_list : l:list uint8{List.Tot.length l == size_test20_encryption6_plaintext} =
  [@inline_let]
  let l = [
    u8 0x42; u8 0x65; u8 0x61; u8 0x75; u8 0x74;
    u8 0x79; u8 0x20; u8 0x69; u8 0x73; u8 0x20;
    u8 0x74; u8 0x72; u8 0x75; u8 0x74; u8 0x68;
    u8 0x2c; u8 0x20; u8 0x74; u8 0x72; u8 0x75;
    u8 0x74; u8 0x68; u8 0x20; u8 0x62; u8 0x65;
    u8 0x61; u8 0x75; u8 0x74; u8 0x79;
  ] in
  assert_norm(List.Tot.length l == size_test20_encryption6_plaintext);
  l
let test20_encryption6_plaintext : lbytes size_test20_encryption6_plaintext = createL test20_encryption6_plaintext_list

// generated: "436f756e742d37"
inline_for_extraction
let size_test20_encryption7_aad: size_nat = 7
let test20_encryption7_aad_list : l:list uint8{List.Tot.length l == size_test20_encryption7_aad} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x75; u8 0x6e; u8 0x74;
    u8 0x2d; u8 0x37;
  ] in
  assert_norm(List.Tot.length l == size_test20_encryption7_aad);
  l
let test20_encryption7_aad : lbytes size_test20_encryption7_aad = createL test20_encryption7_aad_list

// generated: "b157b7ed9004b8944b55178708a933616494e8cf9358e31e74f008969cfb29e037ae5761977041703319bf8ccd"
inline_for_extraction
let size_test20_encryption7_ciphertext: size_nat = 45
let test20_encryption7_ciphertext_list : l:list uint8{List.Tot.length l == size_test20_encryption7_ciphertext} =
  [@inline_let]
  let l = [
    u8 0xb1; u8 0x57; u8 0xb7; u8 0xed; u8 0x90;
    u8 0x04; u8 0xb8; u8 0x94; u8 0x4b; u8 0x55;
    u8 0x17; u8 0x87; u8 0x08; u8 0xa9; u8 0x33;
    u8 0x61; u8 0x64; u8 0x94; u8 0xe8; u8 0xcf;
    u8 0x93; u8 0x58; u8 0xe3; u8 0x1e; u8 0x74;
    u8 0xf0; u8 0x08; u8 0x96; u8 0x9c; u8 0xfb;
    u8 0x29; u8 0xe0; u8 0x37; u8 0xae; u8 0x57;
    u8 0x61; u8 0x97; u8 0x70; u8 0x41; u8 0x70;
    u8 0x33; u8 0x19; u8 0xbf; u8 0x8c; u8 0xcd;
  ] in
  assert_norm(List.Tot.length l == size_test20_encryption7_ciphertext);
  l
let test20_encryption7_ciphertext : lbytes size_test20_encryption7_ciphertext = createL test20_encryption7_ciphertext_list

// generated: "45f6c510a1fc0edb6daa3205"
inline_for_extraction
let size_test20_encryption7_nonce: size_nat = 12
let test20_encryption7_nonce_list : l:list uint8{List.Tot.length l == size_test20_encryption7_nonce} =
  [@inline_let]
  let l = [
    u8 0x45; u8 0xf6; u8 0xc5; u8 0x10; u8 0xa1;
    u8 0xfc; u8 0x0e; u8 0xdb; u8 0x6d; u8 0xaa;
    u8 0x32; u8 0x05;
  ] in
  assert_norm(List.Tot.length l == size_test20_encryption7_nonce);
  l
let test20_encryption7_nonce : lbytes size_test20_encryption7_nonce = createL test20_encryption7_nonce_list

// generated: "4265617574792069732074727574682c20747275746820626561757479"
inline_for_extraction
let size_test20_encryption7_plaintext: size_nat = 29
let test20_encryption7_plaintext_list : l:list uint8{List.Tot.length l == size_test20_encryption7_plaintext} =
  [@inline_let]
  let l = [
    u8 0x42; u8 0x65; u8 0x61; u8 0x75; u8 0x74;
    u8 0x79; u8 0x20; u8 0x69; u8 0x73; u8 0x20;
    u8 0x74; u8 0x72; u8 0x75; u8 0x74; u8 0x68;
    u8 0x2c; u8 0x20; u8 0x74; u8 0x72; u8 0x75;
    u8 0x74; u8 0x68; u8 0x20; u8 0x62; u8 0x65;
    u8 0x61; u8 0x75; u8 0x74; u8 0x79;
  ] in
  assert_norm(List.Tot.length l == size_test20_encryption7_plaintext);
  l
let test20_encryption7_plaintext : lbytes size_test20_encryption7_plaintext = createL test20_encryption7_plaintext_list

// generated: "436f756e742d38"
inline_for_extraction
let size_test20_encryption8_aad: size_nat = 7
let test20_encryption8_aad_list : l:list uint8{List.Tot.length l == size_test20_encryption8_aad} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x75; u8 0x6e; u8 0x74;
    u8 0x2d; u8 0x38;
  ] in
  assert_norm(List.Tot.length l == size_test20_encryption8_aad);
  l
let test20_encryption8_aad : lbytes size_test20_encryption8_aad = createL test20_encryption8_aad_list

// generated: "6a9e7786a5791d7f96cfe0071aa2766029d6aef016a3c6b9868b395149e51f0e9e85393a468c0f55dfdbb1a623"
inline_for_extraction
let size_test20_encryption8_ciphertext: size_nat = 45
let test20_encryption8_ciphertext_list : l:list uint8{List.Tot.length l == size_test20_encryption8_ciphertext} =
  [@inline_let]
  let l = [
    u8 0x6a; u8 0x9e; u8 0x77; u8 0x86; u8 0xa5;
    u8 0x79; u8 0x1d; u8 0x7f; u8 0x96; u8 0xcf;
    u8 0xe0; u8 0x07; u8 0x1a; u8 0xa2; u8 0x76;
    u8 0x60; u8 0x29; u8 0xd6; u8 0xae; u8 0xf0;
    u8 0x16; u8 0xa3; u8 0xc6; u8 0xb9; u8 0x86;
    u8 0x8b; u8 0x39; u8 0x51; u8 0x49; u8 0xe5;
    u8 0x1f; u8 0x0e; u8 0x9e; u8 0x85; u8 0x39;
    u8 0x3a; u8 0x46; u8 0x8c; u8 0x0f; u8 0x55;
    u8 0xdf; u8 0xdb; u8 0xb1; u8 0xa6; u8 0x23;
  ] in
  assert_norm(List.Tot.length l == size_test20_encryption8_ciphertext);
  l
let test20_encryption8_ciphertext : lbytes size_test20_encryption8_ciphertext = createL test20_encryption8_ciphertext_list

// generated: "45f6c510a1fc0edb6daa320a"
inline_for_extraction
let size_test20_encryption8_nonce: size_nat = 12
let test20_encryption8_nonce_list : l:list uint8{List.Tot.length l == size_test20_encryption8_nonce} =
  [@inline_let]
  let l = [
    u8 0x45; u8 0xf6; u8 0xc5; u8 0x10; u8 0xa1;
    u8 0xfc; u8 0x0e; u8 0xdb; u8 0x6d; u8 0xaa;
    u8 0x32; u8 0x0a;
  ] in
  assert_norm(List.Tot.length l == size_test20_encryption8_nonce);
  l
let test20_encryption8_nonce : lbytes size_test20_encryption8_nonce = createL test20_encryption8_nonce_list

// generated: "4265617574792069732074727574682c20747275746820626561757479"
inline_for_extraction
let size_test20_encryption8_plaintext: size_nat = 29
let test20_encryption8_plaintext_list : l:list uint8{List.Tot.length l == size_test20_encryption8_plaintext} =
  [@inline_let]
  let l = [
    u8 0x42; u8 0x65; u8 0x61; u8 0x75; u8 0x74;
    u8 0x79; u8 0x20; u8 0x69; u8 0x73; u8 0x20;
    u8 0x74; u8 0x72; u8 0x75; u8 0x74; u8 0x68;
    u8 0x2c; u8 0x20; u8 0x74; u8 0x72; u8 0x75;
    u8 0x74; u8 0x68; u8 0x20; u8 0x62; u8 0x65;
    u8 0x61; u8 0x75; u8 0x74; u8 0x79;
  ] in
  assert_norm(List.Tot.length l == size_test20_encryption8_plaintext);
  l
let test20_encryption8_plaintext : lbytes size_test20_encryption8_plaintext = createL test20_encryption8_plaintext_list

// generated: "436f756e742d39"
inline_for_extraction
let size_test20_encryption9_aad: size_nat = 7
let test20_encryption9_aad_list : l:list uint8{List.Tot.length l == size_test20_encryption9_aad} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x75; u8 0x6e; u8 0x74;
    u8 0x2d; u8 0x39;
  ] in
  assert_norm(List.Tot.length l == size_test20_encryption9_aad);
  l
let test20_encryption9_aad : lbytes size_test20_encryption9_aad = createL test20_encryption9_aad_list

// generated: "d2f5e25ead4226c144259b75e106e17e122b22b34af29ea68989214ce2666d7faca8f26acb72cef660c0928145"
inline_for_extraction
let size_test20_encryption9_ciphertext: size_nat = 45
let test20_encryption9_ciphertext_list : l:list uint8{List.Tot.length l == size_test20_encryption9_ciphertext} =
  [@inline_let]
  let l = [
    u8 0xd2; u8 0xf5; u8 0xe2; u8 0x5e; u8 0xad;
    u8 0x42; u8 0x26; u8 0xc1; u8 0x44; u8 0x25;
    u8 0x9b; u8 0x75; u8 0xe1; u8 0x06; u8 0xe1;
    u8 0x7e; u8 0x12; u8 0x2b; u8 0x22; u8 0xb3;
    u8 0x4a; u8 0xf2; u8 0x9e; u8 0xa6; u8 0x89;
    u8 0x89; u8 0x21; u8 0x4c; u8 0xe2; u8 0x66;
    u8 0x6d; u8 0x7f; u8 0xac; u8 0xa8; u8 0xf2;
    u8 0x6a; u8 0xcb; u8 0x72; u8 0xce; u8 0xf6;
    u8 0x60; u8 0xc0; u8 0x92; u8 0x81; u8 0x45;
  ] in
  assert_norm(List.Tot.length l == size_test20_encryption9_ciphertext);
  l
let test20_encryption9_ciphertext : lbytes size_test20_encryption9_ciphertext = createL test20_encryption9_ciphertext_list

// generated: "45f6c510a1fc0edb6daa320b"
inline_for_extraction
let size_test20_encryption9_nonce: size_nat = 12
let test20_encryption9_nonce_list : l:list uint8{List.Tot.length l == size_test20_encryption9_nonce} =
  [@inline_let]
  let l = [
    u8 0x45; u8 0xf6; u8 0xc5; u8 0x10; u8 0xa1;
    u8 0xfc; u8 0x0e; u8 0xdb; u8 0x6d; u8 0xaa;
    u8 0x32; u8 0x0b;
  ] in
  assert_norm(List.Tot.length l == size_test20_encryption9_nonce);
  l
let test20_encryption9_nonce : lbytes size_test20_encryption9_nonce = createL test20_encryption9_nonce_list

// generated: "4265617574792069732074727574682c20747275746820626561757479"
inline_for_extraction
let size_test20_encryption9_plaintext: size_nat = 29
let test20_encryption9_plaintext_list : l:list uint8{List.Tot.length l == size_test20_encryption9_plaintext} =
  [@inline_let]
  let l = [
    u8 0x42; u8 0x65; u8 0x61; u8 0x75; u8 0x74;
    u8 0x79; u8 0x20; u8 0x69; u8 0x73; u8 0x20;
    u8 0x74; u8 0x72; u8 0x75; u8 0x74; u8 0x68;
    u8 0x2c; u8 0x20; u8 0x74; u8 0x72; u8 0x75;
    u8 0x74; u8 0x68; u8 0x20; u8 0x62; u8 0x65;
    u8 0x61; u8 0x75; u8 0x74; u8 0x79;
  ] in
  assert_norm(List.Tot.length l == size_test20_encryption9_plaintext);
  l
let test20_encryption9_plaintext : lbytes size_test20_encryption9_plaintext = createL test20_encryption9_plaintext_list

// generated: "436f6e746578742d30"
inline_for_extraction
let size_test20_export0_exportContext: size_nat = 9
let test20_export0_exportContext_list : l:list uint8{List.Tot.length l == size_test20_export0_exportContext} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x6e; u8 0x74; u8 0x65;
    u8 0x78; u8 0x74; u8 0x2d; u8 0x30;
  ] in
  assert_norm(List.Tot.length l == size_test20_export0_exportContext);
  l
let test20_export0_exportContext : lbytes size_test20_export0_exportContext = createL test20_export0_exportContext_list

// generated: "4261b6bc2d573091baa4da1c414a5ccf596b6e493078174379ca117792f07763"
inline_for_extraction
let size_test20_export0_exportValue: size_nat = 32
let test20_export0_exportValue_list : l:list uint8{List.Tot.length l == size_test20_export0_exportValue} =
  [@inline_let]
  let l = [
    u8 0x42; u8 0x61; u8 0xb6; u8 0xbc; u8 0x2d;
    u8 0x57; u8 0x30; u8 0x91; u8 0xba; u8 0xa4;
    u8 0xda; u8 0x1c; u8 0x41; u8 0x4a; u8 0x5c;
    u8 0xcf; u8 0x59; u8 0x6b; u8 0x6e; u8 0x49;
    u8 0x30; u8 0x78; u8 0x17; u8 0x43; u8 0x79;
    u8 0xca; u8 0x11; u8 0x77; u8 0x92; u8 0xf0;
    u8 0x77; u8 0x63;
  ] in
  assert_norm(List.Tot.length l == size_test20_export0_exportValue);
  l
let test20_export0_exportValue : lbytes size_test20_export0_exportValue = createL test20_export0_exportValue_list

let test20_export0_len:size_nat = 32
// generated: "436f6e746578742d31"
inline_for_extraction
let size_test20_export1_exportContext: size_nat = 9
let test20_export1_exportContext_list : l:list uint8{List.Tot.length l == size_test20_export1_exportContext} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x6e; u8 0x74; u8 0x65;
    u8 0x78; u8 0x74; u8 0x2d; u8 0x31;
  ] in
  assert_norm(List.Tot.length l == size_test20_export1_exportContext);
  l
let test20_export1_exportContext : lbytes size_test20_export1_exportContext = createL test20_export1_exportContext_list

// generated: "de803630726868cf7600618e6d32c25107a1cc2f4b514010a3374fd4e3003094"
inline_for_extraction
let size_test20_export1_exportValue: size_nat = 32
let test20_export1_exportValue_list : l:list uint8{List.Tot.length l == size_test20_export1_exportValue} =
  [@inline_let]
  let l = [
    u8 0xde; u8 0x80; u8 0x36; u8 0x30; u8 0x72;
    u8 0x68; u8 0x68; u8 0xcf; u8 0x76; u8 0x00;
    u8 0x61; u8 0x8e; u8 0x6d; u8 0x32; u8 0xc2;
    u8 0x51; u8 0x07; u8 0xa1; u8 0xcc; u8 0x2f;
    u8 0x4b; u8 0x51; u8 0x40; u8 0x10; u8 0xa3;
    u8 0x37; u8 0x4f; u8 0xd4; u8 0xe3; u8 0x00;
    u8 0x30; u8 0x94;
  ] in
  assert_norm(List.Tot.length l == size_test20_export1_exportValue);
  l
let test20_export1_exportValue : lbytes size_test20_export1_exportValue = createL test20_export1_exportValue_list

let test20_export1_len:size_nat = 32
// generated: "436f6e746578742d32"
inline_for_extraction
let size_test20_export2_exportContext: size_nat = 9
let test20_export2_exportContext_list : l:list uint8{List.Tot.length l == size_test20_export2_exportContext} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x6e; u8 0x74; u8 0x65;
    u8 0x78; u8 0x74; u8 0x2d; u8 0x32;
  ] in
  assert_norm(List.Tot.length l == size_test20_export2_exportContext);
  l
let test20_export2_exportContext : lbytes size_test20_export2_exportContext = createL test20_export2_exportContext_list

// generated: "de5e4a8a1a9ce30fa348f20ddb561022256cbc028c602de753cce938d72a7aaf"
inline_for_extraction
let size_test20_export2_exportValue: size_nat = 32
let test20_export2_exportValue_list : l:list uint8{List.Tot.length l == size_test20_export2_exportValue} =
  [@inline_let]
  let l = [
    u8 0xde; u8 0x5e; u8 0x4a; u8 0x8a; u8 0x1a;
    u8 0x9c; u8 0xe3; u8 0x0f; u8 0xa3; u8 0x48;
    u8 0xf2; u8 0x0d; u8 0xdb; u8 0x56; u8 0x10;
    u8 0x22; u8 0x25; u8 0x6c; u8 0xbc; u8 0x02;
    u8 0x8c; u8 0x60; u8 0x2d; u8 0xe7; u8 0x53;
    u8 0xcc; u8 0xe9; u8 0x38; u8 0xd7; u8 0x2a;
    u8 0x7a; u8 0xaf;
  ] in
  assert_norm(List.Tot.length l == size_test20_export2_exportValue);
  l
let test20_export2_exportValue : lbytes size_test20_export2_exportValue = createL test20_export2_exportValue_list

let test20_export2_len:size_nat = 32
// generated: "436f6e746578742d33"
inline_for_extraction
let size_test20_export3_exportContext: size_nat = 9
let test20_export3_exportContext_list : l:list uint8{List.Tot.length l == size_test20_export3_exportContext} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x6e; u8 0x74; u8 0x65;
    u8 0x78; u8 0x74; u8 0x2d; u8 0x33;
  ] in
  assert_norm(List.Tot.length l == size_test20_export3_exportContext);
  l
let test20_export3_exportContext : lbytes size_test20_export3_exportContext = createL test20_export3_exportContext_list

// generated: "f060aca3540e240e814d66295a32d6eb4d7551392d38926850af8297f997a1b1"
inline_for_extraction
let size_test20_export3_exportValue: size_nat = 32
let test20_export3_exportValue_list : l:list uint8{List.Tot.length l == size_test20_export3_exportValue} =
  [@inline_let]
  let l = [
    u8 0xf0; u8 0x60; u8 0xac; u8 0xa3; u8 0x54;
    u8 0x0e; u8 0x24; u8 0x0e; u8 0x81; u8 0x4d;
    u8 0x66; u8 0x29; u8 0x5a; u8 0x32; u8 0xd6;
    u8 0xeb; u8 0x4d; u8 0x75; u8 0x51; u8 0x39;
    u8 0x2d; u8 0x38; u8 0x92; u8 0x68; u8 0x50;
    u8 0xaf; u8 0x82; u8 0x97; u8 0xf9; u8 0x97;
    u8 0xa1; u8 0xb1;
  ] in
  assert_norm(List.Tot.length l == size_test20_export3_exportValue);
  l
let test20_export3_exportValue : lbytes size_test20_export3_exportValue = createL test20_export3_exportValue_list

let test20_export3_len:size_nat = 32
// generated: "436f6e746578742d34"
inline_for_extraction
let size_test20_export4_exportContext: size_nat = 9
let test20_export4_exportContext_list : l:list uint8{List.Tot.length l == size_test20_export4_exportContext} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x6e; u8 0x74; u8 0x65;
    u8 0x78; u8 0x74; u8 0x2d; u8 0x34;
  ] in
  assert_norm(List.Tot.length l == size_test20_export4_exportContext);
  l
let test20_export4_exportContext : lbytes size_test20_export4_exportContext = createL test20_export4_exportContext_list

// generated: "ba5bbd6050160f5fe2624a1416dff89d7835b1540c39b518fcb4395598f482dc"
inline_for_extraction
let size_test20_export4_exportValue: size_nat = 32
let test20_export4_exportValue_list : l:list uint8{List.Tot.length l == size_test20_export4_exportValue} =
  [@inline_let]
  let l = [
    u8 0xba; u8 0x5b; u8 0xbd; u8 0x60; u8 0x50;
    u8 0x16; u8 0x0f; u8 0x5f; u8 0xe2; u8 0x62;
    u8 0x4a; u8 0x14; u8 0x16; u8 0xdf; u8 0xf8;
    u8 0x9d; u8 0x78; u8 0x35; u8 0xb1; u8 0x54;
    u8 0x0c; u8 0x39; u8 0xb5; u8 0x18; u8 0xfc;
    u8 0xb4; u8 0x39; u8 0x55; u8 0x98; u8 0xf4;
    u8 0x82; u8 0xdc;
  ] in
  assert_norm(List.Tot.length l == size_test20_export4_exportValue);
  l
let test20_export4_exportValue : lbytes size_test20_export4_exportValue = createL test20_export4_exportValue_list

let test20_export4_len:size_nat = 32

let test20 () =
  let res = test_setupBase test20_ciphersuite test20_skEm test20_pkEm test20_skRm test20_pkRm test20_info test20_enc test20_zz test20_key_schedule_context test20_secret test20_key test20_nonce test20_exporterSecret test20_encryption0_nonce test20_encryption1_nonce in
  let seq0:HPKE.seq_aead_s test20_ciphersuite = 0 in
  let enc_res0 = test_encryption test20_ciphersuite test20_key test20_nonce test20_exporterSecret test20_encryption0_aad test20_encryption0_plaintext seq0 test20_encryption0_ciphertext test20_encryption0_nonce in

  assert_norm (1 < pow2 (8 * 12));
  let seq1:HPKE.seq_aead_s test20_ciphersuite = (seq0 + 1) in
  let enc_res1 = test_encryption test20_ciphersuite test20_key test20_nonce test20_exporterSecret test20_encryption1_aad test20_encryption1_plaintext seq1 test20_encryption1_ciphertext test20_encryption1_nonce in

  assert_norm (2 < pow2 (8 * 12));
  let seq2:HPKE.seq_aead_s test20_ciphersuite = (seq1 + 1) in
  let enc_res2 = test_encryption test20_ciphersuite test20_key test20_nonce test20_exporterSecret test20_encryption2_aad test20_encryption2_plaintext 2 test20_encryption2_ciphertext test20_encryption2_nonce in

  assert_norm (3 < pow2 (8 * 12));
  let seq3:HPKE.seq_aead_s test20_ciphersuite = (seq2 + 1) in
  let enc_res3 = test_encryption test20_ciphersuite test20_key test20_nonce test20_exporterSecret test20_encryption3_aad test20_encryption3_plaintext 3 test20_encryption3_ciphertext test20_encryption3_nonce in

  assert_norm (4 < pow2 (8 * 12));
  let seq4:HPKE.seq_aead_s test20_ciphersuite = (seq3 + 1) in
  let enc_res4 = test_encryption test20_ciphersuite test20_key test20_nonce test20_exporterSecret test20_encryption4_aad test20_encryption4_plaintext 4 test20_encryption4_ciphertext test20_encryption4_nonce in

  assert_norm (5 < pow2 (8 * 12));
  let seq5:HPKE.seq_aead_s test20_ciphersuite = (seq4 + 1) in
  let enc_res5 = test_encryption test20_ciphersuite test20_key test20_nonce test20_exporterSecret test20_encryption5_aad test20_encryption5_plaintext 5 test20_encryption5_ciphertext test20_encryption5_nonce in

  assert_norm (6 < pow2 (8 * 12));
  let seq6:HPKE.seq_aead_s test20_ciphersuite = (seq5 + 1) in
  let enc_res6 = test_encryption test20_ciphersuite test20_key test20_nonce test20_exporterSecret test20_encryption6_aad test20_encryption6_plaintext 6 test20_encryption6_ciphertext test20_encryption6_nonce in

  assert_norm (7 < pow2 (8 * 12));
  let seq7:HPKE.seq_aead_s test20_ciphersuite = (seq6 + 1) in
  let enc_res7 = test_encryption test20_ciphersuite test20_key test20_nonce test20_exporterSecret test20_encryption7_aad test20_encryption7_plaintext 7 test20_encryption7_ciphertext test20_encryption7_nonce in

  assert_norm (8 < pow2 (8 * 12));
  let seq8:HPKE.seq_aead_s test20_ciphersuite = (seq7 + 1) in
  let enc_res8 = test_encryption test20_ciphersuite test20_key test20_nonce test20_exporterSecret test20_encryption8_aad test20_encryption8_plaintext 8 test20_encryption8_ciphertext test20_encryption8_nonce in

  assert_norm (9 < pow2 (8 * 12));
  let seq9:HPKE.seq_aead_s test20_ciphersuite = (seq8 + 1) in
  let enc_res9 = test_encryption test20_ciphersuite test20_key test20_nonce test20_exporterSecret test20_encryption9_aad test20_encryption9_plaintext 9 test20_encryption9_ciphertext test20_encryption9_nonce in

  let exp_res0 = test_export test20_ciphersuite test20_key test20_nonce test20_exporterSecret test20_export0_exportContext test20_export0_len test20_export0_exportValue in

  let exp_res1 = test_export test20_ciphersuite test20_key test20_nonce test20_exporterSecret test20_export1_exportContext test20_export1_len test20_export1_exportValue in

  let exp_res2 = test_export test20_ciphersuite test20_key test20_nonce test20_exporterSecret test20_export2_exportContext test20_export2_len test20_export2_exportValue in

  let exp_res3 = test_export test20_ciphersuite test20_key test20_nonce test20_exporterSecret test20_export3_exportContext test20_export3_len test20_export3_exportValue in

  let exp_res4 = test_export test20_ciphersuite test20_key test20_nonce test20_exporterSecret test20_export4_exportContext test20_export4_len test20_export4_exportValue in

  enc_res0 && enc_res1 && enc_res2 && enc_res3 && enc_res4 && enc_res5 && enc_res6 && enc_res7 && enc_res8 && enc_res9 && res && exp_res0 && exp_res1 && exp_res2 && exp_res3 && exp_res4


// Skipped unsupported test case 21

// Skipped unsupported test case 22

// Skipped unsupported test case 23

// Skipped unsupported test case 24

// Skipped unsupported test case 25

// Skipped unsupported test case 26

// Skipped unsupported test case 27

// Skipped unsupported test case 28

// Skipped unsupported test case 29

// Skipped unsupported test case 30

// Skipped unsupported test case 31

// Skipped unsupported test case 32

// Skipped unsupported test case 33

// Skipped unsupported test case 34

// Skipped unsupported test case 35

// Skipped unsupported test case 36

// Skipped unsupported test case 37

// Skipped unsupported test case 38

// Skipped unsupported test case 39

// Skipped unsupported test case 40

// Skipped unsupported test case 41

// Skipped unsupported test case 42

// Skipped unsupported test case 43

// Skipped unsupported test case 44

// Skipped unsupported test case 45

// Skipped unsupported test case 46

// Skipped unsupported test case 47

// Skipped unsupported test case 48

// Skipped unsupported test case 49

let test50_mode: HPKE.mode = HPKE.Base
let test50_ciphersuite = DH.DH_P256, Hash.SHA2_256, AEAD.AES128_GCM, Hash.SHA2_256

// generated: "4f6465206f6e2061204772656369616e2055726e"
inline_for_extraction
let size_test50_info: size_nat = 20
let test50_info_list : l:list uint8{List.Tot.length l == size_test50_info} =
  [@inline_let]
  let l = [
    u8 0x4f; u8 0x64; u8 0x65; u8 0x20; u8 0x6f;
    u8 0x6e; u8 0x20; u8 0x61; u8 0x20; u8 0x47;
    u8 0x72; u8 0x65; u8 0x63; u8 0x69; u8 0x61;
    u8 0x6e; u8 0x20; u8 0x55; u8 0x72; u8 0x6e;
  ] in
  assert_norm(List.Tot.length l == size_test50_info);
  l
let test50_info : lbytes size_test50_info = createL test50_info_list

// generated: "05eef02dccecf8d642769aa83b2a13bcc96c43beaf80dc59ebaee29e6f7c3c51"
inline_for_extraction
let size_test50_skRm: size_nat = 32
let test50_skRm_list : l:list uint8{List.Tot.length l == size_test50_skRm} =
  [@inline_let]
  let l = [
    u8 0x05; u8 0xee; u8 0xf0; u8 0x2d; u8 0xcc;
    u8 0xec; u8 0xf8; u8 0xd6; u8 0x42; u8 0x76;
    u8 0x9a; u8 0xa8; u8 0x3b; u8 0x2a; u8 0x13;
    u8 0xbc; u8 0xc9; u8 0x6c; u8 0x43; u8 0xbe;
    u8 0xaf; u8 0x80; u8 0xdc; u8 0x59; u8 0xeb;
    u8 0xae; u8 0xe2; u8 0x9e; u8 0x6f; u8 0x7c;
    u8 0x3c; u8 0x51;
  ] in
  assert_norm(List.Tot.length l == size_test50_skRm);
  l
let test50_skRm : lbytes size_test50_skRm = createL test50_skRm_list

// generated: "36dd14fc4351c521ae5cb09b2574c49e33da47fe00078b827022011ba8d3c067"
inline_for_extraction
let size_test50_skEm: size_nat = 32
let test50_skEm_list : l:list uint8{List.Tot.length l == size_test50_skEm} =
  [@inline_let]
  let l = [
    u8 0x36; u8 0xdd; u8 0x14; u8 0xfc; u8 0x43;
    u8 0x51; u8 0xc5; u8 0x21; u8 0xae; u8 0x5c;
    u8 0xb0; u8 0x9b; u8 0x25; u8 0x74; u8 0xc4;
    u8 0x9e; u8 0x33; u8 0xda; u8 0x47; u8 0xfe;
    u8 0x00; u8 0x07; u8 0x8b; u8 0x82; u8 0x70;
    u8 0x22; u8 0x01; u8 0x1b; u8 0xa8; u8 0xd3;
    u8 0xc0; u8 0x67;
  ] in
  assert_norm(List.Tot.length l == size_test50_skEm);
  l
let test50_skEm : lbytes size_test50_skEm = createL test50_skEm_list

// generated: "049ce5df3b9e46ce95b46552d2b0100aecccb1200334206d6602ee8e9398974e1e359606fde1f208c09e79e25776cd09692958795e1936ec373c67eb8a89048054"
inline_for_extraction
let size_test50_pkRm: size_nat = 65
let test50_pkRm_list : l:list uint8{List.Tot.length l == size_test50_pkRm} =
  [@inline_let]
  let l = [
    u8 0x04; u8 0x9c; u8 0xe5; u8 0xdf; u8 0x3b;
    u8 0x9e; u8 0x46; u8 0xce; u8 0x95; u8 0xb4;
    u8 0x65; u8 0x52; u8 0xd2; u8 0xb0; u8 0x10;
    u8 0x0a; u8 0xec; u8 0xcc; u8 0xb1; u8 0x20;
    u8 0x03; u8 0x34; u8 0x20; u8 0x6d; u8 0x66;
    u8 0x02; u8 0xee; u8 0x8e; u8 0x93; u8 0x98;
    u8 0x97; u8 0x4e; u8 0x1e; u8 0x35; u8 0x96;
    u8 0x06; u8 0xfd; u8 0xe1; u8 0xf2; u8 0x08;
    u8 0xc0; u8 0x9e; u8 0x79; u8 0xe2; u8 0x57;
    u8 0x76; u8 0xcd; u8 0x09; u8 0x69; u8 0x29;
    u8 0x58; u8 0x79; u8 0x5e; u8 0x19; u8 0x36;
    u8 0xec; u8 0x37; u8 0x3c; u8 0x67; u8 0xeb;
    u8 0x8a; u8 0x89; u8 0x04; u8 0x80; u8 0x54;
  ] in
  assert_norm(List.Tot.length l == size_test50_pkRm);
  l
let test50_pkRm : lbytes size_test50_pkRm = createL test50_pkRm_list

// generated: "04539ff924d6315cfe724c470131eaf6e06044c25da5143604f70849ff978790d2646787bfa196529e5f7e62e170b72abd4b8f6fac1453cc557bed06b9a196e554"
inline_for_extraction
let size_test50_pkEm: size_nat = 65
let test50_pkEm_list : l:list uint8{List.Tot.length l == size_test50_pkEm} =
  [@inline_let]
  let l = [
    u8 0x04; u8 0x53; u8 0x9f; u8 0xf9; u8 0x24;
    u8 0xd6; u8 0x31; u8 0x5c; u8 0xfe; u8 0x72;
    u8 0x4c; u8 0x47; u8 0x01; u8 0x31; u8 0xea;
    u8 0xf6; u8 0xe0; u8 0x60; u8 0x44; u8 0xc2;
    u8 0x5d; u8 0xa5; u8 0x14; u8 0x36; u8 0x04;
    u8 0xf7; u8 0x08; u8 0x49; u8 0xff; u8 0x97;
    u8 0x87; u8 0x90; u8 0xd2; u8 0x64; u8 0x67;
    u8 0x87; u8 0xbf; u8 0xa1; u8 0x96; u8 0x52;
    u8 0x9e; u8 0x5f; u8 0x7e; u8 0x62; u8 0xe1;
    u8 0x70; u8 0xb7; u8 0x2a; u8 0xbd; u8 0x4b;
    u8 0x8f; u8 0x6f; u8 0xac; u8 0x14; u8 0x53;
    u8 0xcc; u8 0x55; u8 0x7b; u8 0xed; u8 0x06;
    u8 0xb9; u8 0xa1; u8 0x96; u8 0xe5; u8 0x54;
  ] in
  assert_norm(List.Tot.length l == size_test50_pkEm);
  l
let test50_pkEm : lbytes size_test50_pkEm = createL test50_pkEm_list

// generated: "04539ff924d6315cfe724c470131eaf6e06044c25da5143604f70849ff978790d2646787bfa196529e5f7e62e170b72abd4b8f6fac1453cc557bed06b9a196e554"
inline_for_extraction
let size_test50_enc: size_nat = 65
let test50_enc_list : l:list uint8{List.Tot.length l == size_test50_enc} =
  [@inline_let]
  let l = [
    u8 0x04; u8 0x53; u8 0x9f; u8 0xf9; u8 0x24;
    u8 0xd6; u8 0x31; u8 0x5c; u8 0xfe; u8 0x72;
    u8 0x4c; u8 0x47; u8 0x01; u8 0x31; u8 0xea;
    u8 0xf6; u8 0xe0; u8 0x60; u8 0x44; u8 0xc2;
    u8 0x5d; u8 0xa5; u8 0x14; u8 0x36; u8 0x04;
    u8 0xf7; u8 0x08; u8 0x49; u8 0xff; u8 0x97;
    u8 0x87; u8 0x90; u8 0xd2; u8 0x64; u8 0x67;
    u8 0x87; u8 0xbf; u8 0xa1; u8 0x96; u8 0x52;
    u8 0x9e; u8 0x5f; u8 0x7e; u8 0x62; u8 0xe1;
    u8 0x70; u8 0xb7; u8 0x2a; u8 0xbd; u8 0x4b;
    u8 0x8f; u8 0x6f; u8 0xac; u8 0x14; u8 0x53;
    u8 0xcc; u8 0x55; u8 0x7b; u8 0xed; u8 0x06;
    u8 0xb9; u8 0xa1; u8 0x96; u8 0xe5; u8 0x54;
  ] in
  assert_norm(List.Tot.length l == size_test50_enc);
  l
let test50_enc : lbytes size_test50_enc = createL test50_enc_list

// generated: "f7a3673cc46cae7b68a076c57161d0df0594202624d51423d1375fe2c32b3af3"
inline_for_extraction
let size_test50_zz: size_nat = 32
let test50_zz_list : l:list uint8{List.Tot.length l == size_test50_zz} =
  [@inline_let]
  let l = [
    u8 0xf7; u8 0xa3; u8 0x67; u8 0x3c; u8 0xc4;
    u8 0x6c; u8 0xae; u8 0x7b; u8 0x68; u8 0xa0;
    u8 0x76; u8 0xc5; u8 0x71; u8 0x61; u8 0xd0;
    u8 0xdf; u8 0x05; u8 0x94; u8 0x20; u8 0x26;
    u8 0x24; u8 0xd5; u8 0x14; u8 0x23; u8 0xd1;
    u8 0x37; u8 0x5f; u8 0xe2; u8 0xc3; u8 0x2b;
    u8 0x3a; u8 0xf3;
  ] in
  assert_norm(List.Tot.length l == size_test50_zz);
  l
let test50_zz : lbytes size_test50_zz = createL test50_zz_list

// generated: "001000010001005d0f5548cb13d7eba5320ae0e21b1ee274aac7ea1cce02570cf993d1b2456449debcca602075cf6f8ef506613a82e1c73727e2c912d0c49f16cd56fc524af4ce"
inline_for_extraction
let size_test50_key_schedule_context: size_nat = 71
let test50_key_schedule_context_list : l:list uint8{List.Tot.length l == size_test50_key_schedule_context} =
  [@inline_let]
  let l = [
    u8 0x00; u8 0x10; u8 0x00; u8 0x01; u8 0x00;
    u8 0x01; u8 0x00; u8 0x5d; u8 0x0f; u8 0x55;
    u8 0x48; u8 0xcb; u8 0x13; u8 0xd7; u8 0xeb;
    u8 0xa5; u8 0x32; u8 0x0a; u8 0xe0; u8 0xe2;
    u8 0x1b; u8 0x1e; u8 0xe2; u8 0x74; u8 0xaa;
    u8 0xc7; u8 0xea; u8 0x1c; u8 0xce; u8 0x02;
    u8 0x57; u8 0x0c; u8 0xf9; u8 0x93; u8 0xd1;
    u8 0xb2; u8 0x45; u8 0x64; u8 0x49; u8 0xde;
    u8 0xbc; u8 0xca; u8 0x60; u8 0x20; u8 0x75;
    u8 0xcf; u8 0x6f; u8 0x8e; u8 0xf5; u8 0x06;
    u8 0x61; u8 0x3a; u8 0x82; u8 0xe1; u8 0xc7;
    u8 0x37; u8 0x27; u8 0xe2; u8 0xc9; u8 0x12;
    u8 0xd0; u8 0xc4; u8 0x9f; u8 0x16; u8 0xcd;
    u8 0x56; u8 0xfc; u8 0x52; u8 0x4a; u8 0xf4;
    u8 0xce;
  ] in
  assert_norm(List.Tot.length l == size_test50_key_schedule_context);
  l
let test50_key_schedule_context : lbytes size_test50_key_schedule_context = createL test50_key_schedule_context_list

// generated: "d47b535abb0c634ccef6bed24a8692cf30a319ada1f8177004c8f784ae504abe"
inline_for_extraction
let size_test50_secret: size_nat = 32
let test50_secret_list : l:list uint8{List.Tot.length l == size_test50_secret} =
  [@inline_let]
  let l = [
    u8 0xd4; u8 0x7b; u8 0x53; u8 0x5a; u8 0xbb;
    u8 0x0c; u8 0x63; u8 0x4c; u8 0xce; u8 0xf6;
    u8 0xbe; u8 0xd2; u8 0x4a; u8 0x86; u8 0x92;
    u8 0xcf; u8 0x30; u8 0xa3; u8 0x19; u8 0xad;
    u8 0xa1; u8 0xf8; u8 0x17; u8 0x70; u8 0x04;
    u8 0xc8; u8 0xf7; u8 0x84; u8 0xae; u8 0x50;
    u8 0x4a; u8 0xbe;
  ] in
  assert_norm(List.Tot.length l == size_test50_secret);
  l
let test50_secret : lbytes size_test50_secret = createL test50_secret_list

// generated: "9da43da8323610e8856708219c8c2de4"
inline_for_extraction
let size_test50_key: size_nat = 16
let test50_key_list : l:list uint8{List.Tot.length l == size_test50_key} =
  [@inline_let]
  let l = [
    u8 0x9d; u8 0xa4; u8 0x3d; u8 0xa8; u8 0x32;
    u8 0x36; u8 0x10; u8 0xe8; u8 0x85; u8 0x67;
    u8 0x08; u8 0x21; u8 0x9c; u8 0x8c; u8 0x2d;
    u8 0xe4;
  ] in
  assert_norm(List.Tot.length l == size_test50_key);
  l
let test50_key : lbytes size_test50_key = createL test50_key_list

// generated: "5a94aa57e8e9252f6b7f2ffc"
inline_for_extraction
let size_test50_nonce: size_nat = 12
let test50_nonce_list : l:list uint8{List.Tot.length l == size_test50_nonce} =
  [@inline_let]
  let l = [
    u8 0x5a; u8 0x94; u8 0xaa; u8 0x57; u8 0xe8;
    u8 0xe9; u8 0x25; u8 0x2f; u8 0x6b; u8 0x7f;
    u8 0x2f; u8 0xfc;
  ] in
  assert_norm(List.Tot.length l == size_test50_nonce);
  l
let test50_nonce : lbytes size_test50_nonce = createL test50_nonce_list

// generated: "f1ced4d62e7999757df8c477e4e96a73858f7a2c21c5726915b761a0631f49c3"
inline_for_extraction
let size_test50_exporterSecret: size_nat = 32
let test50_exporterSecret_list : l:list uint8{List.Tot.length l == size_test50_exporterSecret} =
  [@inline_let]
  let l = [
    u8 0xf1; u8 0xce; u8 0xd4; u8 0xd6; u8 0x2e;
    u8 0x79; u8 0x99; u8 0x75; u8 0x7d; u8 0xf8;
    u8 0xc4; u8 0x77; u8 0xe4; u8 0xe9; u8 0x6a;
    u8 0x73; u8 0x85; u8 0x8f; u8 0x7a; u8 0x2c;
    u8 0x21; u8 0xc5; u8 0x72; u8 0x69; u8 0x15;
    u8 0xb7; u8 0x61; u8 0xa0; u8 0x63; u8 0x1f;
    u8 0x49; u8 0xc3;
  ] in
  assert_norm(List.Tot.length l == size_test50_exporterSecret);
  l
let test50_exporterSecret : lbytes size_test50_exporterSecret = createL test50_exporterSecret_list

// generated: "436f756e742d30"
inline_for_extraction
let size_test50_encryption0_aad: size_nat = 7
let test50_encryption0_aad_list : l:list uint8{List.Tot.length l == size_test50_encryption0_aad} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x75; u8 0x6e; u8 0x74;
    u8 0x2d; u8 0x30;
  ] in
  assert_norm(List.Tot.length l == size_test50_encryption0_aad);
  l
let test50_encryption0_aad : lbytes size_test50_encryption0_aad = createL test50_encryption0_aad_list

// generated: "3eaa3d649c4d367d8055cee9187d792f7c1a406dc10ff4e3168c75df786e84ff3a3adfda43c8a697a5aeefe683"
inline_for_extraction
let size_test50_encryption0_ciphertext: size_nat = 45
let test50_encryption0_ciphertext_list : l:list uint8{List.Tot.length l == size_test50_encryption0_ciphertext} =
  [@inline_let]
  let l = [
    u8 0x3e; u8 0xaa; u8 0x3d; u8 0x64; u8 0x9c;
    u8 0x4d; u8 0x36; u8 0x7d; u8 0x80; u8 0x55;
    u8 0xce; u8 0xe9; u8 0x18; u8 0x7d; u8 0x79;
    u8 0x2f; u8 0x7c; u8 0x1a; u8 0x40; u8 0x6d;
    u8 0xc1; u8 0x0f; u8 0xf4; u8 0xe3; u8 0x16;
    u8 0x8c; u8 0x75; u8 0xdf; u8 0x78; u8 0x6e;
    u8 0x84; u8 0xff; u8 0x3a; u8 0x3a; u8 0xdf;
    u8 0xda; u8 0x43; u8 0xc8; u8 0xa6; u8 0x97;
    u8 0xa5; u8 0xae; u8 0xef; u8 0xe6; u8 0x83;
  ] in
  assert_norm(List.Tot.length l == size_test50_encryption0_ciphertext);
  l
let test50_encryption0_ciphertext : lbytes size_test50_encryption0_ciphertext = createL test50_encryption0_ciphertext_list

// generated: "5a94aa57e8e9252f6b7f2ffc"
inline_for_extraction
let size_test50_encryption0_nonce: size_nat = 12
let test50_encryption0_nonce_list : l:list uint8{List.Tot.length l == size_test50_encryption0_nonce} =
  [@inline_let]
  let l = [
    u8 0x5a; u8 0x94; u8 0xaa; u8 0x57; u8 0xe8;
    u8 0xe9; u8 0x25; u8 0x2f; u8 0x6b; u8 0x7f;
    u8 0x2f; u8 0xfc;
  ] in
  assert_norm(List.Tot.length l == size_test50_encryption0_nonce);
  l
let test50_encryption0_nonce : lbytes size_test50_encryption0_nonce = createL test50_encryption0_nonce_list

// generated: "4265617574792069732074727574682c20747275746820626561757479"
inline_for_extraction
let size_test50_encryption0_plaintext: size_nat = 29
let test50_encryption0_plaintext_list : l:list uint8{List.Tot.length l == size_test50_encryption0_plaintext} =
  [@inline_let]
  let l = [
    u8 0x42; u8 0x65; u8 0x61; u8 0x75; u8 0x74;
    u8 0x79; u8 0x20; u8 0x69; u8 0x73; u8 0x20;
    u8 0x74; u8 0x72; u8 0x75; u8 0x74; u8 0x68;
    u8 0x2c; u8 0x20; u8 0x74; u8 0x72; u8 0x75;
    u8 0x74; u8 0x68; u8 0x20; u8 0x62; u8 0x65;
    u8 0x61; u8 0x75; u8 0x74; u8 0x79;
  ] in
  assert_norm(List.Tot.length l == size_test50_encryption0_plaintext);
  l
let test50_encryption0_plaintext : lbytes size_test50_encryption0_plaintext = createL test50_encryption0_plaintext_list

// generated: "436f756e742d31"
inline_for_extraction
let size_test50_encryption1_aad: size_nat = 7
let test50_encryption1_aad_list : l:list uint8{List.Tot.length l == size_test50_encryption1_aad} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x75; u8 0x6e; u8 0x74;
    u8 0x2d; u8 0x31;
  ] in
  assert_norm(List.Tot.length l == size_test50_encryption1_aad);
  l
let test50_encryption1_aad : lbytes size_test50_encryption1_aad = createL test50_encryption1_aad_list

// generated: "7f99438ff269970cf3efa326e58cfff63d879f4af66502ff8f4cd5d92606b7d960d1ab4a6a4a6c955b4251b20b"
inline_for_extraction
let size_test50_encryption1_ciphertext: size_nat = 45
let test50_encryption1_ciphertext_list : l:list uint8{List.Tot.length l == size_test50_encryption1_ciphertext} =
  [@inline_let]
  let l = [
    u8 0x7f; u8 0x99; u8 0x43; u8 0x8f; u8 0xf2;
    u8 0x69; u8 0x97; u8 0x0c; u8 0xf3; u8 0xef;
    u8 0xa3; u8 0x26; u8 0xe5; u8 0x8c; u8 0xff;
    u8 0xf6; u8 0x3d; u8 0x87; u8 0x9f; u8 0x4a;
    u8 0xf6; u8 0x65; u8 0x02; u8 0xff; u8 0x8f;
    u8 0x4c; u8 0xd5; u8 0xd9; u8 0x26; u8 0x06;
    u8 0xb7; u8 0xd9; u8 0x60; u8 0xd1; u8 0xab;
    u8 0x4a; u8 0x6a; u8 0x4a; u8 0x6c; u8 0x95;
    u8 0x5b; u8 0x42; u8 0x51; u8 0xb2; u8 0x0b;
  ] in
  assert_norm(List.Tot.length l == size_test50_encryption1_ciphertext);
  l
let test50_encryption1_ciphertext : lbytes size_test50_encryption1_ciphertext = createL test50_encryption1_ciphertext_list

// generated: "5a94aa57e8e9252f6b7f2ffd"
inline_for_extraction
let size_test50_encryption1_nonce: size_nat = 12
let test50_encryption1_nonce_list : l:list uint8{List.Tot.length l == size_test50_encryption1_nonce} =
  [@inline_let]
  let l = [
    u8 0x5a; u8 0x94; u8 0xaa; u8 0x57; u8 0xe8;
    u8 0xe9; u8 0x25; u8 0x2f; u8 0x6b; u8 0x7f;
    u8 0x2f; u8 0xfd;
  ] in
  assert_norm(List.Tot.length l == size_test50_encryption1_nonce);
  l
let test50_encryption1_nonce : lbytes size_test50_encryption1_nonce = createL test50_encryption1_nonce_list

// generated: "4265617574792069732074727574682c20747275746820626561757479"
inline_for_extraction
let size_test50_encryption1_plaintext: size_nat = 29
let test50_encryption1_plaintext_list : l:list uint8{List.Tot.length l == size_test50_encryption1_plaintext} =
  [@inline_let]
  let l = [
    u8 0x42; u8 0x65; u8 0x61; u8 0x75; u8 0x74;
    u8 0x79; u8 0x20; u8 0x69; u8 0x73; u8 0x20;
    u8 0x74; u8 0x72; u8 0x75; u8 0x74; u8 0x68;
    u8 0x2c; u8 0x20; u8 0x74; u8 0x72; u8 0x75;
    u8 0x74; u8 0x68; u8 0x20; u8 0x62; u8 0x65;
    u8 0x61; u8 0x75; u8 0x74; u8 0x79;
  ] in
  assert_norm(List.Tot.length l == size_test50_encryption1_plaintext);
  l
let test50_encryption1_plaintext : lbytes size_test50_encryption1_plaintext = createL test50_encryption1_plaintext_list

// generated: "436f756e742d32"
inline_for_extraction
let size_test50_encryption2_aad: size_nat = 7
let test50_encryption2_aad_list : l:list uint8{List.Tot.length l == size_test50_encryption2_aad} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x75; u8 0x6e; u8 0x74;
    u8 0x2d; u8 0x32;
  ] in
  assert_norm(List.Tot.length l == size_test50_encryption2_aad);
  l
let test50_encryption2_aad : lbytes size_test50_encryption2_aad = createL test50_encryption2_aad_list

// generated: "c3a0475fe561b59c3c15be5d34ada396da329c502544a1f84b637ca35aa42d07908be5c351340747cc0cade1f0"
inline_for_extraction
let size_test50_encryption2_ciphertext: size_nat = 45
let test50_encryption2_ciphertext_list : l:list uint8{List.Tot.length l == size_test50_encryption2_ciphertext} =
  [@inline_let]
  let l = [
    u8 0xc3; u8 0xa0; u8 0x47; u8 0x5f; u8 0xe5;
    u8 0x61; u8 0xb5; u8 0x9c; u8 0x3c; u8 0x15;
    u8 0xbe; u8 0x5d; u8 0x34; u8 0xad; u8 0xa3;
    u8 0x96; u8 0xda; u8 0x32; u8 0x9c; u8 0x50;
    u8 0x25; u8 0x44; u8 0xa1; u8 0xf8; u8 0x4b;
    u8 0x63; u8 0x7c; u8 0xa3; u8 0x5a; u8 0xa4;
    u8 0x2d; u8 0x07; u8 0x90; u8 0x8b; u8 0xe5;
    u8 0xc3; u8 0x51; u8 0x34; u8 0x07; u8 0x47;
    u8 0xcc; u8 0x0c; u8 0xad; u8 0xe1; u8 0xf0;
  ] in
  assert_norm(List.Tot.length l == size_test50_encryption2_ciphertext);
  l
let test50_encryption2_ciphertext : lbytes size_test50_encryption2_ciphertext = createL test50_encryption2_ciphertext_list

// generated: "5a94aa57e8e9252f6b7f2ffe"
inline_for_extraction
let size_test50_encryption2_nonce: size_nat = 12
let test50_encryption2_nonce_list : l:list uint8{List.Tot.length l == size_test50_encryption2_nonce} =
  [@inline_let]
  let l = [
    u8 0x5a; u8 0x94; u8 0xaa; u8 0x57; u8 0xe8;
    u8 0xe9; u8 0x25; u8 0x2f; u8 0x6b; u8 0x7f;
    u8 0x2f; u8 0xfe;
  ] in
  assert_norm(List.Tot.length l == size_test50_encryption2_nonce);
  l
let test50_encryption2_nonce : lbytes size_test50_encryption2_nonce = createL test50_encryption2_nonce_list

// generated: "4265617574792069732074727574682c20747275746820626561757479"
inline_for_extraction
let size_test50_encryption2_plaintext: size_nat = 29
let test50_encryption2_plaintext_list : l:list uint8{List.Tot.length l == size_test50_encryption2_plaintext} =
  [@inline_let]
  let l = [
    u8 0x42; u8 0x65; u8 0x61; u8 0x75; u8 0x74;
    u8 0x79; u8 0x20; u8 0x69; u8 0x73; u8 0x20;
    u8 0x74; u8 0x72; u8 0x75; u8 0x74; u8 0x68;
    u8 0x2c; u8 0x20; u8 0x74; u8 0x72; u8 0x75;
    u8 0x74; u8 0x68; u8 0x20; u8 0x62; u8 0x65;
    u8 0x61; u8 0x75; u8 0x74; u8 0x79;
  ] in
  assert_norm(List.Tot.length l == size_test50_encryption2_plaintext);
  l
let test50_encryption2_plaintext : lbytes size_test50_encryption2_plaintext = createL test50_encryption2_plaintext_list

// generated: "436f756e742d33"
inline_for_extraction
let size_test50_encryption3_aad: size_nat = 7
let test50_encryption3_aad_list : l:list uint8{List.Tot.length l == size_test50_encryption3_aad} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x75; u8 0x6e; u8 0x74;
    u8 0x2d; u8 0x33;
  ] in
  assert_norm(List.Tot.length l == size_test50_encryption3_aad);
  l
let test50_encryption3_aad : lbytes size_test50_encryption3_aad = createL test50_encryption3_aad_list

// generated: "6ed6c46c1e86587625dc9cea391c501f85c66ddd0dd54b5ccd27d7a783d30d32e2e86f6e7da660591a29bb1a4f"
inline_for_extraction
let size_test50_encryption3_ciphertext: size_nat = 45
let test50_encryption3_ciphertext_list : l:list uint8{List.Tot.length l == size_test50_encryption3_ciphertext} =
  [@inline_let]
  let l = [
    u8 0x6e; u8 0xd6; u8 0xc4; u8 0x6c; u8 0x1e;
    u8 0x86; u8 0x58; u8 0x76; u8 0x25; u8 0xdc;
    u8 0x9c; u8 0xea; u8 0x39; u8 0x1c; u8 0x50;
    u8 0x1f; u8 0x85; u8 0xc6; u8 0x6d; u8 0xdd;
    u8 0x0d; u8 0xd5; u8 0x4b; u8 0x5c; u8 0xcd;
    u8 0x27; u8 0xd7; u8 0xa7; u8 0x83; u8 0xd3;
    u8 0x0d; u8 0x32; u8 0xe2; u8 0xe8; u8 0x6f;
    u8 0x6e; u8 0x7d; u8 0xa6; u8 0x60; u8 0x59;
    u8 0x1a; u8 0x29; u8 0xbb; u8 0x1a; u8 0x4f;
  ] in
  assert_norm(List.Tot.length l == size_test50_encryption3_ciphertext);
  l
let test50_encryption3_ciphertext : lbytes size_test50_encryption3_ciphertext = createL test50_encryption3_ciphertext_list

// generated: "5a94aa57e8e9252f6b7f2fff"
inline_for_extraction
let size_test50_encryption3_nonce: size_nat = 12
let test50_encryption3_nonce_list : l:list uint8{List.Tot.length l == size_test50_encryption3_nonce} =
  [@inline_let]
  let l = [
    u8 0x5a; u8 0x94; u8 0xaa; u8 0x57; u8 0xe8;
    u8 0xe9; u8 0x25; u8 0x2f; u8 0x6b; u8 0x7f;
    u8 0x2f; u8 0xff;
  ] in
  assert_norm(List.Tot.length l == size_test50_encryption3_nonce);
  l
let test50_encryption3_nonce : lbytes size_test50_encryption3_nonce = createL test50_encryption3_nonce_list

// generated: "4265617574792069732074727574682c20747275746820626561757479"
inline_for_extraction
let size_test50_encryption3_plaintext: size_nat = 29
let test50_encryption3_plaintext_list : l:list uint8{List.Tot.length l == size_test50_encryption3_plaintext} =
  [@inline_let]
  let l = [
    u8 0x42; u8 0x65; u8 0x61; u8 0x75; u8 0x74;
    u8 0x79; u8 0x20; u8 0x69; u8 0x73; u8 0x20;
    u8 0x74; u8 0x72; u8 0x75; u8 0x74; u8 0x68;
    u8 0x2c; u8 0x20; u8 0x74; u8 0x72; u8 0x75;
    u8 0x74; u8 0x68; u8 0x20; u8 0x62; u8 0x65;
    u8 0x61; u8 0x75; u8 0x74; u8 0x79;
  ] in
  assert_norm(List.Tot.length l == size_test50_encryption3_plaintext);
  l
let test50_encryption3_plaintext : lbytes size_test50_encryption3_plaintext = createL test50_encryption3_plaintext_list

// generated: "436f756e742d34"
inline_for_extraction
let size_test50_encryption4_aad: size_nat = 7
let test50_encryption4_aad_list : l:list uint8{List.Tot.length l == size_test50_encryption4_aad} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x75; u8 0x6e; u8 0x74;
    u8 0x2d; u8 0x34;
  ] in
  assert_norm(List.Tot.length l == size_test50_encryption4_aad);
  l
let test50_encryption4_aad : lbytes size_test50_encryption4_aad = createL test50_encryption4_aad_list

// generated: "4d4ab5772920d8b88c14b7179c43117eb9db6a08dd1f37c2f83e2bb721bf0f56a8ffcab1d8f9ab85b62db25697"
inline_for_extraction
let size_test50_encryption4_ciphertext: size_nat = 45
let test50_encryption4_ciphertext_list : l:list uint8{List.Tot.length l == size_test50_encryption4_ciphertext} =
  [@inline_let]
  let l = [
    u8 0x4d; u8 0x4a; u8 0xb5; u8 0x77; u8 0x29;
    u8 0x20; u8 0xd8; u8 0xb8; u8 0x8c; u8 0x14;
    u8 0xb7; u8 0x17; u8 0x9c; u8 0x43; u8 0x11;
    u8 0x7e; u8 0xb9; u8 0xdb; u8 0x6a; u8 0x08;
    u8 0xdd; u8 0x1f; u8 0x37; u8 0xc2; u8 0xf8;
    u8 0x3e; u8 0x2b; u8 0xb7; u8 0x21; u8 0xbf;
    u8 0x0f; u8 0x56; u8 0xa8; u8 0xff; u8 0xca;
    u8 0xb1; u8 0xd8; u8 0xf9; u8 0xab; u8 0x85;
    u8 0xb6; u8 0x2d; u8 0xb2; u8 0x56; u8 0x97;
  ] in
  assert_norm(List.Tot.length l == size_test50_encryption4_ciphertext);
  l
let test50_encryption4_ciphertext : lbytes size_test50_encryption4_ciphertext = createL test50_encryption4_ciphertext_list

// generated: "5a94aa57e8e9252f6b7f2ff8"
inline_for_extraction
let size_test50_encryption4_nonce: size_nat = 12
let test50_encryption4_nonce_list : l:list uint8{List.Tot.length l == size_test50_encryption4_nonce} =
  [@inline_let]
  let l = [
    u8 0x5a; u8 0x94; u8 0xaa; u8 0x57; u8 0xe8;
    u8 0xe9; u8 0x25; u8 0x2f; u8 0x6b; u8 0x7f;
    u8 0x2f; u8 0xf8;
  ] in
  assert_norm(List.Tot.length l == size_test50_encryption4_nonce);
  l
let test50_encryption4_nonce : lbytes size_test50_encryption4_nonce = createL test50_encryption4_nonce_list

// generated: "4265617574792069732074727574682c20747275746820626561757479"
inline_for_extraction
let size_test50_encryption4_plaintext: size_nat = 29
let test50_encryption4_plaintext_list : l:list uint8{List.Tot.length l == size_test50_encryption4_plaintext} =
  [@inline_let]
  let l = [
    u8 0x42; u8 0x65; u8 0x61; u8 0x75; u8 0x74;
    u8 0x79; u8 0x20; u8 0x69; u8 0x73; u8 0x20;
    u8 0x74; u8 0x72; u8 0x75; u8 0x74; u8 0x68;
    u8 0x2c; u8 0x20; u8 0x74; u8 0x72; u8 0x75;
    u8 0x74; u8 0x68; u8 0x20; u8 0x62; u8 0x65;
    u8 0x61; u8 0x75; u8 0x74; u8 0x79;
  ] in
  assert_norm(List.Tot.length l == size_test50_encryption4_plaintext);
  l
let test50_encryption4_plaintext : lbytes size_test50_encryption4_plaintext = createL test50_encryption4_plaintext_list

// generated: "436f756e742d35"
inline_for_extraction
let size_test50_encryption5_aad: size_nat = 7
let test50_encryption5_aad_list : l:list uint8{List.Tot.length l == size_test50_encryption5_aad} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x75; u8 0x6e; u8 0x74;
    u8 0x2d; u8 0x35;
  ] in
  assert_norm(List.Tot.length l == size_test50_encryption5_aad);
  l
let test50_encryption5_aad : lbytes size_test50_encryption5_aad = createL test50_encryption5_aad_list

// generated: "c8bbf38c36f3fcd2b01070101616fdcb597dad41b9b638273cc7e4ab284867cbf6497112df10e8f2f1c6dd63c0"
inline_for_extraction
let size_test50_encryption5_ciphertext: size_nat = 45
let test50_encryption5_ciphertext_list : l:list uint8{List.Tot.length l == size_test50_encryption5_ciphertext} =
  [@inline_let]
  let l = [
    u8 0xc8; u8 0xbb; u8 0xf3; u8 0x8c; u8 0x36;
    u8 0xf3; u8 0xfc; u8 0xd2; u8 0xb0; u8 0x10;
    u8 0x70; u8 0x10; u8 0x16; u8 0x16; u8 0xfd;
    u8 0xcb; u8 0x59; u8 0x7d; u8 0xad; u8 0x41;
    u8 0xb9; u8 0xb6; u8 0x38; u8 0x27; u8 0x3c;
    u8 0xc7; u8 0xe4; u8 0xab; u8 0x28; u8 0x48;
    u8 0x67; u8 0xcb; u8 0xf6; u8 0x49; u8 0x71;
    u8 0x12; u8 0xdf; u8 0x10; u8 0xe8; u8 0xf2;
    u8 0xf1; u8 0xc6; u8 0xdd; u8 0x63; u8 0xc0;
  ] in
  assert_norm(List.Tot.length l == size_test50_encryption5_ciphertext);
  l
let test50_encryption5_ciphertext : lbytes size_test50_encryption5_ciphertext = createL test50_encryption5_ciphertext_list

// generated: "5a94aa57e8e9252f6b7f2ff9"
inline_for_extraction
let size_test50_encryption5_nonce: size_nat = 12
let test50_encryption5_nonce_list : l:list uint8{List.Tot.length l == size_test50_encryption5_nonce} =
  [@inline_let]
  let l = [
    u8 0x5a; u8 0x94; u8 0xaa; u8 0x57; u8 0xe8;
    u8 0xe9; u8 0x25; u8 0x2f; u8 0x6b; u8 0x7f;
    u8 0x2f; u8 0xf9;
  ] in
  assert_norm(List.Tot.length l == size_test50_encryption5_nonce);
  l
let test50_encryption5_nonce : lbytes size_test50_encryption5_nonce = createL test50_encryption5_nonce_list

// generated: "4265617574792069732074727574682c20747275746820626561757479"
inline_for_extraction
let size_test50_encryption5_plaintext: size_nat = 29
let test50_encryption5_plaintext_list : l:list uint8{List.Tot.length l == size_test50_encryption5_plaintext} =
  [@inline_let]
  let l = [
    u8 0x42; u8 0x65; u8 0x61; u8 0x75; u8 0x74;
    u8 0x79; u8 0x20; u8 0x69; u8 0x73; u8 0x20;
    u8 0x74; u8 0x72; u8 0x75; u8 0x74; u8 0x68;
    u8 0x2c; u8 0x20; u8 0x74; u8 0x72; u8 0x75;
    u8 0x74; u8 0x68; u8 0x20; u8 0x62; u8 0x65;
    u8 0x61; u8 0x75; u8 0x74; u8 0x79;
  ] in
  assert_norm(List.Tot.length l == size_test50_encryption5_plaintext);
  l
let test50_encryption5_plaintext : lbytes size_test50_encryption5_plaintext = createL test50_encryption5_plaintext_list

// generated: "436f756e742d36"
inline_for_extraction
let size_test50_encryption6_aad: size_nat = 7
let test50_encryption6_aad_list : l:list uint8{List.Tot.length l == size_test50_encryption6_aad} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x75; u8 0x6e; u8 0x74;
    u8 0x2d; u8 0x36;
  ] in
  assert_norm(List.Tot.length l == size_test50_encryption6_aad);
  l
let test50_encryption6_aad : lbytes size_test50_encryption6_aad = createL test50_encryption6_aad_list

// generated: "5d2084a3a6eb66949aea3ba751c43444dd1f4314187fe46dc89215e00c481a8210d69b566d16702253e9a76847"
inline_for_extraction
let size_test50_encryption6_ciphertext: size_nat = 45
let test50_encryption6_ciphertext_list : l:list uint8{List.Tot.length l == size_test50_encryption6_ciphertext} =
  [@inline_let]
  let l = [
    u8 0x5d; u8 0x20; u8 0x84; u8 0xa3; u8 0xa6;
    u8 0xeb; u8 0x66; u8 0x94; u8 0x9a; u8 0xea;
    u8 0x3b; u8 0xa7; u8 0x51; u8 0xc4; u8 0x34;
    u8 0x44; u8 0xdd; u8 0x1f; u8 0x43; u8 0x14;
    u8 0x18; u8 0x7f; u8 0xe4; u8 0x6d; u8 0xc8;
    u8 0x92; u8 0x15; u8 0xe0; u8 0x0c; u8 0x48;
    u8 0x1a; u8 0x82; u8 0x10; u8 0xd6; u8 0x9b;
    u8 0x56; u8 0x6d; u8 0x16; u8 0x70; u8 0x22;
    u8 0x53; u8 0xe9; u8 0xa7; u8 0x68; u8 0x47;
  ] in
  assert_norm(List.Tot.length l == size_test50_encryption6_ciphertext);
  l
let test50_encryption6_ciphertext : lbytes size_test50_encryption6_ciphertext = createL test50_encryption6_ciphertext_list

// generated: "5a94aa57e8e9252f6b7f2ffa"
inline_for_extraction
let size_test50_encryption6_nonce: size_nat = 12
let test50_encryption6_nonce_list : l:list uint8{List.Tot.length l == size_test50_encryption6_nonce} =
  [@inline_let]
  let l = [
    u8 0x5a; u8 0x94; u8 0xaa; u8 0x57; u8 0xe8;
    u8 0xe9; u8 0x25; u8 0x2f; u8 0x6b; u8 0x7f;
    u8 0x2f; u8 0xfa;
  ] in
  assert_norm(List.Tot.length l == size_test50_encryption6_nonce);
  l
let test50_encryption6_nonce : lbytes size_test50_encryption6_nonce = createL test50_encryption6_nonce_list

// generated: "4265617574792069732074727574682c20747275746820626561757479"
inline_for_extraction
let size_test50_encryption6_plaintext: size_nat = 29
let test50_encryption6_plaintext_list : l:list uint8{List.Tot.length l == size_test50_encryption6_plaintext} =
  [@inline_let]
  let l = [
    u8 0x42; u8 0x65; u8 0x61; u8 0x75; u8 0x74;
    u8 0x79; u8 0x20; u8 0x69; u8 0x73; u8 0x20;
    u8 0x74; u8 0x72; u8 0x75; u8 0x74; u8 0x68;
    u8 0x2c; u8 0x20; u8 0x74; u8 0x72; u8 0x75;
    u8 0x74; u8 0x68; u8 0x20; u8 0x62; u8 0x65;
    u8 0x61; u8 0x75; u8 0x74; u8 0x79;
  ] in
  assert_norm(List.Tot.length l == size_test50_encryption6_plaintext);
  l
let test50_encryption6_plaintext : lbytes size_test50_encryption6_plaintext = createL test50_encryption6_plaintext_list

// generated: "436f756e742d37"
inline_for_extraction
let size_test50_encryption7_aad: size_nat = 7
let test50_encryption7_aad_list : l:list uint8{List.Tot.length l == size_test50_encryption7_aad} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x75; u8 0x6e; u8 0x74;
    u8 0x2d; u8 0x37;
  ] in
  assert_norm(List.Tot.length l == size_test50_encryption7_aad);
  l
let test50_encryption7_aad : lbytes size_test50_encryption7_aad = createL test50_encryption7_aad_list

// generated: "050009baaad7fc155fc9ccbb14ab4f15a7f97efb00ebdf4e56182abf7c950c51d9731f6859500fd4694d0d0954"
inline_for_extraction
let size_test50_encryption7_ciphertext: size_nat = 45
let test50_encryption7_ciphertext_list : l:list uint8{List.Tot.length l == size_test50_encryption7_ciphertext} =
  [@inline_let]
  let l = [
    u8 0x05; u8 0x00; u8 0x09; u8 0xba; u8 0xaa;
    u8 0xd7; u8 0xfc; u8 0x15; u8 0x5f; u8 0xc9;
    u8 0xcc; u8 0xbb; u8 0x14; u8 0xab; u8 0x4f;
    u8 0x15; u8 0xa7; u8 0xf9; u8 0x7e; u8 0xfb;
    u8 0x00; u8 0xeb; u8 0xdf; u8 0x4e; u8 0x56;
    u8 0x18; u8 0x2a; u8 0xbf; u8 0x7c; u8 0x95;
    u8 0x0c; u8 0x51; u8 0xd9; u8 0x73; u8 0x1f;
    u8 0x68; u8 0x59; u8 0x50; u8 0x0f; u8 0xd4;
    u8 0x69; u8 0x4d; u8 0x0d; u8 0x09; u8 0x54;
  ] in
  assert_norm(List.Tot.length l == size_test50_encryption7_ciphertext);
  l
let test50_encryption7_ciphertext : lbytes size_test50_encryption7_ciphertext = createL test50_encryption7_ciphertext_list

// generated: "5a94aa57e8e9252f6b7f2ffb"
inline_for_extraction
let size_test50_encryption7_nonce: size_nat = 12
let test50_encryption7_nonce_list : l:list uint8{List.Tot.length l == size_test50_encryption7_nonce} =
  [@inline_let]
  let l = [
    u8 0x5a; u8 0x94; u8 0xaa; u8 0x57; u8 0xe8;
    u8 0xe9; u8 0x25; u8 0x2f; u8 0x6b; u8 0x7f;
    u8 0x2f; u8 0xfb;
  ] in
  assert_norm(List.Tot.length l == size_test50_encryption7_nonce);
  l
let test50_encryption7_nonce : lbytes size_test50_encryption7_nonce = createL test50_encryption7_nonce_list

// generated: "4265617574792069732074727574682c20747275746820626561757479"
inline_for_extraction
let size_test50_encryption7_plaintext: size_nat = 29
let test50_encryption7_plaintext_list : l:list uint8{List.Tot.length l == size_test50_encryption7_plaintext} =
  [@inline_let]
  let l = [
    u8 0x42; u8 0x65; u8 0x61; u8 0x75; u8 0x74;
    u8 0x79; u8 0x20; u8 0x69; u8 0x73; u8 0x20;
    u8 0x74; u8 0x72; u8 0x75; u8 0x74; u8 0x68;
    u8 0x2c; u8 0x20; u8 0x74; u8 0x72; u8 0x75;
    u8 0x74; u8 0x68; u8 0x20; u8 0x62; u8 0x65;
    u8 0x61; u8 0x75; u8 0x74; u8 0x79;
  ] in
  assert_norm(List.Tot.length l == size_test50_encryption7_plaintext);
  l
let test50_encryption7_plaintext : lbytes size_test50_encryption7_plaintext = createL test50_encryption7_plaintext_list

// generated: "436f756e742d38"
inline_for_extraction
let size_test50_encryption8_aad: size_nat = 7
let test50_encryption8_aad_list : l:list uint8{List.Tot.length l == size_test50_encryption8_aad} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x75; u8 0x6e; u8 0x74;
    u8 0x2d; u8 0x38;
  ] in
  assert_norm(List.Tot.length l == size_test50_encryption8_aad);
  l
let test50_encryption8_aad : lbytes size_test50_encryption8_aad = createL test50_encryption8_aad_list

// generated: "88882c7ce556428bea04a4b2ba0a9d0761294bc83b1094e6573904b2456c8c5a1c24d14677d971136b498b82e9"
inline_for_extraction
let size_test50_encryption8_ciphertext: size_nat = 45
let test50_encryption8_ciphertext_list : l:list uint8{List.Tot.length l == size_test50_encryption8_ciphertext} =
  [@inline_let]
  let l = [
    u8 0x88; u8 0x88; u8 0x2c; u8 0x7c; u8 0xe5;
    u8 0x56; u8 0x42; u8 0x8b; u8 0xea; u8 0x04;
    u8 0xa4; u8 0xb2; u8 0xba; u8 0x0a; u8 0x9d;
    u8 0x07; u8 0x61; u8 0x29; u8 0x4b; u8 0xc8;
    u8 0x3b; u8 0x10; u8 0x94; u8 0xe6; u8 0x57;
    u8 0x39; u8 0x04; u8 0xb2; u8 0x45; u8 0x6c;
    u8 0x8c; u8 0x5a; u8 0x1c; u8 0x24; u8 0xd1;
    u8 0x46; u8 0x77; u8 0xd9; u8 0x71; u8 0x13;
    u8 0x6b; u8 0x49; u8 0x8b; u8 0x82; u8 0xe9;
  ] in
  assert_norm(List.Tot.length l == size_test50_encryption8_ciphertext);
  l
let test50_encryption8_ciphertext : lbytes size_test50_encryption8_ciphertext = createL test50_encryption8_ciphertext_list

// generated: "5a94aa57e8e9252f6b7f2ff4"
inline_for_extraction
let size_test50_encryption8_nonce: size_nat = 12
let test50_encryption8_nonce_list : l:list uint8{List.Tot.length l == size_test50_encryption8_nonce} =
  [@inline_let]
  let l = [
    u8 0x5a; u8 0x94; u8 0xaa; u8 0x57; u8 0xe8;
    u8 0xe9; u8 0x25; u8 0x2f; u8 0x6b; u8 0x7f;
    u8 0x2f; u8 0xf4;
  ] in
  assert_norm(List.Tot.length l == size_test50_encryption8_nonce);
  l
let test50_encryption8_nonce : lbytes size_test50_encryption8_nonce = createL test50_encryption8_nonce_list

// generated: "4265617574792069732074727574682c20747275746820626561757479"
inline_for_extraction
let size_test50_encryption8_plaintext: size_nat = 29
let test50_encryption8_plaintext_list : l:list uint8{List.Tot.length l == size_test50_encryption8_plaintext} =
  [@inline_let]
  let l = [
    u8 0x42; u8 0x65; u8 0x61; u8 0x75; u8 0x74;
    u8 0x79; u8 0x20; u8 0x69; u8 0x73; u8 0x20;
    u8 0x74; u8 0x72; u8 0x75; u8 0x74; u8 0x68;
    u8 0x2c; u8 0x20; u8 0x74; u8 0x72; u8 0x75;
    u8 0x74; u8 0x68; u8 0x20; u8 0x62; u8 0x65;
    u8 0x61; u8 0x75; u8 0x74; u8 0x79;
  ] in
  assert_norm(List.Tot.length l == size_test50_encryption8_plaintext);
  l
let test50_encryption8_plaintext : lbytes size_test50_encryption8_plaintext = createL test50_encryption8_plaintext_list

// generated: "436f756e742d39"
inline_for_extraction
let size_test50_encryption9_aad: size_nat = 7
let test50_encryption9_aad_list : l:list uint8{List.Tot.length l == size_test50_encryption9_aad} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x75; u8 0x6e; u8 0x74;
    u8 0x2d; u8 0x39;
  ] in
  assert_norm(List.Tot.length l == size_test50_encryption9_aad);
  l
let test50_encryption9_aad : lbytes size_test50_encryption9_aad = createL test50_encryption9_aad_list

// generated: "c1b3a3a51a44eaafd91084fe6876c7a350afa75507f3f4ad215ef70e9ba52a6ef01d1960989a1040f3ffd35e3d"
inline_for_extraction
let size_test50_encryption9_ciphertext: size_nat = 45
let test50_encryption9_ciphertext_list : l:list uint8{List.Tot.length l == size_test50_encryption9_ciphertext} =
  [@inline_let]
  let l = [
    u8 0xc1; u8 0xb3; u8 0xa3; u8 0xa5; u8 0x1a;
    u8 0x44; u8 0xea; u8 0xaf; u8 0xd9; u8 0x10;
    u8 0x84; u8 0xfe; u8 0x68; u8 0x76; u8 0xc7;
    u8 0xa3; u8 0x50; u8 0xaf; u8 0xa7; u8 0x55;
    u8 0x07; u8 0xf3; u8 0xf4; u8 0xad; u8 0x21;
    u8 0x5e; u8 0xf7; u8 0x0e; u8 0x9b; u8 0xa5;
    u8 0x2a; u8 0x6e; u8 0xf0; u8 0x1d; u8 0x19;
    u8 0x60; u8 0x98; u8 0x9a; u8 0x10; u8 0x40;
    u8 0xf3; u8 0xff; u8 0xd3; u8 0x5e; u8 0x3d;
  ] in
  assert_norm(List.Tot.length l == size_test50_encryption9_ciphertext);
  l
let test50_encryption9_ciphertext : lbytes size_test50_encryption9_ciphertext = createL test50_encryption9_ciphertext_list

// generated: "5a94aa57e8e9252f6b7f2ff5"
inline_for_extraction
let size_test50_encryption9_nonce: size_nat = 12
let test50_encryption9_nonce_list : l:list uint8{List.Tot.length l == size_test50_encryption9_nonce} =
  [@inline_let]
  let l = [
    u8 0x5a; u8 0x94; u8 0xaa; u8 0x57; u8 0xe8;
    u8 0xe9; u8 0x25; u8 0x2f; u8 0x6b; u8 0x7f;
    u8 0x2f; u8 0xf5;
  ] in
  assert_norm(List.Tot.length l == size_test50_encryption9_nonce);
  l
let test50_encryption9_nonce : lbytes size_test50_encryption9_nonce = createL test50_encryption9_nonce_list

// generated: "4265617574792069732074727574682c20747275746820626561757479"
inline_for_extraction
let size_test50_encryption9_plaintext: size_nat = 29
let test50_encryption9_plaintext_list : l:list uint8{List.Tot.length l == size_test50_encryption9_plaintext} =
  [@inline_let]
  let l = [
    u8 0x42; u8 0x65; u8 0x61; u8 0x75; u8 0x74;
    u8 0x79; u8 0x20; u8 0x69; u8 0x73; u8 0x20;
    u8 0x74; u8 0x72; u8 0x75; u8 0x74; u8 0x68;
    u8 0x2c; u8 0x20; u8 0x74; u8 0x72; u8 0x75;
    u8 0x74; u8 0x68; u8 0x20; u8 0x62; u8 0x65;
    u8 0x61; u8 0x75; u8 0x74; u8 0x79;
  ] in
  assert_norm(List.Tot.length l == size_test50_encryption9_plaintext);
  l
let test50_encryption9_plaintext : lbytes size_test50_encryption9_plaintext = createL test50_encryption9_plaintext_list

// generated: "436f6e746578742d30"
inline_for_extraction
let size_test50_export0_exportContext: size_nat = 9
let test50_export0_exportContext_list : l:list uint8{List.Tot.length l == size_test50_export0_exportContext} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x6e; u8 0x74; u8 0x65;
    u8 0x78; u8 0x74; u8 0x2d; u8 0x30;
  ] in
  assert_norm(List.Tot.length l == size_test50_export0_exportContext);
  l
let test50_export0_exportContext : lbytes size_test50_export0_exportContext = createL test50_export0_exportContext_list

// generated: "d05107882dde3f50d7f7c2f0f24a167a83a3a0a2882d2b6ee518ff0a2d920221"
inline_for_extraction
let size_test50_export0_exportValue: size_nat = 32
let test50_export0_exportValue_list : l:list uint8{List.Tot.length l == size_test50_export0_exportValue} =
  [@inline_let]
  let l = [
    u8 0xd0; u8 0x51; u8 0x07; u8 0x88; u8 0x2d;
    u8 0xde; u8 0x3f; u8 0x50; u8 0xd7; u8 0xf7;
    u8 0xc2; u8 0xf0; u8 0xf2; u8 0x4a; u8 0x16;
    u8 0x7a; u8 0x83; u8 0xa3; u8 0xa0; u8 0xa2;
    u8 0x88; u8 0x2d; u8 0x2b; u8 0x6e; u8 0xe5;
    u8 0x18; u8 0xff; u8 0x0a; u8 0x2d; u8 0x92;
    u8 0x02; u8 0x21;
  ] in
  assert_norm(List.Tot.length l == size_test50_export0_exportValue);
  l
let test50_export0_exportValue : lbytes size_test50_export0_exportValue = createL test50_export0_exportValue_list

let test50_export0_len:size_nat = 32
// generated: "436f6e746578742d31"
inline_for_extraction
let size_test50_export1_exportContext: size_nat = 9
let test50_export1_exportContext_list : l:list uint8{List.Tot.length l == size_test50_export1_exportContext} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x6e; u8 0x74; u8 0x65;
    u8 0x78; u8 0x74; u8 0x2d; u8 0x31;
  ] in
  assert_norm(List.Tot.length l == size_test50_export1_exportContext);
  l
let test50_export1_exportContext : lbytes size_test50_export1_exportContext = createL test50_export1_exportContext_list

// generated: "0d946886c047daf5dffba41bbe7e7aa2f05309b917b5909e9d74e75068c3c2c1"
inline_for_extraction
let size_test50_export1_exportValue: size_nat = 32
let test50_export1_exportValue_list : l:list uint8{List.Tot.length l == size_test50_export1_exportValue} =
  [@inline_let]
  let l = [
    u8 0x0d; u8 0x94; u8 0x68; u8 0x86; u8 0xc0;
    u8 0x47; u8 0xda; u8 0xf5; u8 0xdf; u8 0xfb;
    u8 0xa4; u8 0x1b; u8 0xbe; u8 0x7e; u8 0x7a;
    u8 0xa2; u8 0xf0; u8 0x53; u8 0x09; u8 0xb9;
    u8 0x17; u8 0xb5; u8 0x90; u8 0x9e; u8 0x9d;
    u8 0x74; u8 0xe7; u8 0x50; u8 0x68; u8 0xc3;
    u8 0xc2; u8 0xc1;
  ] in
  assert_norm(List.Tot.length l == size_test50_export1_exportValue);
  l
let test50_export1_exportValue : lbytes size_test50_export1_exportValue = createL test50_export1_exportValue_list

let test50_export1_len:size_nat = 32
// generated: "436f6e746578742d32"
inline_for_extraction
let size_test50_export2_exportContext: size_nat = 9
let test50_export2_exportContext_list : l:list uint8{List.Tot.length l == size_test50_export2_exportContext} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x6e; u8 0x74; u8 0x65;
    u8 0x78; u8 0x74; u8 0x2d; u8 0x32;
  ] in
  assert_norm(List.Tot.length l == size_test50_export2_exportContext);
  l
let test50_export2_exportContext : lbytes size_test50_export2_exportContext = createL test50_export2_exportContext_list

// generated: "ed404cf3f63929d5c56dce7aca216b4956571fd2833b4d7ce379f647eaee1f53"
inline_for_extraction
let size_test50_export2_exportValue: size_nat = 32
let test50_export2_exportValue_list : l:list uint8{List.Tot.length l == size_test50_export2_exportValue} =
  [@inline_let]
  let l = [
    u8 0xed; u8 0x40; u8 0x4c; u8 0xf3; u8 0xf6;
    u8 0x39; u8 0x29; u8 0xd5; u8 0xc5; u8 0x6d;
    u8 0xce; u8 0x7a; u8 0xca; u8 0x21; u8 0x6b;
    u8 0x49; u8 0x56; u8 0x57; u8 0x1f; u8 0xd2;
    u8 0x83; u8 0x3b; u8 0x4d; u8 0x7c; u8 0xe3;
    u8 0x79; u8 0xf6; u8 0x47; u8 0xea; u8 0xee;
    u8 0x1f; u8 0x53;
  ] in
  assert_norm(List.Tot.length l == size_test50_export2_exportValue);
  l
let test50_export2_exportValue : lbytes size_test50_export2_exportValue = createL test50_export2_exportValue_list

let test50_export2_len:size_nat = 32
// generated: "436f6e746578742d33"
inline_for_extraction
let size_test50_export3_exportContext: size_nat = 9
let test50_export3_exportContext_list : l:list uint8{List.Tot.length l == size_test50_export3_exportContext} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x6e; u8 0x74; u8 0x65;
    u8 0x78; u8 0x74; u8 0x2d; u8 0x33;
  ] in
  assert_norm(List.Tot.length l == size_test50_export3_exportContext);
  l
let test50_export3_exportContext : lbytes size_test50_export3_exportContext = createL test50_export3_exportContext_list

// generated: "028a39df9f1f307966b2749000332b62166f38600c0a07e2716799737cb5a03c"
inline_for_extraction
let size_test50_export3_exportValue: size_nat = 32
let test50_export3_exportValue_list : l:list uint8{List.Tot.length l == size_test50_export3_exportValue} =
  [@inline_let]
  let l = [
    u8 0x02; u8 0x8a; u8 0x39; u8 0xdf; u8 0x9f;
    u8 0x1f; u8 0x30; u8 0x79; u8 0x66; u8 0xb2;
    u8 0x74; u8 0x90; u8 0x00; u8 0x33; u8 0x2b;
    u8 0x62; u8 0x16; u8 0x6f; u8 0x38; u8 0x60;
    u8 0x0c; u8 0x0a; u8 0x07; u8 0xe2; u8 0x71;
    u8 0x67; u8 0x99; u8 0x73; u8 0x7c; u8 0xb5;
    u8 0xa0; u8 0x3c;
  ] in
  assert_norm(List.Tot.length l == size_test50_export3_exportValue);
  l
let test50_export3_exportValue : lbytes size_test50_export3_exportValue = createL test50_export3_exportValue_list

let test50_export3_len:size_nat = 32
// generated: "436f6e746578742d34"
inline_for_extraction
let size_test50_export4_exportContext: size_nat = 9
let test50_export4_exportContext_list : l:list uint8{List.Tot.length l == size_test50_export4_exportContext} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x6e; u8 0x74; u8 0x65;
    u8 0x78; u8 0x74; u8 0x2d; u8 0x34;
  ] in
  assert_norm(List.Tot.length l == size_test50_export4_exportContext);
  l
let test50_export4_exportContext : lbytes size_test50_export4_exportContext = createL test50_export4_exportContext_list

// generated: "a3ed939d46c1648f9175f9f6b314f4e86f9e68816ec864bac2fa99eb493459f2"
inline_for_extraction
let size_test50_export4_exportValue: size_nat = 32
let test50_export4_exportValue_list : l:list uint8{List.Tot.length l == size_test50_export4_exportValue} =
  [@inline_let]
  let l = [
    u8 0xa3; u8 0xed; u8 0x93; u8 0x9d; u8 0x46;
    u8 0xc1; u8 0x64; u8 0x8f; u8 0x91; u8 0x75;
    u8 0xf9; u8 0xf6; u8 0xb3; u8 0x14; u8 0xf4;
    u8 0xe8; u8 0x6f; u8 0x9e; u8 0x68; u8 0x81;
    u8 0x6e; u8 0xc8; u8 0x64; u8 0xba; u8 0xc2;
    u8 0xfa; u8 0x99; u8 0xeb; u8 0x49; u8 0x34;
    u8 0x59; u8 0xf2;
  ] in
  assert_norm(List.Tot.length l == size_test50_export4_exportValue);
  l
let test50_export4_exportValue : lbytes size_test50_export4_exportValue = createL test50_export4_exportValue_list

let test50_export4_len:size_nat = 32

let test50 () =
  let res = test_setupBase test50_ciphersuite test50_skEm test50_pkEm test50_skRm test50_pkRm test50_info test50_enc test50_zz test50_key_schedule_context test50_secret test50_key test50_nonce test50_exporterSecret test50_encryption0_nonce test50_encryption1_nonce in
  let seq0:HPKE.seq_aead_s test50_ciphersuite = 0 in
  let enc_res0 = test_encryption test50_ciphersuite test50_key test50_nonce test50_exporterSecret test50_encryption0_aad test50_encryption0_plaintext seq0 test50_encryption0_ciphertext test50_encryption0_nonce in

  assert_norm (1 < pow2 (8 * 12));
  let seq1:HPKE.seq_aead_s test50_ciphersuite = (seq0 + 1) in
  let enc_res1 = test_encryption test50_ciphersuite test50_key test50_nonce test50_exporterSecret test50_encryption1_aad test50_encryption1_plaintext seq1 test50_encryption1_ciphertext test50_encryption1_nonce in

  assert_norm (2 < pow2 (8 * 12));
  let seq2:HPKE.seq_aead_s test50_ciphersuite = (seq1 + 1) in
  let enc_res2 = test_encryption test50_ciphersuite test50_key test50_nonce test50_exporterSecret test50_encryption2_aad test50_encryption2_plaintext 2 test50_encryption2_ciphertext test50_encryption2_nonce in

  assert_norm (3 < pow2 (8 * 12));
  let seq3:HPKE.seq_aead_s test50_ciphersuite = (seq2 + 1) in
  let enc_res3 = test_encryption test50_ciphersuite test50_key test50_nonce test50_exporterSecret test50_encryption3_aad test50_encryption3_plaintext 3 test50_encryption3_ciphertext test50_encryption3_nonce in

  assert_norm (4 < pow2 (8 * 12));
  let seq4:HPKE.seq_aead_s test50_ciphersuite = (seq3 + 1) in
  let enc_res4 = test_encryption test50_ciphersuite test50_key test50_nonce test50_exporterSecret test50_encryption4_aad test50_encryption4_plaintext 4 test50_encryption4_ciphertext test50_encryption4_nonce in

  assert_norm (5 < pow2 (8 * 12));
  let seq5:HPKE.seq_aead_s test50_ciphersuite = (seq4 + 1) in
  let enc_res5 = test_encryption test50_ciphersuite test50_key test50_nonce test50_exporterSecret test50_encryption5_aad test50_encryption5_plaintext 5 test50_encryption5_ciphertext test50_encryption5_nonce in

  assert_norm (6 < pow2 (8 * 12));
  let seq6:HPKE.seq_aead_s test50_ciphersuite = (seq5 + 1) in
  let enc_res6 = test_encryption test50_ciphersuite test50_key test50_nonce test50_exporterSecret test50_encryption6_aad test50_encryption6_plaintext 6 test50_encryption6_ciphertext test50_encryption6_nonce in

  assert_norm (7 < pow2 (8 * 12));
  let seq7:HPKE.seq_aead_s test50_ciphersuite = (seq6 + 1) in
  let enc_res7 = test_encryption test50_ciphersuite test50_key test50_nonce test50_exporterSecret test50_encryption7_aad test50_encryption7_plaintext 7 test50_encryption7_ciphertext test50_encryption7_nonce in

  assert_norm (8 < pow2 (8 * 12));
  let seq8:HPKE.seq_aead_s test50_ciphersuite = (seq7 + 1) in
  let enc_res8 = test_encryption test50_ciphersuite test50_key test50_nonce test50_exporterSecret test50_encryption8_aad test50_encryption8_plaintext 8 test50_encryption8_ciphertext test50_encryption8_nonce in

  assert_norm (9 < pow2 (8 * 12));
  let seq9:HPKE.seq_aead_s test50_ciphersuite = (seq8 + 1) in
  let enc_res9 = test_encryption test50_ciphersuite test50_key test50_nonce test50_exporterSecret test50_encryption9_aad test50_encryption9_plaintext 9 test50_encryption9_ciphertext test50_encryption9_nonce in

  let exp_res0 = test_export test50_ciphersuite test50_key test50_nonce test50_exporterSecret test50_export0_exportContext test50_export0_len test50_export0_exportValue in

  let exp_res1 = test_export test50_ciphersuite test50_key test50_nonce test50_exporterSecret test50_export1_exportContext test50_export1_len test50_export1_exportValue in

  let exp_res2 = test_export test50_ciphersuite test50_key test50_nonce test50_exporterSecret test50_export2_exportContext test50_export2_len test50_export2_exportValue in

  let exp_res3 = test_export test50_ciphersuite test50_key test50_nonce test50_exporterSecret test50_export3_exportContext test50_export3_len test50_export3_exportValue in

  let exp_res4 = test_export test50_ciphersuite test50_key test50_nonce test50_exporterSecret test50_export4_exportContext test50_export4_len test50_export4_exportValue in

  enc_res0 && enc_res1 && enc_res2 && enc_res3 && enc_res4 && enc_res5 && enc_res6 && enc_res7 && enc_res8 && enc_res9 && res && exp_res0 && exp_res1 && exp_res2 && exp_res3 && exp_res4


// Skipped unsupported test case 51

let test52_mode: HPKE.mode = HPKE.Base
let test52_ciphersuite = DH.DH_P256, Hash.SHA2_256, AEAD.AES256_GCM, Hash.SHA2_256

// generated: "4f6465206f6e2061204772656369616e2055726e"
inline_for_extraction
let size_test52_info: size_nat = 20
let test52_info_list : l:list uint8{List.Tot.length l == size_test52_info} =
  [@inline_let]
  let l = [
    u8 0x4f; u8 0x64; u8 0x65; u8 0x20; u8 0x6f;
    u8 0x6e; u8 0x20; u8 0x61; u8 0x20; u8 0x47;
    u8 0x72; u8 0x65; u8 0x63; u8 0x69; u8 0x61;
    u8 0x6e; u8 0x20; u8 0x55; u8 0x72; u8 0x6e;
  ] in
  assert_norm(List.Tot.length l == size_test52_info);
  l
let test52_info : lbytes size_test52_info = createL test52_info_list

// generated: "b71aea3aae004247d8c3593a031588c9c24cf30f82297ada34a78d6dc6ae0a78"
inline_for_extraction
let size_test52_skRm: size_nat = 32
let test52_skRm_list : l:list uint8{List.Tot.length l == size_test52_skRm} =
  [@inline_let]
  let l = [
    u8 0xb7; u8 0x1a; u8 0xea; u8 0x3a; u8 0xae;
    u8 0x00; u8 0x42; u8 0x47; u8 0xd8; u8 0xc3;
    u8 0x59; u8 0x3a; u8 0x03; u8 0x15; u8 0x88;
    u8 0xc9; u8 0xc2; u8 0x4c; u8 0xf3; u8 0x0f;
    u8 0x82; u8 0x29; u8 0x7a; u8 0xda; u8 0x34;
    u8 0xa7; u8 0x8d; u8 0x6d; u8 0xc6; u8 0xae;
    u8 0x0a; u8 0x78;
  ] in
  assert_norm(List.Tot.length l == size_test52_skRm);
  l
let test52_skRm : lbytes size_test52_skRm = createL test52_skRm_list

// generated: "58d1a4394bbf33a4b25e9d2739bb8e43866e6536cbba069aed738484716a6f73"
inline_for_extraction
let size_test52_skEm: size_nat = 32
let test52_skEm_list : l:list uint8{List.Tot.length l == size_test52_skEm} =
  [@inline_let]
  let l = [
    u8 0x58; u8 0xd1; u8 0xa4; u8 0x39; u8 0x4b;
    u8 0xbf; u8 0x33; u8 0xa4; u8 0xb2; u8 0x5e;
    u8 0x9d; u8 0x27; u8 0x39; u8 0xbb; u8 0x8e;
    u8 0x43; u8 0x86; u8 0x6e; u8 0x65; u8 0x36;
    u8 0xcb; u8 0xba; u8 0x06; u8 0x9a; u8 0xed;
    u8 0x73; u8 0x84; u8 0x84; u8 0x71; u8 0x6a;
    u8 0x6f; u8 0x73;
  ] in
  assert_norm(List.Tot.length l == size_test52_skEm);
  l
let test52_skEm : lbytes size_test52_skEm = createL test52_skEm_list

// generated: "04907761a60647630fc57714c6329f3e82fdd60328c0f42f6986c3a6c563554db0c64214d32e2d4e2d892fa898d936cf19e31cc2bf8b2d552b1e178839be2c0902"
inline_for_extraction
let size_test52_pkRm: size_nat = 65
let test52_pkRm_list : l:list uint8{List.Tot.length l == size_test52_pkRm} =
  [@inline_let]
  let l = [
    u8 0x04; u8 0x90; u8 0x77; u8 0x61; u8 0xa6;
    u8 0x06; u8 0x47; u8 0x63; u8 0x0f; u8 0xc5;
    u8 0x77; u8 0x14; u8 0xc6; u8 0x32; u8 0x9f;
    u8 0x3e; u8 0x82; u8 0xfd; u8 0xd6; u8 0x03;
    u8 0x28; u8 0xc0; u8 0xf4; u8 0x2f; u8 0x69;
    u8 0x86; u8 0xc3; u8 0xa6; u8 0xc5; u8 0x63;
    u8 0x55; u8 0x4d; u8 0xb0; u8 0xc6; u8 0x42;
    u8 0x14; u8 0xd3; u8 0x2e; u8 0x2d; u8 0x4e;
    u8 0x2d; u8 0x89; u8 0x2f; u8 0xa8; u8 0x98;
    u8 0xd9; u8 0x36; u8 0xcf; u8 0x19; u8 0xe3;
    u8 0x1c; u8 0xc2; u8 0xbf; u8 0x8b; u8 0x2d;
    u8 0x55; u8 0x2b; u8 0x1e; u8 0x17; u8 0x88;
    u8 0x39; u8 0xbe; u8 0x2c; u8 0x09; u8 0x02;
  ] in
  assert_norm(List.Tot.length l == size_test52_pkRm);
  l
let test52_pkRm : lbytes size_test52_pkRm = createL test52_pkRm_list

// generated: "04c138eed594942fcfac6a03af161ea13208437bc5afef4a2ff0af3b20407cc82c785e38aca3c8947aa5ac592c4ed7787dbb1cc20248e9f305621067273a7ee0fa"
inline_for_extraction
let size_test52_pkEm: size_nat = 65
let test52_pkEm_list : l:list uint8{List.Tot.length l == size_test52_pkEm} =
  [@inline_let]
  let l = [
    u8 0x04; u8 0xc1; u8 0x38; u8 0xee; u8 0xd5;
    u8 0x94; u8 0x94; u8 0x2f; u8 0xcf; u8 0xac;
    u8 0x6a; u8 0x03; u8 0xaf; u8 0x16; u8 0x1e;
    u8 0xa1; u8 0x32; u8 0x08; u8 0x43; u8 0x7b;
    u8 0xc5; u8 0xaf; u8 0xef; u8 0x4a; u8 0x2f;
    u8 0xf0; u8 0xaf; u8 0x3b; u8 0x20; u8 0x40;
    u8 0x7c; u8 0xc8; u8 0x2c; u8 0x78; u8 0x5e;
    u8 0x38; u8 0xac; u8 0xa3; u8 0xc8; u8 0x94;
    u8 0x7a; u8 0xa5; u8 0xac; u8 0x59; u8 0x2c;
    u8 0x4e; u8 0xd7; u8 0x78; u8 0x7d; u8 0xbb;
    u8 0x1c; u8 0xc2; u8 0x02; u8 0x48; u8 0xe9;
    u8 0xf3; u8 0x05; u8 0x62; u8 0x10; u8 0x67;
    u8 0x27; u8 0x3a; u8 0x7e; u8 0xe0; u8 0xfa;
  ] in
  assert_norm(List.Tot.length l == size_test52_pkEm);
  l
let test52_pkEm : lbytes size_test52_pkEm = createL test52_pkEm_list

// generated: "04c138eed594942fcfac6a03af161ea13208437bc5afef4a2ff0af3b20407cc82c785e38aca3c8947aa5ac592c4ed7787dbb1cc20248e9f305621067273a7ee0fa"
inline_for_extraction
let size_test52_enc: size_nat = 65
let test52_enc_list : l:list uint8{List.Tot.length l == size_test52_enc} =
  [@inline_let]
  let l = [
    u8 0x04; u8 0xc1; u8 0x38; u8 0xee; u8 0xd5;
    u8 0x94; u8 0x94; u8 0x2f; u8 0xcf; u8 0xac;
    u8 0x6a; u8 0x03; u8 0xaf; u8 0x16; u8 0x1e;
    u8 0xa1; u8 0x32; u8 0x08; u8 0x43; u8 0x7b;
    u8 0xc5; u8 0xaf; u8 0xef; u8 0x4a; u8 0x2f;
    u8 0xf0; u8 0xaf; u8 0x3b; u8 0x20; u8 0x40;
    u8 0x7c; u8 0xc8; u8 0x2c; u8 0x78; u8 0x5e;
    u8 0x38; u8 0xac; u8 0xa3; u8 0xc8; u8 0x94;
    u8 0x7a; u8 0xa5; u8 0xac; u8 0x59; u8 0x2c;
    u8 0x4e; u8 0xd7; u8 0x78; u8 0x7d; u8 0xbb;
    u8 0x1c; u8 0xc2; u8 0x02; u8 0x48; u8 0xe9;
    u8 0xf3; u8 0x05; u8 0x62; u8 0x10; u8 0x67;
    u8 0x27; u8 0x3a; u8 0x7e; u8 0xe0; u8 0xfa;
  ] in
  assert_norm(List.Tot.length l == size_test52_enc);
  l
let test52_enc : lbytes size_test52_enc = createL test52_enc_list

// generated: "932c576130aa5231cf19725a39b5f16da720a35c722d3a3feac0e6e6697502a5"
inline_for_extraction
let size_test52_zz: size_nat = 32
let test52_zz_list : l:list uint8{List.Tot.length l == size_test52_zz} =
  [@inline_let]
  let l = [
    u8 0x93; u8 0x2c; u8 0x57; u8 0x61; u8 0x30;
    u8 0xaa; u8 0x52; u8 0x31; u8 0xcf; u8 0x19;
    u8 0x72; u8 0x5a; u8 0x39; u8 0xb5; u8 0xf1;
    u8 0x6d; u8 0xa7; u8 0x20; u8 0xa3; u8 0x5c;
    u8 0x72; u8 0x2d; u8 0x3a; u8 0x3f; u8 0xea;
    u8 0xc0; u8 0xe6; u8 0xe6; u8 0x69; u8 0x75;
    u8 0x02; u8 0xa5;
  ] in
  assert_norm(List.Tot.length l == size_test52_zz);
  l
let test52_zz : lbytes size_test52_zz = createL test52_zz_list

// generated: "001000010002005d0f5548cb13d7eba5320ae0e21b1ee274aac7ea1cce02570cf993d1b2456449debcca602075cf6f8ef506613a82e1c73727e2c912d0c49f16cd56fc524af4ce"
inline_for_extraction
let size_test52_key_schedule_context: size_nat = 71
let test52_key_schedule_context_list : l:list uint8{List.Tot.length l == size_test52_key_schedule_context} =
  [@inline_let]
  let l = [
    u8 0x00; u8 0x10; u8 0x00; u8 0x01; u8 0x00;
    u8 0x02; u8 0x00; u8 0x5d; u8 0x0f; u8 0x55;
    u8 0x48; u8 0xcb; u8 0x13; u8 0xd7; u8 0xeb;
    u8 0xa5; u8 0x32; u8 0x0a; u8 0xe0; u8 0xe2;
    u8 0x1b; u8 0x1e; u8 0xe2; u8 0x74; u8 0xaa;
    u8 0xc7; u8 0xea; u8 0x1c; u8 0xce; u8 0x02;
    u8 0x57; u8 0x0c; u8 0xf9; u8 0x93; u8 0xd1;
    u8 0xb2; u8 0x45; u8 0x64; u8 0x49; u8 0xde;
    u8 0xbc; u8 0xca; u8 0x60; u8 0x20; u8 0x75;
    u8 0xcf; u8 0x6f; u8 0x8e; u8 0xf5; u8 0x06;
    u8 0x61; u8 0x3a; u8 0x82; u8 0xe1; u8 0xc7;
    u8 0x37; u8 0x27; u8 0xe2; u8 0xc9; u8 0x12;
    u8 0xd0; u8 0xc4; u8 0x9f; u8 0x16; u8 0xcd;
    u8 0x56; u8 0xfc; u8 0x52; u8 0x4a; u8 0xf4;
    u8 0xce;
  ] in
  assert_norm(List.Tot.length l == size_test52_key_schedule_context);
  l
let test52_key_schedule_context : lbytes size_test52_key_schedule_context = createL test52_key_schedule_context_list

// generated: "72e6e12ae80c09c29603e161c49b0a216ab286509352756f74ad9ffed65e95d3"
inline_for_extraction
let size_test52_secret: size_nat = 32
let test52_secret_list : l:list uint8{List.Tot.length l == size_test52_secret} =
  [@inline_let]
  let l = [
    u8 0x72; u8 0xe6; u8 0xe1; u8 0x2a; u8 0xe8;
    u8 0x0c; u8 0x09; u8 0xc2; u8 0x96; u8 0x03;
    u8 0xe1; u8 0x61; u8 0xc4; u8 0x9b; u8 0x0a;
    u8 0x21; u8 0x6a; u8 0xb2; u8 0x86; u8 0x50;
    u8 0x93; u8 0x52; u8 0x75; u8 0x6f; u8 0x74;
    u8 0xad; u8 0x9f; u8 0xfe; u8 0xd6; u8 0x5e;
    u8 0x95; u8 0xd3;
  ] in
  assert_norm(List.Tot.length l == size_test52_secret);
  l
let test52_secret : lbytes size_test52_secret = createL test52_secret_list

// generated: "3c35492d5bd784ddb198f1e7cbc612a7963af6826b4e35f62bfa2641782c81f8"
inline_for_extraction
let size_test52_key: size_nat = 32
let test52_key_list : l:list uint8{List.Tot.length l == size_test52_key} =
  [@inline_let]
  let l = [
    u8 0x3c; u8 0x35; u8 0x49; u8 0x2d; u8 0x5b;
    u8 0xd7; u8 0x84; u8 0xdd; u8 0xb1; u8 0x98;
    u8 0xf1; u8 0xe7; u8 0xcb; u8 0xc6; u8 0x12;
    u8 0xa7; u8 0x96; u8 0x3a; u8 0xf6; u8 0x82;
    u8 0x6b; u8 0x4e; u8 0x35; u8 0xf6; u8 0x2b;
    u8 0xfa; u8 0x26; u8 0x41; u8 0x78; u8 0x2c;
    u8 0x81; u8 0xf8;
  ] in
  assert_norm(List.Tot.length l == size_test52_key);
  l
let test52_key : lbytes size_test52_key = createL test52_key_list

// generated: "2bd8a85af4454f6f4c8ac5d8"
inline_for_extraction
let size_test52_nonce: size_nat = 12
let test52_nonce_list : l:list uint8{List.Tot.length l == size_test52_nonce} =
  [@inline_let]
  let l = [
    u8 0x2b; u8 0xd8; u8 0xa8; u8 0x5a; u8 0xf4;
    u8 0x45; u8 0x4f; u8 0x6f; u8 0x4c; u8 0x8a;
    u8 0xc5; u8 0xd8;
  ] in
  assert_norm(List.Tot.length l == size_test52_nonce);
  l
let test52_nonce : lbytes size_test52_nonce = createL test52_nonce_list

// generated: "f9a8fbe6957b77e12dbac6b4de31984b28a9deba7ad35bc2fcedd3f13dee5c7a"
inline_for_extraction
let size_test52_exporterSecret: size_nat = 32
let test52_exporterSecret_list : l:list uint8{List.Tot.length l == size_test52_exporterSecret} =
  [@inline_let]
  let l = [
    u8 0xf9; u8 0xa8; u8 0xfb; u8 0xe6; u8 0x95;
    u8 0x7b; u8 0x77; u8 0xe1; u8 0x2d; u8 0xba;
    u8 0xc6; u8 0xb4; u8 0xde; u8 0x31; u8 0x98;
    u8 0x4b; u8 0x28; u8 0xa9; u8 0xde; u8 0xba;
    u8 0x7a; u8 0xd3; u8 0x5b; u8 0xc2; u8 0xfc;
    u8 0xed; u8 0xd3; u8 0xf1; u8 0x3d; u8 0xee;
    u8 0x5c; u8 0x7a;
  ] in
  assert_norm(List.Tot.length l == size_test52_exporterSecret);
  l
let test52_exporterSecret : lbytes size_test52_exporterSecret = createL test52_exporterSecret_list

// generated: "436f756e742d30"
inline_for_extraction
let size_test52_encryption0_aad: size_nat = 7
let test52_encryption0_aad_list : l:list uint8{List.Tot.length l == size_test52_encryption0_aad} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x75; u8 0x6e; u8 0x74;
    u8 0x2d; u8 0x30;
  ] in
  assert_norm(List.Tot.length l == size_test52_encryption0_aad);
  l
let test52_encryption0_aad : lbytes size_test52_encryption0_aad = createL test52_encryption0_aad_list

// generated: "b1c8d7f683b5b2bea347b54fd3b6782384e2fc6341b2d465c2a7a74c6ee9926fa341f2937ed19accb9d715cf0c"
inline_for_extraction
let size_test52_encryption0_ciphertext: size_nat = 45
let test52_encryption0_ciphertext_list : l:list uint8{List.Tot.length l == size_test52_encryption0_ciphertext} =
  [@inline_let]
  let l = [
    u8 0xb1; u8 0xc8; u8 0xd7; u8 0xf6; u8 0x83;
    u8 0xb5; u8 0xb2; u8 0xbe; u8 0xa3; u8 0x47;
    u8 0xb5; u8 0x4f; u8 0xd3; u8 0xb6; u8 0x78;
    u8 0x23; u8 0x84; u8 0xe2; u8 0xfc; u8 0x63;
    u8 0x41; u8 0xb2; u8 0xd4; u8 0x65; u8 0xc2;
    u8 0xa7; u8 0xa7; u8 0x4c; u8 0x6e; u8 0xe9;
    u8 0x92; u8 0x6f; u8 0xa3; u8 0x41; u8 0xf2;
    u8 0x93; u8 0x7e; u8 0xd1; u8 0x9a; u8 0xcc;
    u8 0xb9; u8 0xd7; u8 0x15; u8 0xcf; u8 0x0c;
  ] in
  assert_norm(List.Tot.length l == size_test52_encryption0_ciphertext);
  l
let test52_encryption0_ciphertext : lbytes size_test52_encryption0_ciphertext = createL test52_encryption0_ciphertext_list

// generated: "2bd8a85af4454f6f4c8ac5d8"
inline_for_extraction
let size_test52_encryption0_nonce: size_nat = 12
let test52_encryption0_nonce_list : l:list uint8{List.Tot.length l == size_test52_encryption0_nonce} =
  [@inline_let]
  let l = [
    u8 0x2b; u8 0xd8; u8 0xa8; u8 0x5a; u8 0xf4;
    u8 0x45; u8 0x4f; u8 0x6f; u8 0x4c; u8 0x8a;
    u8 0xc5; u8 0xd8;
  ] in
  assert_norm(List.Tot.length l == size_test52_encryption0_nonce);
  l
let test52_encryption0_nonce : lbytes size_test52_encryption0_nonce = createL test52_encryption0_nonce_list

// generated: "4265617574792069732074727574682c20747275746820626561757479"
inline_for_extraction
let size_test52_encryption0_plaintext: size_nat = 29
let test52_encryption0_plaintext_list : l:list uint8{List.Tot.length l == size_test52_encryption0_plaintext} =
  [@inline_let]
  let l = [
    u8 0x42; u8 0x65; u8 0x61; u8 0x75; u8 0x74;
    u8 0x79; u8 0x20; u8 0x69; u8 0x73; u8 0x20;
    u8 0x74; u8 0x72; u8 0x75; u8 0x74; u8 0x68;
    u8 0x2c; u8 0x20; u8 0x74; u8 0x72; u8 0x75;
    u8 0x74; u8 0x68; u8 0x20; u8 0x62; u8 0x65;
    u8 0x61; u8 0x75; u8 0x74; u8 0x79;
  ] in
  assert_norm(List.Tot.length l == size_test52_encryption0_plaintext);
  l
let test52_encryption0_plaintext : lbytes size_test52_encryption0_plaintext = createL test52_encryption0_plaintext_list

// generated: "436f756e742d31"
inline_for_extraction
let size_test52_encryption1_aad: size_nat = 7
let test52_encryption1_aad_list : l:list uint8{List.Tot.length l == size_test52_encryption1_aad} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x75; u8 0x6e; u8 0x74;
    u8 0x2d; u8 0x31;
  ] in
  assert_norm(List.Tot.length l == size_test52_encryption1_aad);
  l
let test52_encryption1_aad : lbytes size_test52_encryption1_aad = createL test52_encryption1_aad_list

// generated: "c053124615c9f5a3578929903dcd7b0c577020de5a1470b799b1e1486b51841ce22a9cf006370106fedc0a0fc9"
inline_for_extraction
let size_test52_encryption1_ciphertext: size_nat = 45
let test52_encryption1_ciphertext_list : l:list uint8{List.Tot.length l == size_test52_encryption1_ciphertext} =
  [@inline_let]
  let l = [
    u8 0xc0; u8 0x53; u8 0x12; u8 0x46; u8 0x15;
    u8 0xc9; u8 0xf5; u8 0xa3; u8 0x57; u8 0x89;
    u8 0x29; u8 0x90; u8 0x3d; u8 0xcd; u8 0x7b;
    u8 0x0c; u8 0x57; u8 0x70; u8 0x20; u8 0xde;
    u8 0x5a; u8 0x14; u8 0x70; u8 0xb7; u8 0x99;
    u8 0xb1; u8 0xe1; u8 0x48; u8 0x6b; u8 0x51;
    u8 0x84; u8 0x1c; u8 0xe2; u8 0x2a; u8 0x9c;
    u8 0xf0; u8 0x06; u8 0x37; u8 0x01; u8 0x06;
    u8 0xfe; u8 0xdc; u8 0x0a; u8 0x0f; u8 0xc9;
  ] in
  assert_norm(List.Tot.length l == size_test52_encryption1_ciphertext);
  l
let test52_encryption1_ciphertext : lbytes size_test52_encryption1_ciphertext = createL test52_encryption1_ciphertext_list

// generated: "2bd8a85af4454f6f4c8ac5d9"
inline_for_extraction
let size_test52_encryption1_nonce: size_nat = 12
let test52_encryption1_nonce_list : l:list uint8{List.Tot.length l == size_test52_encryption1_nonce} =
  [@inline_let]
  let l = [
    u8 0x2b; u8 0xd8; u8 0xa8; u8 0x5a; u8 0xf4;
    u8 0x45; u8 0x4f; u8 0x6f; u8 0x4c; u8 0x8a;
    u8 0xc5; u8 0xd9;
  ] in
  assert_norm(List.Tot.length l == size_test52_encryption1_nonce);
  l
let test52_encryption1_nonce : lbytes size_test52_encryption1_nonce = createL test52_encryption1_nonce_list

// generated: "4265617574792069732074727574682c20747275746820626561757479"
inline_for_extraction
let size_test52_encryption1_plaintext: size_nat = 29
let test52_encryption1_plaintext_list : l:list uint8{List.Tot.length l == size_test52_encryption1_plaintext} =
  [@inline_let]
  let l = [
    u8 0x42; u8 0x65; u8 0x61; u8 0x75; u8 0x74;
    u8 0x79; u8 0x20; u8 0x69; u8 0x73; u8 0x20;
    u8 0x74; u8 0x72; u8 0x75; u8 0x74; u8 0x68;
    u8 0x2c; u8 0x20; u8 0x74; u8 0x72; u8 0x75;
    u8 0x74; u8 0x68; u8 0x20; u8 0x62; u8 0x65;
    u8 0x61; u8 0x75; u8 0x74; u8 0x79;
  ] in
  assert_norm(List.Tot.length l == size_test52_encryption1_plaintext);
  l
let test52_encryption1_plaintext : lbytes size_test52_encryption1_plaintext = createL test52_encryption1_plaintext_list

// generated: "436f756e742d32"
inline_for_extraction
let size_test52_encryption2_aad: size_nat = 7
let test52_encryption2_aad_list : l:list uint8{List.Tot.length l == size_test52_encryption2_aad} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x75; u8 0x6e; u8 0x74;
    u8 0x2d; u8 0x32;
  ] in
  assert_norm(List.Tot.length l == size_test52_encryption2_aad);
  l
let test52_encryption2_aad : lbytes size_test52_encryption2_aad = createL test52_encryption2_aad_list

// generated: "d2c64bcac70d450e03f5e0445753c52dbf9422c71c2fc9603733057228f977f0555fa20cfa032dac36e1ce2ddc"
inline_for_extraction
let size_test52_encryption2_ciphertext: size_nat = 45
let test52_encryption2_ciphertext_list : l:list uint8{List.Tot.length l == size_test52_encryption2_ciphertext} =
  [@inline_let]
  let l = [
    u8 0xd2; u8 0xc6; u8 0x4b; u8 0xca; u8 0xc7;
    u8 0x0d; u8 0x45; u8 0x0e; u8 0x03; u8 0xf5;
    u8 0xe0; u8 0x44; u8 0x57; u8 0x53; u8 0xc5;
    u8 0x2d; u8 0xbf; u8 0x94; u8 0x22; u8 0xc7;
    u8 0x1c; u8 0x2f; u8 0xc9; u8 0x60; u8 0x37;
    u8 0x33; u8 0x05; u8 0x72; u8 0x28; u8 0xf9;
    u8 0x77; u8 0xf0; u8 0x55; u8 0x5f; u8 0xa2;
    u8 0x0c; u8 0xfa; u8 0x03; u8 0x2d; u8 0xac;
    u8 0x36; u8 0xe1; u8 0xce; u8 0x2d; u8 0xdc;
  ] in
  assert_norm(List.Tot.length l == size_test52_encryption2_ciphertext);
  l
let test52_encryption2_ciphertext : lbytes size_test52_encryption2_ciphertext = createL test52_encryption2_ciphertext_list

// generated: "2bd8a85af4454f6f4c8ac5da"
inline_for_extraction
let size_test52_encryption2_nonce: size_nat = 12
let test52_encryption2_nonce_list : l:list uint8{List.Tot.length l == size_test52_encryption2_nonce} =
  [@inline_let]
  let l = [
    u8 0x2b; u8 0xd8; u8 0xa8; u8 0x5a; u8 0xf4;
    u8 0x45; u8 0x4f; u8 0x6f; u8 0x4c; u8 0x8a;
    u8 0xc5; u8 0xda;
  ] in
  assert_norm(List.Tot.length l == size_test52_encryption2_nonce);
  l
let test52_encryption2_nonce : lbytes size_test52_encryption2_nonce = createL test52_encryption2_nonce_list

// generated: "4265617574792069732074727574682c20747275746820626561757479"
inline_for_extraction
let size_test52_encryption2_plaintext: size_nat = 29
let test52_encryption2_plaintext_list : l:list uint8{List.Tot.length l == size_test52_encryption2_plaintext} =
  [@inline_let]
  let l = [
    u8 0x42; u8 0x65; u8 0x61; u8 0x75; u8 0x74;
    u8 0x79; u8 0x20; u8 0x69; u8 0x73; u8 0x20;
    u8 0x74; u8 0x72; u8 0x75; u8 0x74; u8 0x68;
    u8 0x2c; u8 0x20; u8 0x74; u8 0x72; u8 0x75;
    u8 0x74; u8 0x68; u8 0x20; u8 0x62; u8 0x65;
    u8 0x61; u8 0x75; u8 0x74; u8 0x79;
  ] in
  assert_norm(List.Tot.length l == size_test52_encryption2_plaintext);
  l
let test52_encryption2_plaintext : lbytes size_test52_encryption2_plaintext = createL test52_encryption2_plaintext_list

// generated: "436f756e742d33"
inline_for_extraction
let size_test52_encryption3_aad: size_nat = 7
let test52_encryption3_aad_list : l:list uint8{List.Tot.length l == size_test52_encryption3_aad} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x75; u8 0x6e; u8 0x74;
    u8 0x2d; u8 0x33;
  ] in
  assert_norm(List.Tot.length l == size_test52_encryption3_aad);
  l
let test52_encryption3_aad : lbytes size_test52_encryption3_aad = createL test52_encryption3_aad_list

// generated: "437fbd5ffc92a7b8c13dc662f5c369ec706500aa25a89c68e6e5eb993119cbdcb503cc63310ef2e9506f17f483"
inline_for_extraction
let size_test52_encryption3_ciphertext: size_nat = 45
let test52_encryption3_ciphertext_list : l:list uint8{List.Tot.length l == size_test52_encryption3_ciphertext} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x7f; u8 0xbd; u8 0x5f; u8 0xfc;
    u8 0x92; u8 0xa7; u8 0xb8; u8 0xc1; u8 0x3d;
    u8 0xc6; u8 0x62; u8 0xf5; u8 0xc3; u8 0x69;
    u8 0xec; u8 0x70; u8 0x65; u8 0x00; u8 0xaa;
    u8 0x25; u8 0xa8; u8 0x9c; u8 0x68; u8 0xe6;
    u8 0xe5; u8 0xeb; u8 0x99; u8 0x31; u8 0x19;
    u8 0xcb; u8 0xdc; u8 0xb5; u8 0x03; u8 0xcc;
    u8 0x63; u8 0x31; u8 0x0e; u8 0xf2; u8 0xe9;
    u8 0x50; u8 0x6f; u8 0x17; u8 0xf4; u8 0x83;
  ] in
  assert_norm(List.Tot.length l == size_test52_encryption3_ciphertext);
  l
let test52_encryption3_ciphertext : lbytes size_test52_encryption3_ciphertext = createL test52_encryption3_ciphertext_list

// generated: "2bd8a85af4454f6f4c8ac5db"
inline_for_extraction
let size_test52_encryption3_nonce: size_nat = 12
let test52_encryption3_nonce_list : l:list uint8{List.Tot.length l == size_test52_encryption3_nonce} =
  [@inline_let]
  let l = [
    u8 0x2b; u8 0xd8; u8 0xa8; u8 0x5a; u8 0xf4;
    u8 0x45; u8 0x4f; u8 0x6f; u8 0x4c; u8 0x8a;
    u8 0xc5; u8 0xdb;
  ] in
  assert_norm(List.Tot.length l == size_test52_encryption3_nonce);
  l
let test52_encryption3_nonce : lbytes size_test52_encryption3_nonce = createL test52_encryption3_nonce_list

// generated: "4265617574792069732074727574682c20747275746820626561757479"
inline_for_extraction
let size_test52_encryption3_plaintext: size_nat = 29
let test52_encryption3_plaintext_list : l:list uint8{List.Tot.length l == size_test52_encryption3_plaintext} =
  [@inline_let]
  let l = [
    u8 0x42; u8 0x65; u8 0x61; u8 0x75; u8 0x74;
    u8 0x79; u8 0x20; u8 0x69; u8 0x73; u8 0x20;
    u8 0x74; u8 0x72; u8 0x75; u8 0x74; u8 0x68;
    u8 0x2c; u8 0x20; u8 0x74; u8 0x72; u8 0x75;
    u8 0x74; u8 0x68; u8 0x20; u8 0x62; u8 0x65;
    u8 0x61; u8 0x75; u8 0x74; u8 0x79;
  ] in
  assert_norm(List.Tot.length l == size_test52_encryption3_plaintext);
  l
let test52_encryption3_plaintext : lbytes size_test52_encryption3_plaintext = createL test52_encryption3_plaintext_list

// generated: "436f756e742d34"
inline_for_extraction
let size_test52_encryption4_aad: size_nat = 7
let test52_encryption4_aad_list : l:list uint8{List.Tot.length l == size_test52_encryption4_aad} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x75; u8 0x6e; u8 0x74;
    u8 0x2d; u8 0x34;
  ] in
  assert_norm(List.Tot.length l == size_test52_encryption4_aad);
  l
let test52_encryption4_aad : lbytes size_test52_encryption4_aad = createL test52_encryption4_aad_list

// generated: "31687b67582c75788d7ed4fca64d122e304f28b4c5f4d044da77a16398c9cd77c7516d1ac075b885395e875813"
inline_for_extraction
let size_test52_encryption4_ciphertext: size_nat = 45
let test52_encryption4_ciphertext_list : l:list uint8{List.Tot.length l == size_test52_encryption4_ciphertext} =
  [@inline_let]
  let l = [
    u8 0x31; u8 0x68; u8 0x7b; u8 0x67; u8 0x58;
    u8 0x2c; u8 0x75; u8 0x78; u8 0x8d; u8 0x7e;
    u8 0xd4; u8 0xfc; u8 0xa6; u8 0x4d; u8 0x12;
    u8 0x2e; u8 0x30; u8 0x4f; u8 0x28; u8 0xb4;
    u8 0xc5; u8 0xf4; u8 0xd0; u8 0x44; u8 0xda;
    u8 0x77; u8 0xa1; u8 0x63; u8 0x98; u8 0xc9;
    u8 0xcd; u8 0x77; u8 0xc7; u8 0x51; u8 0x6d;
    u8 0x1a; u8 0xc0; u8 0x75; u8 0xb8; u8 0x85;
    u8 0x39; u8 0x5e; u8 0x87; u8 0x58; u8 0x13;
  ] in
  assert_norm(List.Tot.length l == size_test52_encryption4_ciphertext);
  l
let test52_encryption4_ciphertext : lbytes size_test52_encryption4_ciphertext = createL test52_encryption4_ciphertext_list

// generated: "2bd8a85af4454f6f4c8ac5dc"
inline_for_extraction
let size_test52_encryption4_nonce: size_nat = 12
let test52_encryption4_nonce_list : l:list uint8{List.Tot.length l == size_test52_encryption4_nonce} =
  [@inline_let]
  let l = [
    u8 0x2b; u8 0xd8; u8 0xa8; u8 0x5a; u8 0xf4;
    u8 0x45; u8 0x4f; u8 0x6f; u8 0x4c; u8 0x8a;
    u8 0xc5; u8 0xdc;
  ] in
  assert_norm(List.Tot.length l == size_test52_encryption4_nonce);
  l
let test52_encryption4_nonce : lbytes size_test52_encryption4_nonce = createL test52_encryption4_nonce_list

// generated: "4265617574792069732074727574682c20747275746820626561757479"
inline_for_extraction
let size_test52_encryption4_plaintext: size_nat = 29
let test52_encryption4_plaintext_list : l:list uint8{List.Tot.length l == size_test52_encryption4_plaintext} =
  [@inline_let]
  let l = [
    u8 0x42; u8 0x65; u8 0x61; u8 0x75; u8 0x74;
    u8 0x79; u8 0x20; u8 0x69; u8 0x73; u8 0x20;
    u8 0x74; u8 0x72; u8 0x75; u8 0x74; u8 0x68;
    u8 0x2c; u8 0x20; u8 0x74; u8 0x72; u8 0x75;
    u8 0x74; u8 0x68; u8 0x20; u8 0x62; u8 0x65;
    u8 0x61; u8 0x75; u8 0x74; u8 0x79;
  ] in
  assert_norm(List.Tot.length l == size_test52_encryption4_plaintext);
  l
let test52_encryption4_plaintext : lbytes size_test52_encryption4_plaintext = createL test52_encryption4_plaintext_list

// generated: "436f756e742d35"
inline_for_extraction
let size_test52_encryption5_aad: size_nat = 7
let test52_encryption5_aad_list : l:list uint8{List.Tot.length l == size_test52_encryption5_aad} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x75; u8 0x6e; u8 0x74;
    u8 0x2d; u8 0x35;
  ] in
  assert_norm(List.Tot.length l == size_test52_encryption5_aad);
  l
let test52_encryption5_aad : lbytes size_test52_encryption5_aad = createL test52_encryption5_aad_list

// generated: "c21eb05d31d06c16bc874ddd7e548e742f541b0b9ed32aa79e7593ed5f678c2080f21166a2ba865c3304d5b7d5"
inline_for_extraction
let size_test52_encryption5_ciphertext: size_nat = 45
let test52_encryption5_ciphertext_list : l:list uint8{List.Tot.length l == size_test52_encryption5_ciphertext} =
  [@inline_let]
  let l = [
    u8 0xc2; u8 0x1e; u8 0xb0; u8 0x5d; u8 0x31;
    u8 0xd0; u8 0x6c; u8 0x16; u8 0xbc; u8 0x87;
    u8 0x4d; u8 0xdd; u8 0x7e; u8 0x54; u8 0x8e;
    u8 0x74; u8 0x2f; u8 0x54; u8 0x1b; u8 0x0b;
    u8 0x9e; u8 0xd3; u8 0x2a; u8 0xa7; u8 0x9e;
    u8 0x75; u8 0x93; u8 0xed; u8 0x5f; u8 0x67;
    u8 0x8c; u8 0x20; u8 0x80; u8 0xf2; u8 0x11;
    u8 0x66; u8 0xa2; u8 0xba; u8 0x86; u8 0x5c;
    u8 0x33; u8 0x04; u8 0xd5; u8 0xb7; u8 0xd5;
  ] in
  assert_norm(List.Tot.length l == size_test52_encryption5_ciphertext);
  l
let test52_encryption5_ciphertext : lbytes size_test52_encryption5_ciphertext = createL test52_encryption5_ciphertext_list

// generated: "2bd8a85af4454f6f4c8ac5dd"
inline_for_extraction
let size_test52_encryption5_nonce: size_nat = 12
let test52_encryption5_nonce_list : l:list uint8{List.Tot.length l == size_test52_encryption5_nonce} =
  [@inline_let]
  let l = [
    u8 0x2b; u8 0xd8; u8 0xa8; u8 0x5a; u8 0xf4;
    u8 0x45; u8 0x4f; u8 0x6f; u8 0x4c; u8 0x8a;
    u8 0xc5; u8 0xdd;
  ] in
  assert_norm(List.Tot.length l == size_test52_encryption5_nonce);
  l
let test52_encryption5_nonce : lbytes size_test52_encryption5_nonce = createL test52_encryption5_nonce_list

// generated: "4265617574792069732074727574682c20747275746820626561757479"
inline_for_extraction
let size_test52_encryption5_plaintext: size_nat = 29
let test52_encryption5_plaintext_list : l:list uint8{List.Tot.length l == size_test52_encryption5_plaintext} =
  [@inline_let]
  let l = [
    u8 0x42; u8 0x65; u8 0x61; u8 0x75; u8 0x74;
    u8 0x79; u8 0x20; u8 0x69; u8 0x73; u8 0x20;
    u8 0x74; u8 0x72; u8 0x75; u8 0x74; u8 0x68;
    u8 0x2c; u8 0x20; u8 0x74; u8 0x72; u8 0x75;
    u8 0x74; u8 0x68; u8 0x20; u8 0x62; u8 0x65;
    u8 0x61; u8 0x75; u8 0x74; u8 0x79;
  ] in
  assert_norm(List.Tot.length l == size_test52_encryption5_plaintext);
  l
let test52_encryption5_plaintext : lbytes size_test52_encryption5_plaintext = createL test52_encryption5_plaintext_list

// generated: "436f756e742d36"
inline_for_extraction
let size_test52_encryption6_aad: size_nat = 7
let test52_encryption6_aad_list : l:list uint8{List.Tot.length l == size_test52_encryption6_aad} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x75; u8 0x6e; u8 0x74;
    u8 0x2d; u8 0x36;
  ] in
  assert_norm(List.Tot.length l == size_test52_encryption6_aad);
  l
let test52_encryption6_aad : lbytes size_test52_encryption6_aad = createL test52_encryption6_aad_list

// generated: "edc476194d2aedeca2adec866419aa33243e8e6de7fc2c2d42f337816dabeaf4b6453f86b8d092065b293c9032"
inline_for_extraction
let size_test52_encryption6_ciphertext: size_nat = 45
let test52_encryption6_ciphertext_list : l:list uint8{List.Tot.length l == size_test52_encryption6_ciphertext} =
  [@inline_let]
  let l = [
    u8 0xed; u8 0xc4; u8 0x76; u8 0x19; u8 0x4d;
    u8 0x2a; u8 0xed; u8 0xec; u8 0xa2; u8 0xad;
    u8 0xec; u8 0x86; u8 0x64; u8 0x19; u8 0xaa;
    u8 0x33; u8 0x24; u8 0x3e; u8 0x8e; u8 0x6d;
    u8 0xe7; u8 0xfc; u8 0x2c; u8 0x2d; u8 0x42;
    u8 0xf3; u8 0x37; u8 0x81; u8 0x6d; u8 0xab;
    u8 0xea; u8 0xf4; u8 0xb6; u8 0x45; u8 0x3f;
    u8 0x86; u8 0xb8; u8 0xd0; u8 0x92; u8 0x06;
    u8 0x5b; u8 0x29; u8 0x3c; u8 0x90; u8 0x32;
  ] in
  assert_norm(List.Tot.length l == size_test52_encryption6_ciphertext);
  l
let test52_encryption6_ciphertext : lbytes size_test52_encryption6_ciphertext = createL test52_encryption6_ciphertext_list

// generated: "2bd8a85af4454f6f4c8ac5de"
inline_for_extraction
let size_test52_encryption6_nonce: size_nat = 12
let test52_encryption6_nonce_list : l:list uint8{List.Tot.length l == size_test52_encryption6_nonce} =
  [@inline_let]
  let l = [
    u8 0x2b; u8 0xd8; u8 0xa8; u8 0x5a; u8 0xf4;
    u8 0x45; u8 0x4f; u8 0x6f; u8 0x4c; u8 0x8a;
    u8 0xc5; u8 0xde;
  ] in
  assert_norm(List.Tot.length l == size_test52_encryption6_nonce);
  l
let test52_encryption6_nonce : lbytes size_test52_encryption6_nonce = createL test52_encryption6_nonce_list

// generated: "4265617574792069732074727574682c20747275746820626561757479"
inline_for_extraction
let size_test52_encryption6_plaintext: size_nat = 29
let test52_encryption6_plaintext_list : l:list uint8{List.Tot.length l == size_test52_encryption6_plaintext} =
  [@inline_let]
  let l = [
    u8 0x42; u8 0x65; u8 0x61; u8 0x75; u8 0x74;
    u8 0x79; u8 0x20; u8 0x69; u8 0x73; u8 0x20;
    u8 0x74; u8 0x72; u8 0x75; u8 0x74; u8 0x68;
    u8 0x2c; u8 0x20; u8 0x74; u8 0x72; u8 0x75;
    u8 0x74; u8 0x68; u8 0x20; u8 0x62; u8 0x65;
    u8 0x61; u8 0x75; u8 0x74; u8 0x79;
  ] in
  assert_norm(List.Tot.length l == size_test52_encryption6_plaintext);
  l
let test52_encryption6_plaintext : lbytes size_test52_encryption6_plaintext = createL test52_encryption6_plaintext_list

// generated: "436f756e742d37"
inline_for_extraction
let size_test52_encryption7_aad: size_nat = 7
let test52_encryption7_aad_list : l:list uint8{List.Tot.length l == size_test52_encryption7_aad} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x75; u8 0x6e; u8 0x74;
    u8 0x2d; u8 0x37;
  ] in
  assert_norm(List.Tot.length l == size_test52_encryption7_aad);
  l
let test52_encryption7_aad : lbytes size_test52_encryption7_aad = createL test52_encryption7_aad_list

// generated: "39b4165640f4e837fb10e838952580381461e3d05d734fa8a871cccaa28f27cb28e0c26ed2fbb4b77ebd9f6934"
inline_for_extraction
let size_test52_encryption7_ciphertext: size_nat = 45
let test52_encryption7_ciphertext_list : l:list uint8{List.Tot.length l == size_test52_encryption7_ciphertext} =
  [@inline_let]
  let l = [
    u8 0x39; u8 0xb4; u8 0x16; u8 0x56; u8 0x40;
    u8 0xf4; u8 0xe8; u8 0x37; u8 0xfb; u8 0x10;
    u8 0xe8; u8 0x38; u8 0x95; u8 0x25; u8 0x80;
    u8 0x38; u8 0x14; u8 0x61; u8 0xe3; u8 0xd0;
    u8 0x5d; u8 0x73; u8 0x4f; u8 0xa8; u8 0xa8;
    u8 0x71; u8 0xcc; u8 0xca; u8 0xa2; u8 0x8f;
    u8 0x27; u8 0xcb; u8 0x28; u8 0xe0; u8 0xc2;
    u8 0x6e; u8 0xd2; u8 0xfb; u8 0xb4; u8 0xb7;
    u8 0x7e; u8 0xbd; u8 0x9f; u8 0x69; u8 0x34;
  ] in
  assert_norm(List.Tot.length l == size_test52_encryption7_ciphertext);
  l
let test52_encryption7_ciphertext : lbytes size_test52_encryption7_ciphertext = createL test52_encryption7_ciphertext_list

// generated: "2bd8a85af4454f6f4c8ac5df"
inline_for_extraction
let size_test52_encryption7_nonce: size_nat = 12
let test52_encryption7_nonce_list : l:list uint8{List.Tot.length l == size_test52_encryption7_nonce} =
  [@inline_let]
  let l = [
    u8 0x2b; u8 0xd8; u8 0xa8; u8 0x5a; u8 0xf4;
    u8 0x45; u8 0x4f; u8 0x6f; u8 0x4c; u8 0x8a;
    u8 0xc5; u8 0xdf;
  ] in
  assert_norm(List.Tot.length l == size_test52_encryption7_nonce);
  l
let test52_encryption7_nonce : lbytes size_test52_encryption7_nonce = createL test52_encryption7_nonce_list

// generated: "4265617574792069732074727574682c20747275746820626561757479"
inline_for_extraction
let size_test52_encryption7_plaintext: size_nat = 29
let test52_encryption7_plaintext_list : l:list uint8{List.Tot.length l == size_test52_encryption7_plaintext} =
  [@inline_let]
  let l = [
    u8 0x42; u8 0x65; u8 0x61; u8 0x75; u8 0x74;
    u8 0x79; u8 0x20; u8 0x69; u8 0x73; u8 0x20;
    u8 0x74; u8 0x72; u8 0x75; u8 0x74; u8 0x68;
    u8 0x2c; u8 0x20; u8 0x74; u8 0x72; u8 0x75;
    u8 0x74; u8 0x68; u8 0x20; u8 0x62; u8 0x65;
    u8 0x61; u8 0x75; u8 0x74; u8 0x79;
  ] in
  assert_norm(List.Tot.length l == size_test52_encryption7_plaintext);
  l
let test52_encryption7_plaintext : lbytes size_test52_encryption7_plaintext = createL test52_encryption7_plaintext_list

// generated: "436f756e742d38"
inline_for_extraction
let size_test52_encryption8_aad: size_nat = 7
let test52_encryption8_aad_list : l:list uint8{List.Tot.length l == size_test52_encryption8_aad} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x75; u8 0x6e; u8 0x74;
    u8 0x2d; u8 0x38;
  ] in
  assert_norm(List.Tot.length l == size_test52_encryption8_aad);
  l
let test52_encryption8_aad : lbytes size_test52_encryption8_aad = createL test52_encryption8_aad_list

// generated: "08e54f0b625b33b36bd571ba206ea84f94ebc9846d851596ef29842bc8704fe6bd4fcc3cfdd3ca4e5b690b2395"
inline_for_extraction
let size_test52_encryption8_ciphertext: size_nat = 45
let test52_encryption8_ciphertext_list : l:list uint8{List.Tot.length l == size_test52_encryption8_ciphertext} =
  [@inline_let]
  let l = [
    u8 0x08; u8 0xe5; u8 0x4f; u8 0x0b; u8 0x62;
    u8 0x5b; u8 0x33; u8 0xb3; u8 0x6b; u8 0xd5;
    u8 0x71; u8 0xba; u8 0x20; u8 0x6e; u8 0xa8;
    u8 0x4f; u8 0x94; u8 0xeb; u8 0xc9; u8 0x84;
    u8 0x6d; u8 0x85; u8 0x15; u8 0x96; u8 0xef;
    u8 0x29; u8 0x84; u8 0x2b; u8 0xc8; u8 0x70;
    u8 0x4f; u8 0xe6; u8 0xbd; u8 0x4f; u8 0xcc;
    u8 0x3c; u8 0xfd; u8 0xd3; u8 0xca; u8 0x4e;
    u8 0x5b; u8 0x69; u8 0x0b; u8 0x23; u8 0x95;
  ] in
  assert_norm(List.Tot.length l == size_test52_encryption8_ciphertext);
  l
let test52_encryption8_ciphertext : lbytes size_test52_encryption8_ciphertext = createL test52_encryption8_ciphertext_list

// generated: "2bd8a85af4454f6f4c8ac5d0"
inline_for_extraction
let size_test52_encryption8_nonce: size_nat = 12
let test52_encryption8_nonce_list : l:list uint8{List.Tot.length l == size_test52_encryption8_nonce} =
  [@inline_let]
  let l = [
    u8 0x2b; u8 0xd8; u8 0xa8; u8 0x5a; u8 0xf4;
    u8 0x45; u8 0x4f; u8 0x6f; u8 0x4c; u8 0x8a;
    u8 0xc5; u8 0xd0;
  ] in
  assert_norm(List.Tot.length l == size_test52_encryption8_nonce);
  l
let test52_encryption8_nonce : lbytes size_test52_encryption8_nonce = createL test52_encryption8_nonce_list

// generated: "4265617574792069732074727574682c20747275746820626561757479"
inline_for_extraction
let size_test52_encryption8_plaintext: size_nat = 29
let test52_encryption8_plaintext_list : l:list uint8{List.Tot.length l == size_test52_encryption8_plaintext} =
  [@inline_let]
  let l = [
    u8 0x42; u8 0x65; u8 0x61; u8 0x75; u8 0x74;
    u8 0x79; u8 0x20; u8 0x69; u8 0x73; u8 0x20;
    u8 0x74; u8 0x72; u8 0x75; u8 0x74; u8 0x68;
    u8 0x2c; u8 0x20; u8 0x74; u8 0x72; u8 0x75;
    u8 0x74; u8 0x68; u8 0x20; u8 0x62; u8 0x65;
    u8 0x61; u8 0x75; u8 0x74; u8 0x79;
  ] in
  assert_norm(List.Tot.length l == size_test52_encryption8_plaintext);
  l
let test52_encryption8_plaintext : lbytes size_test52_encryption8_plaintext = createL test52_encryption8_plaintext_list

// generated: "436f756e742d39"
inline_for_extraction
let size_test52_encryption9_aad: size_nat = 7
let test52_encryption9_aad_list : l:list uint8{List.Tot.length l == size_test52_encryption9_aad} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x75; u8 0x6e; u8 0x74;
    u8 0x2d; u8 0x39;
  ] in
  assert_norm(List.Tot.length l == size_test52_encryption9_aad);
  l
let test52_encryption9_aad : lbytes size_test52_encryption9_aad = createL test52_encryption9_aad_list

// generated: "108daabe3ff1d28abedb0cfb4887ee0af0c365e803042464e895b9f750ef668213c593b081bd230f07ffcd358e"
inline_for_extraction
let size_test52_encryption9_ciphertext: size_nat = 45
let test52_encryption9_ciphertext_list : l:list uint8{List.Tot.length l == size_test52_encryption9_ciphertext} =
  [@inline_let]
  let l = [
    u8 0x10; u8 0x8d; u8 0xaa; u8 0xbe; u8 0x3f;
    u8 0xf1; u8 0xd2; u8 0x8a; u8 0xbe; u8 0xdb;
    u8 0x0c; u8 0xfb; u8 0x48; u8 0x87; u8 0xee;
    u8 0x0a; u8 0xf0; u8 0xc3; u8 0x65; u8 0xe8;
    u8 0x03; u8 0x04; u8 0x24; u8 0x64; u8 0xe8;
    u8 0x95; u8 0xb9; u8 0xf7; u8 0x50; u8 0xef;
    u8 0x66; u8 0x82; u8 0x13; u8 0xc5; u8 0x93;
    u8 0xb0; u8 0x81; u8 0xbd; u8 0x23; u8 0x0f;
    u8 0x07; u8 0xff; u8 0xcd; u8 0x35; u8 0x8e;
  ] in
  assert_norm(List.Tot.length l == size_test52_encryption9_ciphertext);
  l
let test52_encryption9_ciphertext : lbytes size_test52_encryption9_ciphertext = createL test52_encryption9_ciphertext_list

// generated: "2bd8a85af4454f6f4c8ac5d1"
inline_for_extraction
let size_test52_encryption9_nonce: size_nat = 12
let test52_encryption9_nonce_list : l:list uint8{List.Tot.length l == size_test52_encryption9_nonce} =
  [@inline_let]
  let l = [
    u8 0x2b; u8 0xd8; u8 0xa8; u8 0x5a; u8 0xf4;
    u8 0x45; u8 0x4f; u8 0x6f; u8 0x4c; u8 0x8a;
    u8 0xc5; u8 0xd1;
  ] in
  assert_norm(List.Tot.length l == size_test52_encryption9_nonce);
  l
let test52_encryption9_nonce : lbytes size_test52_encryption9_nonce = createL test52_encryption9_nonce_list

// generated: "4265617574792069732074727574682c20747275746820626561757479"
inline_for_extraction
let size_test52_encryption9_plaintext: size_nat = 29
let test52_encryption9_plaintext_list : l:list uint8{List.Tot.length l == size_test52_encryption9_plaintext} =
  [@inline_let]
  let l = [
    u8 0x42; u8 0x65; u8 0x61; u8 0x75; u8 0x74;
    u8 0x79; u8 0x20; u8 0x69; u8 0x73; u8 0x20;
    u8 0x74; u8 0x72; u8 0x75; u8 0x74; u8 0x68;
    u8 0x2c; u8 0x20; u8 0x74; u8 0x72; u8 0x75;
    u8 0x74; u8 0x68; u8 0x20; u8 0x62; u8 0x65;
    u8 0x61; u8 0x75; u8 0x74; u8 0x79;
  ] in
  assert_norm(List.Tot.length l == size_test52_encryption9_plaintext);
  l
let test52_encryption9_plaintext : lbytes size_test52_encryption9_plaintext = createL test52_encryption9_plaintext_list

// generated: "436f6e746578742d30"
inline_for_extraction
let size_test52_export0_exportContext: size_nat = 9
let test52_export0_exportContext_list : l:list uint8{List.Tot.length l == size_test52_export0_exportContext} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x6e; u8 0x74; u8 0x65;
    u8 0x78; u8 0x74; u8 0x2d; u8 0x30;
  ] in
  assert_norm(List.Tot.length l == size_test52_export0_exportContext);
  l
let test52_export0_exportContext : lbytes size_test52_export0_exportContext = createL test52_export0_exportContext_list

// generated: "0518be578fc3bf8da12a3075abd9637bc0922a0bb5aa83b7171bd3565e52b8f7"
inline_for_extraction
let size_test52_export0_exportValue: size_nat = 32
let test52_export0_exportValue_list : l:list uint8{List.Tot.length l == size_test52_export0_exportValue} =
  [@inline_let]
  let l = [
    u8 0x05; u8 0x18; u8 0xbe; u8 0x57; u8 0x8f;
    u8 0xc3; u8 0xbf; u8 0x8d; u8 0xa1; u8 0x2a;
    u8 0x30; u8 0x75; u8 0xab; u8 0xd9; u8 0x63;
    u8 0x7b; u8 0xc0; u8 0x92; u8 0x2a; u8 0x0b;
    u8 0xb5; u8 0xaa; u8 0x83; u8 0xb7; u8 0x17;
    u8 0x1b; u8 0xd3; u8 0x56; u8 0x5e; u8 0x52;
    u8 0xb8; u8 0xf7;
  ] in
  assert_norm(List.Tot.length l == size_test52_export0_exportValue);
  l
let test52_export0_exportValue : lbytes size_test52_export0_exportValue = createL test52_export0_exportValue_list

let test52_export0_len:size_nat = 32
// generated: "436f6e746578742d31"
inline_for_extraction
let size_test52_export1_exportContext: size_nat = 9
let test52_export1_exportContext_list : l:list uint8{List.Tot.length l == size_test52_export1_exportContext} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x6e; u8 0x74; u8 0x65;
    u8 0x78; u8 0x74; u8 0x2d; u8 0x31;
  ] in
  assert_norm(List.Tot.length l == size_test52_export1_exportContext);
  l
let test52_export1_exportContext : lbytes size_test52_export1_exportContext = createL test52_export1_exportContext_list

// generated: "3985389ceb67322e31bc94840bb7c1434ecb8bcb1e418804ede9c1e233bbd55c"
inline_for_extraction
let size_test52_export1_exportValue: size_nat = 32
let test52_export1_exportValue_list : l:list uint8{List.Tot.length l == size_test52_export1_exportValue} =
  [@inline_let]
  let l = [
    u8 0x39; u8 0x85; u8 0x38; u8 0x9c; u8 0xeb;
    u8 0x67; u8 0x32; u8 0x2e; u8 0x31; u8 0xbc;
    u8 0x94; u8 0x84; u8 0x0b; u8 0xb7; u8 0xc1;
    u8 0x43; u8 0x4e; u8 0xcb; u8 0x8b; u8 0xcb;
    u8 0x1e; u8 0x41; u8 0x88; u8 0x04; u8 0xed;
    u8 0xe9; u8 0xc1; u8 0xe2; u8 0x33; u8 0xbb;
    u8 0xd5; u8 0x5c;
  ] in
  assert_norm(List.Tot.length l == size_test52_export1_exportValue);
  l
let test52_export1_exportValue : lbytes size_test52_export1_exportValue = createL test52_export1_exportValue_list

let test52_export1_len:size_nat = 32
// generated: "436f6e746578742d32"
inline_for_extraction
let size_test52_export2_exportContext: size_nat = 9
let test52_export2_exportContext_list : l:list uint8{List.Tot.length l == size_test52_export2_exportContext} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x6e; u8 0x74; u8 0x65;
    u8 0x78; u8 0x74; u8 0x2d; u8 0x32;
  ] in
  assert_norm(List.Tot.length l == size_test52_export2_exportContext);
  l
let test52_export2_exportContext : lbytes size_test52_export2_exportContext = createL test52_export2_exportContext_list

// generated: "a1d3923150afe4e3221a2ba01d2c4735fe52cb132ff61f29b0b549bae76b854b"
inline_for_extraction
let size_test52_export2_exportValue: size_nat = 32
let test52_export2_exportValue_list : l:list uint8{List.Tot.length l == size_test52_export2_exportValue} =
  [@inline_let]
  let l = [
    u8 0xa1; u8 0xd3; u8 0x92; u8 0x31; u8 0x50;
    u8 0xaf; u8 0xe4; u8 0xe3; u8 0x22; u8 0x1a;
    u8 0x2b; u8 0xa0; u8 0x1d; u8 0x2c; u8 0x47;
    u8 0x35; u8 0xfe; u8 0x52; u8 0xcb; u8 0x13;
    u8 0x2f; u8 0xf6; u8 0x1f; u8 0x29; u8 0xb0;
    u8 0xb5; u8 0x49; u8 0xba; u8 0xe7; u8 0x6b;
    u8 0x85; u8 0x4b;
  ] in
  assert_norm(List.Tot.length l == size_test52_export2_exportValue);
  l
let test52_export2_exportValue : lbytes size_test52_export2_exportValue = createL test52_export2_exportValue_list

let test52_export2_len:size_nat = 32
// generated: "436f6e746578742d33"
inline_for_extraction
let size_test52_export3_exportContext: size_nat = 9
let test52_export3_exportContext_list : l:list uint8{List.Tot.length l == size_test52_export3_exportContext} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x6e; u8 0x74; u8 0x65;
    u8 0x78; u8 0x74; u8 0x2d; u8 0x33;
  ] in
  assert_norm(List.Tot.length l == size_test52_export3_exportContext);
  l
let test52_export3_exportContext : lbytes size_test52_export3_exportContext = createL test52_export3_exportContext_list

// generated: "246a4705e32a84cc60b7c58a2ee97ebf37bac3930cf4e42d8f3a1cf436e08da1"
inline_for_extraction
let size_test52_export3_exportValue: size_nat = 32
let test52_export3_exportValue_list : l:list uint8{List.Tot.length l == size_test52_export3_exportValue} =
  [@inline_let]
  let l = [
    u8 0x24; u8 0x6a; u8 0x47; u8 0x05; u8 0xe3;
    u8 0x2a; u8 0x84; u8 0xcc; u8 0x60; u8 0xb7;
    u8 0xc5; u8 0x8a; u8 0x2e; u8 0xe9; u8 0x7e;
    u8 0xbf; u8 0x37; u8 0xba; u8 0xc3; u8 0x93;
    u8 0x0c; u8 0xf4; u8 0xe4; u8 0x2d; u8 0x8f;
    u8 0x3a; u8 0x1c; u8 0xf4; u8 0x36; u8 0xe0;
    u8 0x8d; u8 0xa1;
  ] in
  assert_norm(List.Tot.length l == size_test52_export3_exportValue);
  l
let test52_export3_exportValue : lbytes size_test52_export3_exportValue = createL test52_export3_exportValue_list

let test52_export3_len:size_nat = 32
// generated: "436f6e746578742d34"
inline_for_extraction
let size_test52_export4_exportContext: size_nat = 9
let test52_export4_exportContext_list : l:list uint8{List.Tot.length l == size_test52_export4_exportContext} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x6e; u8 0x74; u8 0x65;
    u8 0x78; u8 0x74; u8 0x2d; u8 0x34;
  ] in
  assert_norm(List.Tot.length l == size_test52_export4_exportContext);
  l
let test52_export4_exportContext : lbytes size_test52_export4_exportContext = createL test52_export4_exportContext_list

// generated: "593444760d2738c871bae5bf5e5540a2abf390054be59f7148f957e0ac6626cf"
inline_for_extraction
let size_test52_export4_exportValue: size_nat = 32
let test52_export4_exportValue_list : l:list uint8{List.Tot.length l == size_test52_export4_exportValue} =
  [@inline_let]
  let l = [
    u8 0x59; u8 0x34; u8 0x44; u8 0x76; u8 0x0d;
    u8 0x27; u8 0x38; u8 0xc8; u8 0x71; u8 0xba;
    u8 0xe5; u8 0xbf; u8 0x5e; u8 0x55; u8 0x40;
    u8 0xa2; u8 0xab; u8 0xf3; u8 0x90; u8 0x05;
    u8 0x4b; u8 0xe5; u8 0x9f; u8 0x71; u8 0x48;
    u8 0xf9; u8 0x57; u8 0xe0; u8 0xac; u8 0x66;
    u8 0x26; u8 0xcf;
  ] in
  assert_norm(List.Tot.length l == size_test52_export4_exportValue);
  l
let test52_export4_exportValue : lbytes size_test52_export4_exportValue = createL test52_export4_exportValue_list

let test52_export4_len:size_nat = 32

let test52 () =
  let res = test_setupBase test52_ciphersuite test52_skEm test52_pkEm test52_skRm test52_pkRm test52_info test52_enc test52_zz test52_key_schedule_context test52_secret test52_key test52_nonce test52_exporterSecret test52_encryption0_nonce test52_encryption1_nonce in
  let seq0:HPKE.seq_aead_s test52_ciphersuite = 0 in
  let enc_res0 = test_encryption test52_ciphersuite test52_key test52_nonce test52_exporterSecret test52_encryption0_aad test52_encryption0_plaintext seq0 test52_encryption0_ciphertext test52_encryption0_nonce in

  assert_norm (1 < pow2 (8 * 12));
  let seq1:HPKE.seq_aead_s test52_ciphersuite = (seq0 + 1) in
  let enc_res1 = test_encryption test52_ciphersuite test52_key test52_nonce test52_exporterSecret test52_encryption1_aad test52_encryption1_plaintext seq1 test52_encryption1_ciphertext test52_encryption1_nonce in

  assert_norm (2 < pow2 (8 * 12));
  let seq2:HPKE.seq_aead_s test52_ciphersuite = (seq1 + 1) in
  let enc_res2 = test_encryption test52_ciphersuite test52_key test52_nonce test52_exporterSecret test52_encryption2_aad test52_encryption2_plaintext 2 test52_encryption2_ciphertext test52_encryption2_nonce in

  assert_norm (3 < pow2 (8 * 12));
  let seq3:HPKE.seq_aead_s test52_ciphersuite = (seq2 + 1) in
  let enc_res3 = test_encryption test52_ciphersuite test52_key test52_nonce test52_exporterSecret test52_encryption3_aad test52_encryption3_plaintext 3 test52_encryption3_ciphertext test52_encryption3_nonce in

  assert_norm (4 < pow2 (8 * 12));
  let seq4:HPKE.seq_aead_s test52_ciphersuite = (seq3 + 1) in
  let enc_res4 = test_encryption test52_ciphersuite test52_key test52_nonce test52_exporterSecret test52_encryption4_aad test52_encryption4_plaintext 4 test52_encryption4_ciphertext test52_encryption4_nonce in

  assert_norm (5 < pow2 (8 * 12));
  let seq5:HPKE.seq_aead_s test52_ciphersuite = (seq4 + 1) in
  let enc_res5 = test_encryption test52_ciphersuite test52_key test52_nonce test52_exporterSecret test52_encryption5_aad test52_encryption5_plaintext 5 test52_encryption5_ciphertext test52_encryption5_nonce in

  assert_norm (6 < pow2 (8 * 12));
  let seq6:HPKE.seq_aead_s test52_ciphersuite = (seq5 + 1) in
  let enc_res6 = test_encryption test52_ciphersuite test52_key test52_nonce test52_exporterSecret test52_encryption6_aad test52_encryption6_plaintext 6 test52_encryption6_ciphertext test52_encryption6_nonce in

  assert_norm (7 < pow2 (8 * 12));
  let seq7:HPKE.seq_aead_s test52_ciphersuite = (seq6 + 1) in
  let enc_res7 = test_encryption test52_ciphersuite test52_key test52_nonce test52_exporterSecret test52_encryption7_aad test52_encryption7_plaintext 7 test52_encryption7_ciphertext test52_encryption7_nonce in

  assert_norm (8 < pow2 (8 * 12));
  let seq8:HPKE.seq_aead_s test52_ciphersuite = (seq7 + 1) in
  let enc_res8 = test_encryption test52_ciphersuite test52_key test52_nonce test52_exporterSecret test52_encryption8_aad test52_encryption8_plaintext 8 test52_encryption8_ciphertext test52_encryption8_nonce in

  assert_norm (9 < pow2 (8 * 12));
  let seq9:HPKE.seq_aead_s test52_ciphersuite = (seq8 + 1) in
  let enc_res9 = test_encryption test52_ciphersuite test52_key test52_nonce test52_exporterSecret test52_encryption9_aad test52_encryption9_plaintext 9 test52_encryption9_ciphertext test52_encryption9_nonce in

  let exp_res0 = test_export test52_ciphersuite test52_key test52_nonce test52_exporterSecret test52_export0_exportContext test52_export0_len test52_export0_exportValue in

  let exp_res1 = test_export test52_ciphersuite test52_key test52_nonce test52_exporterSecret test52_export1_exportContext test52_export1_len test52_export1_exportValue in

  let exp_res2 = test_export test52_ciphersuite test52_key test52_nonce test52_exporterSecret test52_export2_exportContext test52_export2_len test52_export2_exportValue in

  let exp_res3 = test_export test52_ciphersuite test52_key test52_nonce test52_exporterSecret test52_export3_exportContext test52_export3_len test52_export3_exportValue in

  let exp_res4 = test_export test52_ciphersuite test52_key test52_nonce test52_exporterSecret test52_export4_exportContext test52_export4_len test52_export4_exportValue in

  enc_res0 && enc_res1 && enc_res2 && enc_res3 && enc_res4 && enc_res5 && enc_res6 && enc_res7 && enc_res8 && enc_res9 && res && exp_res0 && exp_res1 && exp_res2 && exp_res3 && exp_res4


// Skipped unsupported test case 53

// Skipped unsupported test case 54

// Skipped unsupported test case 55

let test56_mode: HPKE.mode = HPKE.Base
let test56_ciphersuite = DH.DH_P256, Hash.SHA2_256, AEAD.CHACHA20_POLY1305, Hash.SHA2_256

// generated: "4f6465206f6e2061204772656369616e2055726e"
inline_for_extraction
let size_test56_info: size_nat = 20
let test56_info_list : l:list uint8{List.Tot.length l == size_test56_info} =
  [@inline_let]
  let l = [
    u8 0x4f; u8 0x64; u8 0x65; u8 0x20; u8 0x6f;
    u8 0x6e; u8 0x20; u8 0x61; u8 0x20; u8 0x47;
    u8 0x72; u8 0x65; u8 0x63; u8 0x69; u8 0x61;
    u8 0x6e; u8 0x20; u8 0x55; u8 0x72; u8 0x6e;
  ] in
  assert_norm(List.Tot.length l == size_test56_info);
  l
let test56_info : lbytes size_test56_info = createL test56_info_list

// generated: "dc305ba2d1d92f55dea304b35e83489df2ae1ea9b685aeb0b2aaa67ff67890c1"
inline_for_extraction
let size_test56_skRm: size_nat = 32
let test56_skRm_list : l:list uint8{List.Tot.length l == size_test56_skRm} =
  [@inline_let]
  let l = [
    u8 0xdc; u8 0x30; u8 0x5b; u8 0xa2; u8 0xd1;
    u8 0xd9; u8 0x2f; u8 0x55; u8 0xde; u8 0xa3;
    u8 0x04; u8 0xb3; u8 0x5e; u8 0x83; u8 0x48;
    u8 0x9d; u8 0xf2; u8 0xae; u8 0x1e; u8 0xa9;
    u8 0xb6; u8 0x85; u8 0xae; u8 0xb0; u8 0xb2;
    u8 0xaa; u8 0xa6; u8 0x7f; u8 0xf6; u8 0x78;
    u8 0x90; u8 0xc1;
  ] in
  assert_norm(List.Tot.length l == size_test56_skRm);
  l
let test56_skRm : lbytes size_test56_skRm = createL test56_skRm_list

// generated: "80f5e611f760ba7765467ade0a1ad5d80a424614161d29c38ba80fe21622d462"
inline_for_extraction
let size_test56_skEm: size_nat = 32
let test56_skEm_list : l:list uint8{List.Tot.length l == size_test56_skEm} =
  [@inline_let]
  let l = [
    u8 0x80; u8 0xf5; u8 0xe6; u8 0x11; u8 0xf7;
    u8 0x60; u8 0xba; u8 0x77; u8 0x65; u8 0x46;
    u8 0x7a; u8 0xde; u8 0x0a; u8 0x1a; u8 0xd5;
    u8 0xd8; u8 0x0a; u8 0x42; u8 0x46; u8 0x14;
    u8 0x16; u8 0x1d; u8 0x29; u8 0xc3; u8 0x8b;
    u8 0xa8; u8 0x0f; u8 0xe2; u8 0x16; u8 0x22;
    u8 0xd4; u8 0x62;
  ] in
  assert_norm(List.Tot.length l == size_test56_skEm);
  l
let test56_skEm : lbytes size_test56_skEm = createL test56_skEm_list

// generated: "047c2e345c1cdcb0a9687ad458628787c87f7f1b7426526e155bdb46908e3550111847a45b5ba1ae5b69758c7b0980587cfba7e58efca5da62cd1700064323337d"
inline_for_extraction
let size_test56_pkRm: size_nat = 65
let test56_pkRm_list : l:list uint8{List.Tot.length l == size_test56_pkRm} =
  [@inline_let]
  let l = [
    u8 0x04; u8 0x7c; u8 0x2e; u8 0x34; u8 0x5c;
    u8 0x1c; u8 0xdc; u8 0xb0; u8 0xa9; u8 0x68;
    u8 0x7a; u8 0xd4; u8 0x58; u8 0x62; u8 0x87;
    u8 0x87; u8 0xc8; u8 0x7f; u8 0x7f; u8 0x1b;
    u8 0x74; u8 0x26; u8 0x52; u8 0x6e; u8 0x15;
    u8 0x5b; u8 0xdb; u8 0x46; u8 0x90; u8 0x8e;
    u8 0x35; u8 0x50; u8 0x11; u8 0x18; u8 0x47;
    u8 0xa4; u8 0x5b; u8 0x5b; u8 0xa1; u8 0xae;
    u8 0x5b; u8 0x69; u8 0x75; u8 0x8c; u8 0x7b;
    u8 0x09; u8 0x80; u8 0x58; u8 0x7c; u8 0xfb;
    u8 0xa7; u8 0xe5; u8 0x8e; u8 0xfc; u8 0xa5;
    u8 0xda; u8 0x62; u8 0xcd; u8 0x17; u8 0x00;
    u8 0x06; u8 0x43; u8 0x23; u8 0x33; u8 0x7d;
  ] in
  assert_norm(List.Tot.length l == size_test56_pkRm);
  l
let test56_pkRm : lbytes size_test56_pkRm = createL test56_pkRm_list

// generated: "047fe4b0f8f3019b10d53aaf04a58652c906779be4c59aa944decb5ef6610b74f322083645a8eb2bcf9d1e77731d8758abd0b8cb057610d5daa9a2674f3ad50a4d"
inline_for_extraction
let size_test56_pkEm: size_nat = 65
let test56_pkEm_list : l:list uint8{List.Tot.length l == size_test56_pkEm} =
  [@inline_let]
  let l = [
    u8 0x04; u8 0x7f; u8 0xe4; u8 0xb0; u8 0xf8;
    u8 0xf3; u8 0x01; u8 0x9b; u8 0x10; u8 0xd5;
    u8 0x3a; u8 0xaf; u8 0x04; u8 0xa5; u8 0x86;
    u8 0x52; u8 0xc9; u8 0x06; u8 0x77; u8 0x9b;
    u8 0xe4; u8 0xc5; u8 0x9a; u8 0xa9; u8 0x44;
    u8 0xde; u8 0xcb; u8 0x5e; u8 0xf6; u8 0x61;
    u8 0x0b; u8 0x74; u8 0xf3; u8 0x22; u8 0x08;
    u8 0x36; u8 0x45; u8 0xa8; u8 0xeb; u8 0x2b;
    u8 0xcf; u8 0x9d; u8 0x1e; u8 0x77; u8 0x73;
    u8 0x1d; u8 0x87; u8 0x58; u8 0xab; u8 0xd0;
    u8 0xb8; u8 0xcb; u8 0x05; u8 0x76; u8 0x10;
    u8 0xd5; u8 0xda; u8 0xa9; u8 0xa2; u8 0x67;
    u8 0x4f; u8 0x3a; u8 0xd5; u8 0x0a; u8 0x4d;
  ] in
  assert_norm(List.Tot.length l == size_test56_pkEm);
  l
let test56_pkEm : lbytes size_test56_pkEm = createL test56_pkEm_list

// generated: "047fe4b0f8f3019b10d53aaf04a58652c906779be4c59aa944decb5ef6610b74f322083645a8eb2bcf9d1e77731d8758abd0b8cb057610d5daa9a2674f3ad50a4d"
inline_for_extraction
let size_test56_enc: size_nat = 65
let test56_enc_list : l:list uint8{List.Tot.length l == size_test56_enc} =
  [@inline_let]
  let l = [
    u8 0x04; u8 0x7f; u8 0xe4; u8 0xb0; u8 0xf8;
    u8 0xf3; u8 0x01; u8 0x9b; u8 0x10; u8 0xd5;
    u8 0x3a; u8 0xaf; u8 0x04; u8 0xa5; u8 0x86;
    u8 0x52; u8 0xc9; u8 0x06; u8 0x77; u8 0x9b;
    u8 0xe4; u8 0xc5; u8 0x9a; u8 0xa9; u8 0x44;
    u8 0xde; u8 0xcb; u8 0x5e; u8 0xf6; u8 0x61;
    u8 0x0b; u8 0x74; u8 0xf3; u8 0x22; u8 0x08;
    u8 0x36; u8 0x45; u8 0xa8; u8 0xeb; u8 0x2b;
    u8 0xcf; u8 0x9d; u8 0x1e; u8 0x77; u8 0x73;
    u8 0x1d; u8 0x87; u8 0x58; u8 0xab; u8 0xd0;
    u8 0xb8; u8 0xcb; u8 0x05; u8 0x76; u8 0x10;
    u8 0xd5; u8 0xda; u8 0xa9; u8 0xa2; u8 0x67;
    u8 0x4f; u8 0x3a; u8 0xd5; u8 0x0a; u8 0x4d;
  ] in
  assert_norm(List.Tot.length l == size_test56_enc);
  l
let test56_enc : lbytes size_test56_enc = createL test56_enc_list

// generated: "713a150d402fcfbc3cf1ab22b286b711fb9a5300f73390e2e69498fdfba0bc11"
inline_for_extraction
let size_test56_zz: size_nat = 32
let test56_zz_list : l:list uint8{List.Tot.length l == size_test56_zz} =
  [@inline_let]
  let l = [
    u8 0x71; u8 0x3a; u8 0x15; u8 0x0d; u8 0x40;
    u8 0x2f; u8 0xcf; u8 0xbc; u8 0x3c; u8 0xf1;
    u8 0xab; u8 0x22; u8 0xb2; u8 0x86; u8 0xb7;
    u8 0x11; u8 0xfb; u8 0x9a; u8 0x53; u8 0x00;
    u8 0xf7; u8 0x33; u8 0x90; u8 0xe2; u8 0xe6;
    u8 0x94; u8 0x98; u8 0xfd; u8 0xfb; u8 0xa0;
    u8 0xbc; u8 0x11;
  ] in
  assert_norm(List.Tot.length l == size_test56_zz);
  l
let test56_zz : lbytes size_test56_zz = createL test56_zz_list

// generated: "001000010003005d0f5548cb13d7eba5320ae0e21b1ee274aac7ea1cce02570cf993d1b2456449debcca602075cf6f8ef506613a82e1c73727e2c912d0c49f16cd56fc524af4ce"
inline_for_extraction
let size_test56_key_schedule_context: size_nat = 71
let test56_key_schedule_context_list : l:list uint8{List.Tot.length l == size_test56_key_schedule_context} =
  [@inline_let]
  let l = [
    u8 0x00; u8 0x10; u8 0x00; u8 0x01; u8 0x00;
    u8 0x03; u8 0x00; u8 0x5d; u8 0x0f; u8 0x55;
    u8 0x48; u8 0xcb; u8 0x13; u8 0xd7; u8 0xeb;
    u8 0xa5; u8 0x32; u8 0x0a; u8 0xe0; u8 0xe2;
    u8 0x1b; u8 0x1e; u8 0xe2; u8 0x74; u8 0xaa;
    u8 0xc7; u8 0xea; u8 0x1c; u8 0xce; u8 0x02;
    u8 0x57; u8 0x0c; u8 0xf9; u8 0x93; u8 0xd1;
    u8 0xb2; u8 0x45; u8 0x64; u8 0x49; u8 0xde;
    u8 0xbc; u8 0xca; u8 0x60; u8 0x20; u8 0x75;
    u8 0xcf; u8 0x6f; u8 0x8e; u8 0xf5; u8 0x06;
    u8 0x61; u8 0x3a; u8 0x82; u8 0xe1; u8 0xc7;
    u8 0x37; u8 0x27; u8 0xe2; u8 0xc9; u8 0x12;
    u8 0xd0; u8 0xc4; u8 0x9f; u8 0x16; u8 0xcd;
    u8 0x56; u8 0xfc; u8 0x52; u8 0x4a; u8 0xf4;
    u8 0xce;
  ] in
  assert_norm(List.Tot.length l == size_test56_key_schedule_context);
  l
let test56_key_schedule_context : lbytes size_test56_key_schedule_context = createL test56_key_schedule_context_list

// generated: "51274351f31e7238b6d2e7df11173b30db82bf4d1bcba24e3f6c990f3727c11f"
inline_for_extraction
let size_test56_secret: size_nat = 32
let test56_secret_list : l:list uint8{List.Tot.length l == size_test56_secret} =
  [@inline_let]
  let l = [
    u8 0x51; u8 0x27; u8 0x43; u8 0x51; u8 0xf3;
    u8 0x1e; u8 0x72; u8 0x38; u8 0xb6; u8 0xd2;
    u8 0xe7; u8 0xdf; u8 0x11; u8 0x17; u8 0x3b;
    u8 0x30; u8 0xdb; u8 0x82; u8 0xbf; u8 0x4d;
    u8 0x1b; u8 0xcb; u8 0xa2; u8 0x4e; u8 0x3f;
    u8 0x6c; u8 0x99; u8 0x0f; u8 0x37; u8 0x27;
    u8 0xc1; u8 0x1f;
  ] in
  assert_norm(List.Tot.length l == size_test56_secret);
  l
let test56_secret : lbytes size_test56_secret = createL test56_secret_list

// generated: "3271dbf2eb5642ba1c6fe3b6b865a6664dbe251bde04790d598771ce606fcdfd"
inline_for_extraction
let size_test56_key: size_nat = 32
let test56_key_list : l:list uint8{List.Tot.length l == size_test56_key} =
  [@inline_let]
  let l = [
    u8 0x32; u8 0x71; u8 0xdb; u8 0xf2; u8 0xeb;
    u8 0x56; u8 0x42; u8 0xba; u8 0x1c; u8 0x6f;
    u8 0xe3; u8 0xb6; u8 0xb8; u8 0x65; u8 0xa6;
    u8 0x66; u8 0x4d; u8 0xbe; u8 0x25; u8 0x1b;
    u8 0xde; u8 0x04; u8 0x79; u8 0x0d; u8 0x59;
    u8 0x87; u8 0x71; u8 0xce; u8 0x60; u8 0x6f;
    u8 0xcd; u8 0xfd;
  ] in
  assert_norm(List.Tot.length l == size_test56_key);
  l
let test56_key : lbytes size_test56_key = createL test56_key_list

// generated: "130169feea85d66f1860f9d4"
inline_for_extraction
let size_test56_nonce: size_nat = 12
let test56_nonce_list : l:list uint8{List.Tot.length l == size_test56_nonce} =
  [@inline_let]
  let l = [
    u8 0x13; u8 0x01; u8 0x69; u8 0xfe; u8 0xea;
    u8 0x85; u8 0xd6; u8 0x6f; u8 0x18; u8 0x60;
    u8 0xf9; u8 0xd4;
  ] in
  assert_norm(List.Tot.length l == size_test56_nonce);
  l
let test56_nonce : lbytes size_test56_nonce = createL test56_nonce_list

// generated: "1b4b266331ea8ff3705e393c2fb00c056d942533f6ffa035f13cba653705dabe"
inline_for_extraction
let size_test56_exporterSecret: size_nat = 32
let test56_exporterSecret_list : l:list uint8{List.Tot.length l == size_test56_exporterSecret} =
  [@inline_let]
  let l = [
    u8 0x1b; u8 0x4b; u8 0x26; u8 0x63; u8 0x31;
    u8 0xea; u8 0x8f; u8 0xf3; u8 0x70; u8 0x5e;
    u8 0x39; u8 0x3c; u8 0x2f; u8 0xb0; u8 0x0c;
    u8 0x05; u8 0x6d; u8 0x94; u8 0x25; u8 0x33;
    u8 0xf6; u8 0xff; u8 0xa0; u8 0x35; u8 0xf1;
    u8 0x3c; u8 0xba; u8 0x65; u8 0x37; u8 0x05;
    u8 0xda; u8 0xbe;
  ] in
  assert_norm(List.Tot.length l == size_test56_exporterSecret);
  l
let test56_exporterSecret : lbytes size_test56_exporterSecret = createL test56_exporterSecret_list

// generated: "436f756e742d30"
inline_for_extraction
let size_test56_encryption0_aad: size_nat = 7
let test56_encryption0_aad_list : l:list uint8{List.Tot.length l == size_test56_encryption0_aad} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x75; u8 0x6e; u8 0x74;
    u8 0x2d; u8 0x30;
  ] in
  assert_norm(List.Tot.length l == size_test56_encryption0_aad);
  l
let test56_encryption0_aad : lbytes size_test56_encryption0_aad = createL test56_encryption0_aad_list

// generated: "5a99248972a831e47695180471d6d225283ba237549d1fc36cb86f12b1c9eeb93b2596f32714c57c0b38aab56a"
inline_for_extraction
let size_test56_encryption0_ciphertext: size_nat = 45
let test56_encryption0_ciphertext_list : l:list uint8{List.Tot.length l == size_test56_encryption0_ciphertext} =
  [@inline_let]
  let l = [
    u8 0x5a; u8 0x99; u8 0x24; u8 0x89; u8 0x72;
    u8 0xa8; u8 0x31; u8 0xe4; u8 0x76; u8 0x95;
    u8 0x18; u8 0x04; u8 0x71; u8 0xd6; u8 0xd2;
    u8 0x25; u8 0x28; u8 0x3b; u8 0xa2; u8 0x37;
    u8 0x54; u8 0x9d; u8 0x1f; u8 0xc3; u8 0x6c;
    u8 0xb8; u8 0x6f; u8 0x12; u8 0xb1; u8 0xc9;
    u8 0xee; u8 0xb9; u8 0x3b; u8 0x25; u8 0x96;
    u8 0xf3; u8 0x27; u8 0x14; u8 0xc5; u8 0x7c;
    u8 0x0b; u8 0x38; u8 0xaa; u8 0xb5; u8 0x6a;
  ] in
  assert_norm(List.Tot.length l == size_test56_encryption0_ciphertext);
  l
let test56_encryption0_ciphertext : lbytes size_test56_encryption0_ciphertext = createL test56_encryption0_ciphertext_list

// generated: "130169feea85d66f1860f9d4"
inline_for_extraction
let size_test56_encryption0_nonce: size_nat = 12
let test56_encryption0_nonce_list : l:list uint8{List.Tot.length l == size_test56_encryption0_nonce} =
  [@inline_let]
  let l = [
    u8 0x13; u8 0x01; u8 0x69; u8 0xfe; u8 0xea;
    u8 0x85; u8 0xd6; u8 0x6f; u8 0x18; u8 0x60;
    u8 0xf9; u8 0xd4;
  ] in
  assert_norm(List.Tot.length l == size_test56_encryption0_nonce);
  l
let test56_encryption0_nonce : lbytes size_test56_encryption0_nonce = createL test56_encryption0_nonce_list

// generated: "4265617574792069732074727574682c20747275746820626561757479"
inline_for_extraction
let size_test56_encryption0_plaintext: size_nat = 29
let test56_encryption0_plaintext_list : l:list uint8{List.Tot.length l == size_test56_encryption0_plaintext} =
  [@inline_let]
  let l = [
    u8 0x42; u8 0x65; u8 0x61; u8 0x75; u8 0x74;
    u8 0x79; u8 0x20; u8 0x69; u8 0x73; u8 0x20;
    u8 0x74; u8 0x72; u8 0x75; u8 0x74; u8 0x68;
    u8 0x2c; u8 0x20; u8 0x74; u8 0x72; u8 0x75;
    u8 0x74; u8 0x68; u8 0x20; u8 0x62; u8 0x65;
    u8 0x61; u8 0x75; u8 0x74; u8 0x79;
  ] in
  assert_norm(List.Tot.length l == size_test56_encryption0_plaintext);
  l
let test56_encryption0_plaintext : lbytes size_test56_encryption0_plaintext = createL test56_encryption0_plaintext_list

// generated: "436f756e742d31"
inline_for_extraction
let size_test56_encryption1_aad: size_nat = 7
let test56_encryption1_aad_list : l:list uint8{List.Tot.length l == size_test56_encryption1_aad} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x75; u8 0x6e; u8 0x74;
    u8 0x2d; u8 0x31;
  ] in
  assert_norm(List.Tot.length l == size_test56_encryption1_aad);
  l
let test56_encryption1_aad : lbytes size_test56_encryption1_aad = createL test56_encryption1_aad_list

// generated: "b836e13a009fa9a7cc3aea41315c39df726ba7472e90a0ed444762f4580ec54639f465eaa05a6a6e59708e5527"
inline_for_extraction
let size_test56_encryption1_ciphertext: size_nat = 45
let test56_encryption1_ciphertext_list : l:list uint8{List.Tot.length l == size_test56_encryption1_ciphertext} =
  [@inline_let]
  let l = [
    u8 0xb8; u8 0x36; u8 0xe1; u8 0x3a; u8 0x00;
    u8 0x9f; u8 0xa9; u8 0xa7; u8 0xcc; u8 0x3a;
    u8 0xea; u8 0x41; u8 0x31; u8 0x5c; u8 0x39;
    u8 0xdf; u8 0x72; u8 0x6b; u8 0xa7; u8 0x47;
    u8 0x2e; u8 0x90; u8 0xa0; u8 0xed; u8 0x44;
    u8 0x47; u8 0x62; u8 0xf4; u8 0x58; u8 0x0e;
    u8 0xc5; u8 0x46; u8 0x39; u8 0xf4; u8 0x65;
    u8 0xea; u8 0xa0; u8 0x5a; u8 0x6a; u8 0x6e;
    u8 0x59; u8 0x70; u8 0x8e; u8 0x55; u8 0x27;
  ] in
  assert_norm(List.Tot.length l == size_test56_encryption1_ciphertext);
  l
let test56_encryption1_ciphertext : lbytes size_test56_encryption1_ciphertext = createL test56_encryption1_ciphertext_list

// generated: "130169feea85d66f1860f9d5"
inline_for_extraction
let size_test56_encryption1_nonce: size_nat = 12
let test56_encryption1_nonce_list : l:list uint8{List.Tot.length l == size_test56_encryption1_nonce} =
  [@inline_let]
  let l = [
    u8 0x13; u8 0x01; u8 0x69; u8 0xfe; u8 0xea;
    u8 0x85; u8 0xd6; u8 0x6f; u8 0x18; u8 0x60;
    u8 0xf9; u8 0xd5;
  ] in
  assert_norm(List.Tot.length l == size_test56_encryption1_nonce);
  l
let test56_encryption1_nonce : lbytes size_test56_encryption1_nonce = createL test56_encryption1_nonce_list

// generated: "4265617574792069732074727574682c20747275746820626561757479"
inline_for_extraction
let size_test56_encryption1_plaintext: size_nat = 29
let test56_encryption1_plaintext_list : l:list uint8{List.Tot.length l == size_test56_encryption1_plaintext} =
  [@inline_let]
  let l = [
    u8 0x42; u8 0x65; u8 0x61; u8 0x75; u8 0x74;
    u8 0x79; u8 0x20; u8 0x69; u8 0x73; u8 0x20;
    u8 0x74; u8 0x72; u8 0x75; u8 0x74; u8 0x68;
    u8 0x2c; u8 0x20; u8 0x74; u8 0x72; u8 0x75;
    u8 0x74; u8 0x68; u8 0x20; u8 0x62; u8 0x65;
    u8 0x61; u8 0x75; u8 0x74; u8 0x79;
  ] in
  assert_norm(List.Tot.length l == size_test56_encryption1_plaintext);
  l
let test56_encryption1_plaintext : lbytes size_test56_encryption1_plaintext = createL test56_encryption1_plaintext_list

// generated: "436f756e742d32"
inline_for_extraction
let size_test56_encryption2_aad: size_nat = 7
let test56_encryption2_aad_list : l:list uint8{List.Tot.length l == size_test56_encryption2_aad} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x75; u8 0x6e; u8 0x74;
    u8 0x2d; u8 0x32;
  ] in
  assert_norm(List.Tot.length l == size_test56_encryption2_aad);
  l
let test56_encryption2_aad : lbytes size_test56_encryption2_aad = createL test56_encryption2_aad_list

// generated: "e960bfba2eae931f8f01d67f3de70c2f0456127fa96fd5035b0fc1201190077d4b66975cb98899ccb5f9d839f0"
inline_for_extraction
let size_test56_encryption2_ciphertext: size_nat = 45
let test56_encryption2_ciphertext_list : l:list uint8{List.Tot.length l == size_test56_encryption2_ciphertext} =
  [@inline_let]
  let l = [
    u8 0xe9; u8 0x60; u8 0xbf; u8 0xba; u8 0x2e;
    u8 0xae; u8 0x93; u8 0x1f; u8 0x8f; u8 0x01;
    u8 0xd6; u8 0x7f; u8 0x3d; u8 0xe7; u8 0x0c;
    u8 0x2f; u8 0x04; u8 0x56; u8 0x12; u8 0x7f;
    u8 0xa9; u8 0x6f; u8 0xd5; u8 0x03; u8 0x5b;
    u8 0x0f; u8 0xc1; u8 0x20; u8 0x11; u8 0x90;
    u8 0x07; u8 0x7d; u8 0x4b; u8 0x66; u8 0x97;
    u8 0x5c; u8 0xb9; u8 0x88; u8 0x99; u8 0xcc;
    u8 0xb5; u8 0xf9; u8 0xd8; u8 0x39; u8 0xf0;
  ] in
  assert_norm(List.Tot.length l == size_test56_encryption2_ciphertext);
  l
let test56_encryption2_ciphertext : lbytes size_test56_encryption2_ciphertext = createL test56_encryption2_ciphertext_list

// generated: "130169feea85d66f1860f9d6"
inline_for_extraction
let size_test56_encryption2_nonce: size_nat = 12
let test56_encryption2_nonce_list : l:list uint8{List.Tot.length l == size_test56_encryption2_nonce} =
  [@inline_let]
  let l = [
    u8 0x13; u8 0x01; u8 0x69; u8 0xfe; u8 0xea;
    u8 0x85; u8 0xd6; u8 0x6f; u8 0x18; u8 0x60;
    u8 0xf9; u8 0xd6;
  ] in
  assert_norm(List.Tot.length l == size_test56_encryption2_nonce);
  l
let test56_encryption2_nonce : lbytes size_test56_encryption2_nonce = createL test56_encryption2_nonce_list

// generated: "4265617574792069732074727574682c20747275746820626561757479"
inline_for_extraction
let size_test56_encryption2_plaintext: size_nat = 29
let test56_encryption2_plaintext_list : l:list uint8{List.Tot.length l == size_test56_encryption2_plaintext} =
  [@inline_let]
  let l = [
    u8 0x42; u8 0x65; u8 0x61; u8 0x75; u8 0x74;
    u8 0x79; u8 0x20; u8 0x69; u8 0x73; u8 0x20;
    u8 0x74; u8 0x72; u8 0x75; u8 0x74; u8 0x68;
    u8 0x2c; u8 0x20; u8 0x74; u8 0x72; u8 0x75;
    u8 0x74; u8 0x68; u8 0x20; u8 0x62; u8 0x65;
    u8 0x61; u8 0x75; u8 0x74; u8 0x79;
  ] in
  assert_norm(List.Tot.length l == size_test56_encryption2_plaintext);
  l
let test56_encryption2_plaintext : lbytes size_test56_encryption2_plaintext = createL test56_encryption2_plaintext_list

// generated: "436f756e742d33"
inline_for_extraction
let size_test56_encryption3_aad: size_nat = 7
let test56_encryption3_aad_list : l:list uint8{List.Tot.length l == size_test56_encryption3_aad} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x75; u8 0x6e; u8 0x74;
    u8 0x2d; u8 0x33;
  ] in
  assert_norm(List.Tot.length l == size_test56_encryption3_aad);
  l
let test56_encryption3_aad : lbytes size_test56_encryption3_aad = createL test56_encryption3_aad_list

// generated: "2295656a348417ce94fa9ffb3a02d284557fbd8c4d9559271afdfc06e53b4a6c330d9f3ec914c80fe3ae4b671a"
inline_for_extraction
let size_test56_encryption3_ciphertext: size_nat = 45
let test56_encryption3_ciphertext_list : l:list uint8{List.Tot.length l == size_test56_encryption3_ciphertext} =
  [@inline_let]
  let l = [
    u8 0x22; u8 0x95; u8 0x65; u8 0x6a; u8 0x34;
    u8 0x84; u8 0x17; u8 0xce; u8 0x94; u8 0xfa;
    u8 0x9f; u8 0xfb; u8 0x3a; u8 0x02; u8 0xd2;
    u8 0x84; u8 0x55; u8 0x7f; u8 0xbd; u8 0x8c;
    u8 0x4d; u8 0x95; u8 0x59; u8 0x27; u8 0x1a;
    u8 0xfd; u8 0xfc; u8 0x06; u8 0xe5; u8 0x3b;
    u8 0x4a; u8 0x6c; u8 0x33; u8 0x0d; u8 0x9f;
    u8 0x3e; u8 0xc9; u8 0x14; u8 0xc8; u8 0x0f;
    u8 0xe3; u8 0xae; u8 0x4b; u8 0x67; u8 0x1a;
  ] in
  assert_norm(List.Tot.length l == size_test56_encryption3_ciphertext);
  l
let test56_encryption3_ciphertext : lbytes size_test56_encryption3_ciphertext = createL test56_encryption3_ciphertext_list

// generated: "130169feea85d66f1860f9d7"
inline_for_extraction
let size_test56_encryption3_nonce: size_nat = 12
let test56_encryption3_nonce_list : l:list uint8{List.Tot.length l == size_test56_encryption3_nonce} =
  [@inline_let]
  let l = [
    u8 0x13; u8 0x01; u8 0x69; u8 0xfe; u8 0xea;
    u8 0x85; u8 0xd6; u8 0x6f; u8 0x18; u8 0x60;
    u8 0xf9; u8 0xd7;
  ] in
  assert_norm(List.Tot.length l == size_test56_encryption3_nonce);
  l
let test56_encryption3_nonce : lbytes size_test56_encryption3_nonce = createL test56_encryption3_nonce_list

// generated: "4265617574792069732074727574682c20747275746820626561757479"
inline_for_extraction
let size_test56_encryption3_plaintext: size_nat = 29
let test56_encryption3_plaintext_list : l:list uint8{List.Tot.length l == size_test56_encryption3_plaintext} =
  [@inline_let]
  let l = [
    u8 0x42; u8 0x65; u8 0x61; u8 0x75; u8 0x74;
    u8 0x79; u8 0x20; u8 0x69; u8 0x73; u8 0x20;
    u8 0x74; u8 0x72; u8 0x75; u8 0x74; u8 0x68;
    u8 0x2c; u8 0x20; u8 0x74; u8 0x72; u8 0x75;
    u8 0x74; u8 0x68; u8 0x20; u8 0x62; u8 0x65;
    u8 0x61; u8 0x75; u8 0x74; u8 0x79;
  ] in
  assert_norm(List.Tot.length l == size_test56_encryption3_plaintext);
  l
let test56_encryption3_plaintext : lbytes size_test56_encryption3_plaintext = createL test56_encryption3_plaintext_list

// generated: "436f756e742d34"
inline_for_extraction
let size_test56_encryption4_aad: size_nat = 7
let test56_encryption4_aad_list : l:list uint8{List.Tot.length l == size_test56_encryption4_aad} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x75; u8 0x6e; u8 0x74;
    u8 0x2d; u8 0x34;
  ] in
  assert_norm(List.Tot.length l == size_test56_encryption4_aad);
  l
let test56_encryption4_aad : lbytes size_test56_encryption4_aad = createL test56_encryption4_aad_list

// generated: "21dab5f61e5173e1fea448b8c86a6dc509e4ddf78b08fe2a69c369876b8ad21e0fd20680c9ab69816af3383526"
inline_for_extraction
let size_test56_encryption4_ciphertext: size_nat = 45
let test56_encryption4_ciphertext_list : l:list uint8{List.Tot.length l == size_test56_encryption4_ciphertext} =
  [@inline_let]
  let l = [
    u8 0x21; u8 0xda; u8 0xb5; u8 0xf6; u8 0x1e;
    u8 0x51; u8 0x73; u8 0xe1; u8 0xfe; u8 0xa4;
    u8 0x48; u8 0xb8; u8 0xc8; u8 0x6a; u8 0x6d;
    u8 0xc5; u8 0x09; u8 0xe4; u8 0xdd; u8 0xf7;
    u8 0x8b; u8 0x08; u8 0xfe; u8 0x2a; u8 0x69;
    u8 0xc3; u8 0x69; u8 0x87; u8 0x6b; u8 0x8a;
    u8 0xd2; u8 0x1e; u8 0x0f; u8 0xd2; u8 0x06;
    u8 0x80; u8 0xc9; u8 0xab; u8 0x69; u8 0x81;
    u8 0x6a; u8 0xf3; u8 0x38; u8 0x35; u8 0x26;
  ] in
  assert_norm(List.Tot.length l == size_test56_encryption4_ciphertext);
  l
let test56_encryption4_ciphertext : lbytes size_test56_encryption4_ciphertext = createL test56_encryption4_ciphertext_list

// generated: "130169feea85d66f1860f9d0"
inline_for_extraction
let size_test56_encryption4_nonce: size_nat = 12
let test56_encryption4_nonce_list : l:list uint8{List.Tot.length l == size_test56_encryption4_nonce} =
  [@inline_let]
  let l = [
    u8 0x13; u8 0x01; u8 0x69; u8 0xfe; u8 0xea;
    u8 0x85; u8 0xd6; u8 0x6f; u8 0x18; u8 0x60;
    u8 0xf9; u8 0xd0;
  ] in
  assert_norm(List.Tot.length l == size_test56_encryption4_nonce);
  l
let test56_encryption4_nonce : lbytes size_test56_encryption4_nonce = createL test56_encryption4_nonce_list

// generated: "4265617574792069732074727574682c20747275746820626561757479"
inline_for_extraction
let size_test56_encryption4_plaintext: size_nat = 29
let test56_encryption4_plaintext_list : l:list uint8{List.Tot.length l == size_test56_encryption4_plaintext} =
  [@inline_let]
  let l = [
    u8 0x42; u8 0x65; u8 0x61; u8 0x75; u8 0x74;
    u8 0x79; u8 0x20; u8 0x69; u8 0x73; u8 0x20;
    u8 0x74; u8 0x72; u8 0x75; u8 0x74; u8 0x68;
    u8 0x2c; u8 0x20; u8 0x74; u8 0x72; u8 0x75;
    u8 0x74; u8 0x68; u8 0x20; u8 0x62; u8 0x65;
    u8 0x61; u8 0x75; u8 0x74; u8 0x79;
  ] in
  assert_norm(List.Tot.length l == size_test56_encryption4_plaintext);
  l
let test56_encryption4_plaintext : lbytes size_test56_encryption4_plaintext = createL test56_encryption4_plaintext_list

// generated: "436f756e742d35"
inline_for_extraction
let size_test56_encryption5_aad: size_nat = 7
let test56_encryption5_aad_list : l:list uint8{List.Tot.length l == size_test56_encryption5_aad} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x75; u8 0x6e; u8 0x74;
    u8 0x2d; u8 0x35;
  ] in
  assert_norm(List.Tot.length l == size_test56_encryption5_aad);
  l
let test56_encryption5_aad : lbytes size_test56_encryption5_aad = createL test56_encryption5_aad_list

// generated: "5a7437352b22b98d820973eba6d4f2face390a7a83b8ccfe697890f9ef012bd27a9ebf3ef1256986b44d782ef3"
inline_for_extraction
let size_test56_encryption5_ciphertext: size_nat = 45
let test56_encryption5_ciphertext_list : l:list uint8{List.Tot.length l == size_test56_encryption5_ciphertext} =
  [@inline_let]
  let l = [
    u8 0x5a; u8 0x74; u8 0x37; u8 0x35; u8 0x2b;
    u8 0x22; u8 0xb9; u8 0x8d; u8 0x82; u8 0x09;
    u8 0x73; u8 0xeb; u8 0xa6; u8 0xd4; u8 0xf2;
    u8 0xfa; u8 0xce; u8 0x39; u8 0x0a; u8 0x7a;
    u8 0x83; u8 0xb8; u8 0xcc; u8 0xfe; u8 0x69;
    u8 0x78; u8 0x90; u8 0xf9; u8 0xef; u8 0x01;
    u8 0x2b; u8 0xd2; u8 0x7a; u8 0x9e; u8 0xbf;
    u8 0x3e; u8 0xf1; u8 0x25; u8 0x69; u8 0x86;
    u8 0xb4; u8 0x4d; u8 0x78; u8 0x2e; u8 0xf3;
  ] in
  assert_norm(List.Tot.length l == size_test56_encryption5_ciphertext);
  l
let test56_encryption5_ciphertext : lbytes size_test56_encryption5_ciphertext = createL test56_encryption5_ciphertext_list

// generated: "130169feea85d66f1860f9d1"
inline_for_extraction
let size_test56_encryption5_nonce: size_nat = 12
let test56_encryption5_nonce_list : l:list uint8{List.Tot.length l == size_test56_encryption5_nonce} =
  [@inline_let]
  let l = [
    u8 0x13; u8 0x01; u8 0x69; u8 0xfe; u8 0xea;
    u8 0x85; u8 0xd6; u8 0x6f; u8 0x18; u8 0x60;
    u8 0xf9; u8 0xd1;
  ] in
  assert_norm(List.Tot.length l == size_test56_encryption5_nonce);
  l
let test56_encryption5_nonce : lbytes size_test56_encryption5_nonce = createL test56_encryption5_nonce_list

// generated: "4265617574792069732074727574682c20747275746820626561757479"
inline_for_extraction
let size_test56_encryption5_plaintext: size_nat = 29
let test56_encryption5_plaintext_list : l:list uint8{List.Tot.length l == size_test56_encryption5_plaintext} =
  [@inline_let]
  let l = [
    u8 0x42; u8 0x65; u8 0x61; u8 0x75; u8 0x74;
    u8 0x79; u8 0x20; u8 0x69; u8 0x73; u8 0x20;
    u8 0x74; u8 0x72; u8 0x75; u8 0x74; u8 0x68;
    u8 0x2c; u8 0x20; u8 0x74; u8 0x72; u8 0x75;
    u8 0x74; u8 0x68; u8 0x20; u8 0x62; u8 0x65;
    u8 0x61; u8 0x75; u8 0x74; u8 0x79;
  ] in
  assert_norm(List.Tot.length l == size_test56_encryption5_plaintext);
  l
let test56_encryption5_plaintext : lbytes size_test56_encryption5_plaintext = createL test56_encryption5_plaintext_list

// generated: "436f756e742d36"
inline_for_extraction
let size_test56_encryption6_aad: size_nat = 7
let test56_encryption6_aad_list : l:list uint8{List.Tot.length l == size_test56_encryption6_aad} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x75; u8 0x6e; u8 0x74;
    u8 0x2d; u8 0x36;
  ] in
  assert_norm(List.Tot.length l == size_test56_encryption6_aad);
  l
let test56_encryption6_aad : lbytes size_test56_encryption6_aad = createL test56_encryption6_aad_list

// generated: "8df4d99aaac5d0cff9fa73a16794ab4d3a633c51c073d3c1be970854967be3410aaafbb3e5d010b3b01d48ecf1"
inline_for_extraction
let size_test56_encryption6_ciphertext: size_nat = 45
let test56_encryption6_ciphertext_list : l:list uint8{List.Tot.length l == size_test56_encryption6_ciphertext} =
  [@inline_let]
  let l = [
    u8 0x8d; u8 0xf4; u8 0xd9; u8 0x9a; u8 0xaa;
    u8 0xc5; u8 0xd0; u8 0xcf; u8 0xf9; u8 0xfa;
    u8 0x73; u8 0xa1; u8 0x67; u8 0x94; u8 0xab;
    u8 0x4d; u8 0x3a; u8 0x63; u8 0x3c; u8 0x51;
    u8 0xc0; u8 0x73; u8 0xd3; u8 0xc1; u8 0xbe;
    u8 0x97; u8 0x08; u8 0x54; u8 0x96; u8 0x7b;
    u8 0xe3; u8 0x41; u8 0x0a; u8 0xaa; u8 0xfb;
    u8 0xb3; u8 0xe5; u8 0xd0; u8 0x10; u8 0xb3;
    u8 0xb0; u8 0x1d; u8 0x48; u8 0xec; u8 0xf1;
  ] in
  assert_norm(List.Tot.length l == size_test56_encryption6_ciphertext);
  l
let test56_encryption6_ciphertext : lbytes size_test56_encryption6_ciphertext = createL test56_encryption6_ciphertext_list

// generated: "130169feea85d66f1860f9d2"
inline_for_extraction
let size_test56_encryption6_nonce: size_nat = 12
let test56_encryption6_nonce_list : l:list uint8{List.Tot.length l == size_test56_encryption6_nonce} =
  [@inline_let]
  let l = [
    u8 0x13; u8 0x01; u8 0x69; u8 0xfe; u8 0xea;
    u8 0x85; u8 0xd6; u8 0x6f; u8 0x18; u8 0x60;
    u8 0xf9; u8 0xd2;
  ] in
  assert_norm(List.Tot.length l == size_test56_encryption6_nonce);
  l
let test56_encryption6_nonce : lbytes size_test56_encryption6_nonce = createL test56_encryption6_nonce_list

// generated: "4265617574792069732074727574682c20747275746820626561757479"
inline_for_extraction
let size_test56_encryption6_plaintext: size_nat = 29
let test56_encryption6_plaintext_list : l:list uint8{List.Tot.length l == size_test56_encryption6_plaintext} =
  [@inline_let]
  let l = [
    u8 0x42; u8 0x65; u8 0x61; u8 0x75; u8 0x74;
    u8 0x79; u8 0x20; u8 0x69; u8 0x73; u8 0x20;
    u8 0x74; u8 0x72; u8 0x75; u8 0x74; u8 0x68;
    u8 0x2c; u8 0x20; u8 0x74; u8 0x72; u8 0x75;
    u8 0x74; u8 0x68; u8 0x20; u8 0x62; u8 0x65;
    u8 0x61; u8 0x75; u8 0x74; u8 0x79;
  ] in
  assert_norm(List.Tot.length l == size_test56_encryption6_plaintext);
  l
let test56_encryption6_plaintext : lbytes size_test56_encryption6_plaintext = createL test56_encryption6_plaintext_list

// generated: "436f756e742d37"
inline_for_extraction
let size_test56_encryption7_aad: size_nat = 7
let test56_encryption7_aad_list : l:list uint8{List.Tot.length l == size_test56_encryption7_aad} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x75; u8 0x6e; u8 0x74;
    u8 0x2d; u8 0x37;
  ] in
  assert_norm(List.Tot.length l == size_test56_encryption7_aad);
  l
let test56_encryption7_aad : lbytes size_test56_encryption7_aad = createL test56_encryption7_aad_list

// generated: "eb272a575fcbbc225f1020277e601074de609c19d675d30538466c93e1eaf90b6334db691630d9619be734152f"
inline_for_extraction
let size_test56_encryption7_ciphertext: size_nat = 45
let test56_encryption7_ciphertext_list : l:list uint8{List.Tot.length l == size_test56_encryption7_ciphertext} =
  [@inline_let]
  let l = [
    u8 0xeb; u8 0x27; u8 0x2a; u8 0x57; u8 0x5f;
    u8 0xcb; u8 0xbc; u8 0x22; u8 0x5f; u8 0x10;
    u8 0x20; u8 0x27; u8 0x7e; u8 0x60; u8 0x10;
    u8 0x74; u8 0xde; u8 0x60; u8 0x9c; u8 0x19;
    u8 0xd6; u8 0x75; u8 0xd3; u8 0x05; u8 0x38;
    u8 0x46; u8 0x6c; u8 0x93; u8 0xe1; u8 0xea;
    u8 0xf9; u8 0x0b; u8 0x63; u8 0x34; u8 0xdb;
    u8 0x69; u8 0x16; u8 0x30; u8 0xd9; u8 0x61;
    u8 0x9b; u8 0xe7; u8 0x34; u8 0x15; u8 0x2f;
  ] in
  assert_norm(List.Tot.length l == size_test56_encryption7_ciphertext);
  l
let test56_encryption7_ciphertext : lbytes size_test56_encryption7_ciphertext = createL test56_encryption7_ciphertext_list

// generated: "130169feea85d66f1860f9d3"
inline_for_extraction
let size_test56_encryption7_nonce: size_nat = 12
let test56_encryption7_nonce_list : l:list uint8{List.Tot.length l == size_test56_encryption7_nonce} =
  [@inline_let]
  let l = [
    u8 0x13; u8 0x01; u8 0x69; u8 0xfe; u8 0xea;
    u8 0x85; u8 0xd6; u8 0x6f; u8 0x18; u8 0x60;
    u8 0xf9; u8 0xd3;
  ] in
  assert_norm(List.Tot.length l == size_test56_encryption7_nonce);
  l
let test56_encryption7_nonce : lbytes size_test56_encryption7_nonce = createL test56_encryption7_nonce_list

// generated: "4265617574792069732074727574682c20747275746820626561757479"
inline_for_extraction
let size_test56_encryption7_plaintext: size_nat = 29
let test56_encryption7_plaintext_list : l:list uint8{List.Tot.length l == size_test56_encryption7_plaintext} =
  [@inline_let]
  let l = [
    u8 0x42; u8 0x65; u8 0x61; u8 0x75; u8 0x74;
    u8 0x79; u8 0x20; u8 0x69; u8 0x73; u8 0x20;
    u8 0x74; u8 0x72; u8 0x75; u8 0x74; u8 0x68;
    u8 0x2c; u8 0x20; u8 0x74; u8 0x72; u8 0x75;
    u8 0x74; u8 0x68; u8 0x20; u8 0x62; u8 0x65;
    u8 0x61; u8 0x75; u8 0x74; u8 0x79;
  ] in
  assert_norm(List.Tot.length l == size_test56_encryption7_plaintext);
  l
let test56_encryption7_plaintext : lbytes size_test56_encryption7_plaintext = createL test56_encryption7_plaintext_list

// generated: "436f756e742d38"
inline_for_extraction
let size_test56_encryption8_aad: size_nat = 7
let test56_encryption8_aad_list : l:list uint8{List.Tot.length l == size_test56_encryption8_aad} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x75; u8 0x6e; u8 0x74;
    u8 0x2d; u8 0x38;
  ] in
  assert_norm(List.Tot.length l == size_test56_encryption8_aad);
  l
let test56_encryption8_aad : lbytes size_test56_encryption8_aad = createL test56_encryption8_aad_list

// generated: "63fb40f7716b96b34552c64eb18fa023c2c3a9105dfa6f426785b0455fb6804934f372535242a2860eca883ad4"
inline_for_extraction
let size_test56_encryption8_ciphertext: size_nat = 45
let test56_encryption8_ciphertext_list : l:list uint8{List.Tot.length l == size_test56_encryption8_ciphertext} =
  [@inline_let]
  let l = [
    u8 0x63; u8 0xfb; u8 0x40; u8 0xf7; u8 0x71;
    u8 0x6b; u8 0x96; u8 0xb3; u8 0x45; u8 0x52;
    u8 0xc6; u8 0x4e; u8 0xb1; u8 0x8f; u8 0xa0;
    u8 0x23; u8 0xc2; u8 0xc3; u8 0xa9; u8 0x10;
    u8 0x5d; u8 0xfa; u8 0x6f; u8 0x42; u8 0x67;
    u8 0x85; u8 0xb0; u8 0x45; u8 0x5f; u8 0xb6;
    u8 0x80; u8 0x49; u8 0x34; u8 0xf3; u8 0x72;
    u8 0x53; u8 0x52; u8 0x42; u8 0xa2; u8 0x86;
    u8 0x0e; u8 0xca; u8 0x88; u8 0x3a; u8 0xd4;
  ] in
  assert_norm(List.Tot.length l == size_test56_encryption8_ciphertext);
  l
let test56_encryption8_ciphertext : lbytes size_test56_encryption8_ciphertext = createL test56_encryption8_ciphertext_list

// generated: "130169feea85d66f1860f9dc"
inline_for_extraction
let size_test56_encryption8_nonce: size_nat = 12
let test56_encryption8_nonce_list : l:list uint8{List.Tot.length l == size_test56_encryption8_nonce} =
  [@inline_let]
  let l = [
    u8 0x13; u8 0x01; u8 0x69; u8 0xfe; u8 0xea;
    u8 0x85; u8 0xd6; u8 0x6f; u8 0x18; u8 0x60;
    u8 0xf9; u8 0xdc;
  ] in
  assert_norm(List.Tot.length l == size_test56_encryption8_nonce);
  l
let test56_encryption8_nonce : lbytes size_test56_encryption8_nonce = createL test56_encryption8_nonce_list

// generated: "4265617574792069732074727574682c20747275746820626561757479"
inline_for_extraction
let size_test56_encryption8_plaintext: size_nat = 29
let test56_encryption8_plaintext_list : l:list uint8{List.Tot.length l == size_test56_encryption8_plaintext} =
  [@inline_let]
  let l = [
    u8 0x42; u8 0x65; u8 0x61; u8 0x75; u8 0x74;
    u8 0x79; u8 0x20; u8 0x69; u8 0x73; u8 0x20;
    u8 0x74; u8 0x72; u8 0x75; u8 0x74; u8 0x68;
    u8 0x2c; u8 0x20; u8 0x74; u8 0x72; u8 0x75;
    u8 0x74; u8 0x68; u8 0x20; u8 0x62; u8 0x65;
    u8 0x61; u8 0x75; u8 0x74; u8 0x79;
  ] in
  assert_norm(List.Tot.length l == size_test56_encryption8_plaintext);
  l
let test56_encryption8_plaintext : lbytes size_test56_encryption8_plaintext = createL test56_encryption8_plaintext_list

// generated: "436f756e742d39"
inline_for_extraction
let size_test56_encryption9_aad: size_nat = 7
let test56_encryption9_aad_list : l:list uint8{List.Tot.length l == size_test56_encryption9_aad} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x75; u8 0x6e; u8 0x74;
    u8 0x2d; u8 0x39;
  ] in
  assert_norm(List.Tot.length l == size_test56_encryption9_aad);
  l
let test56_encryption9_aad : lbytes size_test56_encryption9_aad = createL test56_encryption9_aad_list

// generated: "6bb97900e17f27d9c2e59075140c09e01ea2787e3ee1b3241b1ab3b8eb03125fa5fc09500cac2a008308621c3a"
inline_for_extraction
let size_test56_encryption9_ciphertext: size_nat = 45
let test56_encryption9_ciphertext_list : l:list uint8{List.Tot.length l == size_test56_encryption9_ciphertext} =
  [@inline_let]
  let l = [
    u8 0x6b; u8 0xb9; u8 0x79; u8 0x00; u8 0xe1;
    u8 0x7f; u8 0x27; u8 0xd9; u8 0xc2; u8 0xe5;
    u8 0x90; u8 0x75; u8 0x14; u8 0x0c; u8 0x09;
    u8 0xe0; u8 0x1e; u8 0xa2; u8 0x78; u8 0x7e;
    u8 0x3e; u8 0xe1; u8 0xb3; u8 0x24; u8 0x1b;
    u8 0x1a; u8 0xb3; u8 0xb8; u8 0xeb; u8 0x03;
    u8 0x12; u8 0x5f; u8 0xa5; u8 0xfc; u8 0x09;
    u8 0x50; u8 0x0c; u8 0xac; u8 0x2a; u8 0x00;
    u8 0x83; u8 0x08; u8 0x62; u8 0x1c; u8 0x3a;
  ] in
  assert_norm(List.Tot.length l == size_test56_encryption9_ciphertext);
  l
let test56_encryption9_ciphertext : lbytes size_test56_encryption9_ciphertext = createL test56_encryption9_ciphertext_list

// generated: "130169feea85d66f1860f9dd"
inline_for_extraction
let size_test56_encryption9_nonce: size_nat = 12
let test56_encryption9_nonce_list : l:list uint8{List.Tot.length l == size_test56_encryption9_nonce} =
  [@inline_let]
  let l = [
    u8 0x13; u8 0x01; u8 0x69; u8 0xfe; u8 0xea;
    u8 0x85; u8 0xd6; u8 0x6f; u8 0x18; u8 0x60;
    u8 0xf9; u8 0xdd;
  ] in
  assert_norm(List.Tot.length l == size_test56_encryption9_nonce);
  l
let test56_encryption9_nonce : lbytes size_test56_encryption9_nonce = createL test56_encryption9_nonce_list

// generated: "4265617574792069732074727574682c20747275746820626561757479"
inline_for_extraction
let size_test56_encryption9_plaintext: size_nat = 29
let test56_encryption9_plaintext_list : l:list uint8{List.Tot.length l == size_test56_encryption9_plaintext} =
  [@inline_let]
  let l = [
    u8 0x42; u8 0x65; u8 0x61; u8 0x75; u8 0x74;
    u8 0x79; u8 0x20; u8 0x69; u8 0x73; u8 0x20;
    u8 0x74; u8 0x72; u8 0x75; u8 0x74; u8 0x68;
    u8 0x2c; u8 0x20; u8 0x74; u8 0x72; u8 0x75;
    u8 0x74; u8 0x68; u8 0x20; u8 0x62; u8 0x65;
    u8 0x61; u8 0x75; u8 0x74; u8 0x79;
  ] in
  assert_norm(List.Tot.length l == size_test56_encryption9_plaintext);
  l
let test56_encryption9_plaintext : lbytes size_test56_encryption9_plaintext = createL test56_encryption9_plaintext_list

// generated: "436f6e746578742d30"
inline_for_extraction
let size_test56_export0_exportContext: size_nat = 9
let test56_export0_exportContext_list : l:list uint8{List.Tot.length l == size_test56_export0_exportContext} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x6e; u8 0x74; u8 0x65;
    u8 0x78; u8 0x74; u8 0x2d; u8 0x30;
  ] in
  assert_norm(List.Tot.length l == size_test56_export0_exportContext);
  l
let test56_export0_exportContext : lbytes size_test56_export0_exportContext = createL test56_export0_exportContext_list

// generated: "5d659c74326be16c2d8a83eb7f2b09ba47f41ceae2bdf9c7e9c43bc85f0899b1"
inline_for_extraction
let size_test56_export0_exportValue: size_nat = 32
let test56_export0_exportValue_list : l:list uint8{List.Tot.length l == size_test56_export0_exportValue} =
  [@inline_let]
  let l = [
    u8 0x5d; u8 0x65; u8 0x9c; u8 0x74; u8 0x32;
    u8 0x6b; u8 0xe1; u8 0x6c; u8 0x2d; u8 0x8a;
    u8 0x83; u8 0xeb; u8 0x7f; u8 0x2b; u8 0x09;
    u8 0xba; u8 0x47; u8 0xf4; u8 0x1c; u8 0xea;
    u8 0xe2; u8 0xbd; u8 0xf9; u8 0xc7; u8 0xe9;
    u8 0xc4; u8 0x3b; u8 0xc8; u8 0x5f; u8 0x08;
    u8 0x99; u8 0xb1;
  ] in
  assert_norm(List.Tot.length l == size_test56_export0_exportValue);
  l
let test56_export0_exportValue : lbytes size_test56_export0_exportValue = createL test56_export0_exportValue_list

let test56_export0_len:size_nat = 32
// generated: "436f6e746578742d31"
inline_for_extraction
let size_test56_export1_exportContext: size_nat = 9
let test56_export1_exportContext_list : l:list uint8{List.Tot.length l == size_test56_export1_exportContext} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x6e; u8 0x74; u8 0x65;
    u8 0x78; u8 0x74; u8 0x2d; u8 0x31;
  ] in
  assert_norm(List.Tot.length l == size_test56_export1_exportContext);
  l
let test56_export1_exportContext : lbytes size_test56_export1_exportContext = createL test56_export1_exportContext_list

// generated: "65a0b8b1d14601f58a806c64dcadc6fc0a57a2a711211265ba1507838331b7f8"
inline_for_extraction
let size_test56_export1_exportValue: size_nat = 32
let test56_export1_exportValue_list : l:list uint8{List.Tot.length l == size_test56_export1_exportValue} =
  [@inline_let]
  let l = [
    u8 0x65; u8 0xa0; u8 0xb8; u8 0xb1; u8 0xd1;
    u8 0x46; u8 0x01; u8 0xf5; u8 0x8a; u8 0x80;
    u8 0x6c; u8 0x64; u8 0xdc; u8 0xad; u8 0xc6;
    u8 0xfc; u8 0x0a; u8 0x57; u8 0xa2; u8 0xa7;
    u8 0x11; u8 0x21; u8 0x12; u8 0x65; u8 0xba;
    u8 0x15; u8 0x07; u8 0x83; u8 0x83; u8 0x31;
    u8 0xb7; u8 0xf8;
  ] in
  assert_norm(List.Tot.length l == size_test56_export1_exportValue);
  l
let test56_export1_exportValue : lbytes size_test56_export1_exportValue = createL test56_export1_exportValue_list

let test56_export1_len:size_nat = 32
// generated: "436f6e746578742d32"
inline_for_extraction
let size_test56_export2_exportContext: size_nat = 9
let test56_export2_exportContext_list : l:list uint8{List.Tot.length l == size_test56_export2_exportContext} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x6e; u8 0x74; u8 0x65;
    u8 0x78; u8 0x74; u8 0x2d; u8 0x32;
  ] in
  assert_norm(List.Tot.length l == size_test56_export2_exportContext);
  l
let test56_export2_exportContext : lbytes size_test56_export2_exportContext = createL test56_export2_exportContext_list

// generated: "ed6cfec225669fa29cb7430707598f88151fe40338a453c2656115102e644863"
inline_for_extraction
let size_test56_export2_exportValue: size_nat = 32
let test56_export2_exportValue_list : l:list uint8{List.Tot.length l == size_test56_export2_exportValue} =
  [@inline_let]
  let l = [
    u8 0xed; u8 0x6c; u8 0xfe; u8 0xc2; u8 0x25;
    u8 0x66; u8 0x9f; u8 0xa2; u8 0x9c; u8 0xb7;
    u8 0x43; u8 0x07; u8 0x07; u8 0x59; u8 0x8f;
    u8 0x88; u8 0x15; u8 0x1f; u8 0xe4; u8 0x03;
    u8 0x38; u8 0xa4; u8 0x53; u8 0xc2; u8 0x65;
    u8 0x61; u8 0x15; u8 0x10; u8 0x2e; u8 0x64;
    u8 0x48; u8 0x63;
  ] in
  assert_norm(List.Tot.length l == size_test56_export2_exportValue);
  l
let test56_export2_exportValue : lbytes size_test56_export2_exportValue = createL test56_export2_exportValue_list

let test56_export2_len:size_nat = 32
// generated: "436f6e746578742d33"
inline_for_extraction
let size_test56_export3_exportContext: size_nat = 9
let test56_export3_exportContext_list : l:list uint8{List.Tot.length l == size_test56_export3_exportContext} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x6e; u8 0x74; u8 0x65;
    u8 0x78; u8 0x74; u8 0x2d; u8 0x33;
  ] in
  assert_norm(List.Tot.length l == size_test56_export3_exportContext);
  l
let test56_export3_exportContext : lbytes size_test56_export3_exportContext = createL test56_export3_exportContext_list

// generated: "522c7151375f579c391ffd9460d44351243f5679f42575f1fbddef82380beb04"
inline_for_extraction
let size_test56_export3_exportValue: size_nat = 32
let test56_export3_exportValue_list : l:list uint8{List.Tot.length l == size_test56_export3_exportValue} =
  [@inline_let]
  let l = [
    u8 0x52; u8 0x2c; u8 0x71; u8 0x51; u8 0x37;
    u8 0x5f; u8 0x57; u8 0x9c; u8 0x39; u8 0x1f;
    u8 0xfd; u8 0x94; u8 0x60; u8 0xd4; u8 0x43;
    u8 0x51; u8 0x24; u8 0x3f; u8 0x56; u8 0x79;
    u8 0xf4; u8 0x25; u8 0x75; u8 0xf1; u8 0xfb;
    u8 0xdd; u8 0xef; u8 0x82; u8 0x38; u8 0x0b;
    u8 0xeb; u8 0x04;
  ] in
  assert_norm(List.Tot.length l == size_test56_export3_exportValue);
  l
let test56_export3_exportValue : lbytes size_test56_export3_exportValue = createL test56_export3_exportValue_list

let test56_export3_len:size_nat = 32
// generated: "436f6e746578742d34"
inline_for_extraction
let size_test56_export4_exportContext: size_nat = 9
let test56_export4_exportContext_list : l:list uint8{List.Tot.length l == size_test56_export4_exportContext} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x6e; u8 0x74; u8 0x65;
    u8 0x78; u8 0x74; u8 0x2d; u8 0x34;
  ] in
  assert_norm(List.Tot.length l == size_test56_export4_exportContext);
  l
let test56_export4_exportContext : lbytes size_test56_export4_exportContext = createL test56_export4_exportContext_list

// generated: "e5a67afe8a7a39d0133aa06f4add889a9d81af2318314c1181c32f736eb99aea"
inline_for_extraction
let size_test56_export4_exportValue: size_nat = 32
let test56_export4_exportValue_list : l:list uint8{List.Tot.length l == size_test56_export4_exportValue} =
  [@inline_let]
  let l = [
    u8 0xe5; u8 0xa6; u8 0x7a; u8 0xfe; u8 0x8a;
    u8 0x7a; u8 0x39; u8 0xd0; u8 0x13; u8 0x3a;
    u8 0xa0; u8 0x6f; u8 0x4a; u8 0xdd; u8 0x88;
    u8 0x9a; u8 0x9d; u8 0x81; u8 0xaf; u8 0x23;
    u8 0x18; u8 0x31; u8 0x4c; u8 0x11; u8 0x81;
    u8 0xc3; u8 0x2f; u8 0x73; u8 0x6e; u8 0xb9;
    u8 0x9a; u8 0xea;
  ] in
  assert_norm(List.Tot.length l == size_test56_export4_exportValue);
  l
let test56_export4_exportValue : lbytes size_test56_export4_exportValue = createL test56_export4_exportValue_list

let test56_export4_len:size_nat = 32

let test56 () =
  let res = test_setupBase test56_ciphersuite test56_skEm test56_pkEm test56_skRm test56_pkRm test56_info test56_enc test56_zz test56_key_schedule_context test56_secret test56_key test56_nonce test56_exporterSecret test56_encryption0_nonce test56_encryption1_nonce in
  let seq0:HPKE.seq_aead_s test56_ciphersuite = 0 in
  let enc_res0 = test_encryption test56_ciphersuite test56_key test56_nonce test56_exporterSecret test56_encryption0_aad test56_encryption0_plaintext seq0 test56_encryption0_ciphertext test56_encryption0_nonce in

  assert_norm (1 < pow2 (8 * 12));
  let seq1:HPKE.seq_aead_s test56_ciphersuite = (seq0 + 1) in
  let enc_res1 = test_encryption test56_ciphersuite test56_key test56_nonce test56_exporterSecret test56_encryption1_aad test56_encryption1_plaintext seq1 test56_encryption1_ciphertext test56_encryption1_nonce in

  assert_norm (2 < pow2 (8 * 12));
  let seq2:HPKE.seq_aead_s test56_ciphersuite = (seq1 + 1) in
  let enc_res2 = test_encryption test56_ciphersuite test56_key test56_nonce test56_exporterSecret test56_encryption2_aad test56_encryption2_plaintext 2 test56_encryption2_ciphertext test56_encryption2_nonce in

  assert_norm (3 < pow2 (8 * 12));
  let seq3:HPKE.seq_aead_s test56_ciphersuite = (seq2 + 1) in
  let enc_res3 = test_encryption test56_ciphersuite test56_key test56_nonce test56_exporterSecret test56_encryption3_aad test56_encryption3_plaintext 3 test56_encryption3_ciphertext test56_encryption3_nonce in

  assert_norm (4 < pow2 (8 * 12));
  let seq4:HPKE.seq_aead_s test56_ciphersuite = (seq3 + 1) in
  let enc_res4 = test_encryption test56_ciphersuite test56_key test56_nonce test56_exporterSecret test56_encryption4_aad test56_encryption4_plaintext 4 test56_encryption4_ciphertext test56_encryption4_nonce in

  assert_norm (5 < pow2 (8 * 12));
  let seq5:HPKE.seq_aead_s test56_ciphersuite = (seq4 + 1) in
  let enc_res5 = test_encryption test56_ciphersuite test56_key test56_nonce test56_exporterSecret test56_encryption5_aad test56_encryption5_plaintext 5 test56_encryption5_ciphertext test56_encryption5_nonce in

  assert_norm (6 < pow2 (8 * 12));
  let seq6:HPKE.seq_aead_s test56_ciphersuite = (seq5 + 1) in
  let enc_res6 = test_encryption test56_ciphersuite test56_key test56_nonce test56_exporterSecret test56_encryption6_aad test56_encryption6_plaintext 6 test56_encryption6_ciphertext test56_encryption6_nonce in

  assert_norm (7 < pow2 (8 * 12));
  let seq7:HPKE.seq_aead_s test56_ciphersuite = (seq6 + 1) in
  let enc_res7 = test_encryption test56_ciphersuite test56_key test56_nonce test56_exporterSecret test56_encryption7_aad test56_encryption7_plaintext 7 test56_encryption7_ciphertext test56_encryption7_nonce in

  assert_norm (8 < pow2 (8 * 12));
  let seq8:HPKE.seq_aead_s test56_ciphersuite = (seq7 + 1) in
  let enc_res8 = test_encryption test56_ciphersuite test56_key test56_nonce test56_exporterSecret test56_encryption8_aad test56_encryption8_plaintext 8 test56_encryption8_ciphertext test56_encryption8_nonce in

  assert_norm (9 < pow2 (8 * 12));
  let seq9:HPKE.seq_aead_s test56_ciphersuite = (seq8 + 1) in
  let enc_res9 = test_encryption test56_ciphersuite test56_key test56_nonce test56_exporterSecret test56_encryption9_aad test56_encryption9_plaintext 9 test56_encryption9_ciphertext test56_encryption9_nonce in

  let exp_res0 = test_export test56_ciphersuite test56_key test56_nonce test56_exporterSecret test56_export0_exportContext test56_export0_len test56_export0_exportValue in

  let exp_res1 = test_export test56_ciphersuite test56_key test56_nonce test56_exporterSecret test56_export1_exportContext test56_export1_len test56_export1_exportValue in

  let exp_res2 = test_export test56_ciphersuite test56_key test56_nonce test56_exporterSecret test56_export2_exportContext test56_export2_len test56_export2_exportValue in

  let exp_res3 = test_export test56_ciphersuite test56_key test56_nonce test56_exporterSecret test56_export3_exportContext test56_export3_len test56_export3_exportValue in

  let exp_res4 = test_export test56_ciphersuite test56_key test56_nonce test56_exporterSecret test56_export4_exportContext test56_export4_len test56_export4_exportValue in

  enc_res0 && enc_res1 && enc_res2 && enc_res3 && enc_res4 && enc_res5 && enc_res6 && enc_res7 && enc_res8 && enc_res9 && res && exp_res0 && exp_res1 && exp_res2 && exp_res3 && exp_res4


// Skipped unsupported test case 57

// Skipped unsupported test case 58

// Skipped unsupported test case 59

let test60_mode: HPKE.mode = HPKE.Base
let test60_ciphersuite = DH.DH_P256, Hash.SHA2_256, AEAD.AES128_GCM, Hash.SHA2_512

// generated: "4f6465206f6e2061204772656369616e2055726e"
inline_for_extraction
let size_test60_info: size_nat = 20
let test60_info_list : l:list uint8{List.Tot.length l == size_test60_info} =
  [@inline_let]
  let l = [
    u8 0x4f; u8 0x64; u8 0x65; u8 0x20; u8 0x6f;
    u8 0x6e; u8 0x20; u8 0x61; u8 0x20; u8 0x47;
    u8 0x72; u8 0x65; u8 0x63; u8 0x69; u8 0x61;
    u8 0x6e; u8 0x20; u8 0x55; u8 0x72; u8 0x6e;
  ] in
  assert_norm(List.Tot.length l == size_test60_info);
  l
let test60_info : lbytes size_test60_info = createL test60_info_list

// generated: "1a1156d1fc65c586defec75d8346880f8539d8322f5d39443201e1e01e4a29b7"
inline_for_extraction
let size_test60_skRm: size_nat = 32
let test60_skRm_list : l:list uint8{List.Tot.length l == size_test60_skRm} =
  [@inline_let]
  let l = [
    u8 0x1a; u8 0x11; u8 0x56; u8 0xd1; u8 0xfc;
    u8 0x65; u8 0xc5; u8 0x86; u8 0xde; u8 0xfe;
    u8 0xc7; u8 0x5d; u8 0x83; u8 0x46; u8 0x88;
    u8 0x0f; u8 0x85; u8 0x39; u8 0xd8; u8 0x32;
    u8 0x2f; u8 0x5d; u8 0x39; u8 0x44; u8 0x32;
    u8 0x01; u8 0xe1; u8 0xe0; u8 0x1e; u8 0x4a;
    u8 0x29; u8 0xb7;
  ] in
  assert_norm(List.Tot.length l == size_test60_skRm);
  l
let test60_skRm : lbytes size_test60_skRm = createL test60_skRm_list

// generated: "fb0aa03282e7afbe13dd6cc2c005642294cfd473a63f787f9629200a9c95fc2b"
inline_for_extraction
let size_test60_skEm: size_nat = 32
let test60_skEm_list : l:list uint8{List.Tot.length l == size_test60_skEm} =
  [@inline_let]
  let l = [
    u8 0xfb; u8 0x0a; u8 0xa0; u8 0x32; u8 0x82;
    u8 0xe7; u8 0xaf; u8 0xbe; u8 0x13; u8 0xdd;
    u8 0x6c; u8 0xc2; u8 0xc0; u8 0x05; u8 0x64;
    u8 0x22; u8 0x94; u8 0xcf; u8 0xd4; u8 0x73;
    u8 0xa6; u8 0x3f; u8 0x78; u8 0x7f; u8 0x96;
    u8 0x29; u8 0x20; u8 0x0a; u8 0x9c; u8 0x95;
    u8 0xfc; u8 0x2b;
  ] in
  assert_norm(List.Tot.length l == size_test60_skEm);
  l
let test60_skEm : lbytes size_test60_skEm = createL test60_skEm_list

// generated: "04b3f6d16ac64e4f79f9bcc0d0b8be4faf7c2c3c1106872b20b9ca86f42d9656c60e13af16e13202d661fc4b5f8d1826cc0f3212028a4ba9c78a4672e035978c22"
inline_for_extraction
let size_test60_pkRm: size_nat = 65
let test60_pkRm_list : l:list uint8{List.Tot.length l == size_test60_pkRm} =
  [@inline_let]
  let l = [
    u8 0x04; u8 0xb3; u8 0xf6; u8 0xd1; u8 0x6a;
    u8 0xc6; u8 0x4e; u8 0x4f; u8 0x79; u8 0xf9;
    u8 0xbc; u8 0xc0; u8 0xd0; u8 0xb8; u8 0xbe;
    u8 0x4f; u8 0xaf; u8 0x7c; u8 0x2c; u8 0x3c;
    u8 0x11; u8 0x06; u8 0x87; u8 0x2b; u8 0x20;
    u8 0xb9; u8 0xca; u8 0x86; u8 0xf4; u8 0x2d;
    u8 0x96; u8 0x56; u8 0xc6; u8 0x0e; u8 0x13;
    u8 0xaf; u8 0x16; u8 0xe1; u8 0x32; u8 0x02;
    u8 0xd6; u8 0x61; u8 0xfc; u8 0x4b; u8 0x5f;
    u8 0x8d; u8 0x18; u8 0x26; u8 0xcc; u8 0x0f;
    u8 0x32; u8 0x12; u8 0x02; u8 0x8a; u8 0x4b;
    u8 0xa9; u8 0xc7; u8 0x8a; u8 0x46; u8 0x72;
    u8 0xe0; u8 0x35; u8 0x97; u8 0x8c; u8 0x22;
  ] in
  assert_norm(List.Tot.length l == size_test60_pkRm);
  l
let test60_pkRm : lbytes size_test60_pkRm = createL test60_pkRm_list

// generated: "04ef75d43da75e3942f79b57a21f5413982d076794f42f103495a493a336e4448f5d2ea6fff7eb93d5ba07927e49ee6952f695103bc44b5203ba4f36aeee8bad10"
inline_for_extraction
let size_test60_pkEm: size_nat = 65
let test60_pkEm_list : l:list uint8{List.Tot.length l == size_test60_pkEm} =
  [@inline_let]
  let l = [
    u8 0x04; u8 0xef; u8 0x75; u8 0xd4; u8 0x3d;
    u8 0xa7; u8 0x5e; u8 0x39; u8 0x42; u8 0xf7;
    u8 0x9b; u8 0x57; u8 0xa2; u8 0x1f; u8 0x54;
    u8 0x13; u8 0x98; u8 0x2d; u8 0x07; u8 0x67;
    u8 0x94; u8 0xf4; u8 0x2f; u8 0x10; u8 0x34;
    u8 0x95; u8 0xa4; u8 0x93; u8 0xa3; u8 0x36;
    u8 0xe4; u8 0x44; u8 0x8f; u8 0x5d; u8 0x2e;
    u8 0xa6; u8 0xff; u8 0xf7; u8 0xeb; u8 0x93;
    u8 0xd5; u8 0xba; u8 0x07; u8 0x92; u8 0x7e;
    u8 0x49; u8 0xee; u8 0x69; u8 0x52; u8 0xf6;
    u8 0x95; u8 0x10; u8 0x3b; u8 0xc4; u8 0x4b;
    u8 0x52; u8 0x03; u8 0xba; u8 0x4f; u8 0x36;
    u8 0xae; u8 0xee; u8 0x8b; u8 0xad; u8 0x10;
  ] in
  assert_norm(List.Tot.length l == size_test60_pkEm);
  l
let test60_pkEm : lbytes size_test60_pkEm = createL test60_pkEm_list

// generated: "04ef75d43da75e3942f79b57a21f5413982d076794f42f103495a493a336e4448f5d2ea6fff7eb93d5ba07927e49ee6952f695103bc44b5203ba4f36aeee8bad10"
inline_for_extraction
let size_test60_enc: size_nat = 65
let test60_enc_list : l:list uint8{List.Tot.length l == size_test60_enc} =
  [@inline_let]
  let l = [
    u8 0x04; u8 0xef; u8 0x75; u8 0xd4; u8 0x3d;
    u8 0xa7; u8 0x5e; u8 0x39; u8 0x42; u8 0xf7;
    u8 0x9b; u8 0x57; u8 0xa2; u8 0x1f; u8 0x54;
    u8 0x13; u8 0x98; u8 0x2d; u8 0x07; u8 0x67;
    u8 0x94; u8 0xf4; u8 0x2f; u8 0x10; u8 0x34;
    u8 0x95; u8 0xa4; u8 0x93; u8 0xa3; u8 0x36;
    u8 0xe4; u8 0x44; u8 0x8f; u8 0x5d; u8 0x2e;
    u8 0xa6; u8 0xff; u8 0xf7; u8 0xeb; u8 0x93;
    u8 0xd5; u8 0xba; u8 0x07; u8 0x92; u8 0x7e;
    u8 0x49; u8 0xee; u8 0x69; u8 0x52; u8 0xf6;
    u8 0x95; u8 0x10; u8 0x3b; u8 0xc4; u8 0x4b;
    u8 0x52; u8 0x03; u8 0xba; u8 0x4f; u8 0x36;
    u8 0xae; u8 0xee; u8 0x8b; u8 0xad; u8 0x10;
  ] in
  assert_norm(List.Tot.length l == size_test60_enc);
  l
let test60_enc : lbytes size_test60_enc = createL test60_enc_list

// generated: "587eb0c12150817ffac183198897cb579d31d6a018bf9f5813af429a0daffb88"
inline_for_extraction
let size_test60_zz: size_nat = 32
let test60_zz_list : l:list uint8{List.Tot.length l == size_test60_zz} =
  [@inline_let]
  let l = [
    u8 0x58; u8 0x7e; u8 0xb0; u8 0xc1; u8 0x21;
    u8 0x50; u8 0x81; u8 0x7f; u8 0xfa; u8 0xc1;
    u8 0x83; u8 0x19; u8 0x88; u8 0x97; u8 0xcb;
    u8 0x57; u8 0x9d; u8 0x31; u8 0xd6; u8 0xa0;
    u8 0x18; u8 0xbf; u8 0x9f; u8 0x58; u8 0x13;
    u8 0xaf; u8 0x42; u8 0x9a; u8 0x0d; u8 0xaf;
    u8 0xfb; u8 0x88;
  ] in
  assert_norm(List.Tot.length l == size_test60_zz);
  l
let test60_zz : lbytes size_test60_zz = createL test60_zz_list

// generated: "001000030001008ca13b5d680259cfa265de13dd24f257083c9403c01a8aa3320b9195c8d1d812a58e72ff3dd3cf71dc81b21c354f84e9ca6863d5fd871711e356ed9bf5f1e0d0c70a83df9dcea90e894cbfd709dabe93b3390a8e9c5a18498a1ff32414767a12c08bf4d4df6cf9d953da725b79d07454eb69bd002235f35a241dec5f1088177c"
inline_for_extraction
let size_test60_key_schedule_context: size_nat = 135
let test60_key_schedule_context_list : l:list uint8{List.Tot.length l == size_test60_key_schedule_context} =
  [@inline_let]
  let l = [
    u8 0x00; u8 0x10; u8 0x00; u8 0x03; u8 0x00;
    u8 0x01; u8 0x00; u8 0x8c; u8 0xa1; u8 0x3b;
    u8 0x5d; u8 0x68; u8 0x02; u8 0x59; u8 0xcf;
    u8 0xa2; u8 0x65; u8 0xde; u8 0x13; u8 0xdd;
    u8 0x24; u8 0xf2; u8 0x57; u8 0x08; u8 0x3c;
    u8 0x94; u8 0x03; u8 0xc0; u8 0x1a; u8 0x8a;
    u8 0xa3; u8 0x32; u8 0x0b; u8 0x91; u8 0x95;
    u8 0xc8; u8 0xd1; u8 0xd8; u8 0x12; u8 0xa5;
    u8 0x8e; u8 0x72; u8 0xff; u8 0x3d; u8 0xd3;
    u8 0xcf; u8 0x71; u8 0xdc; u8 0x81; u8 0xb2;
    u8 0x1c; u8 0x35; u8 0x4f; u8 0x84; u8 0xe9;
    u8 0xca; u8 0x68; u8 0x63; u8 0xd5; u8 0xfd;
    u8 0x87; u8 0x17; u8 0x11; u8 0xe3; u8 0x56;
    u8 0xed; u8 0x9b; u8 0xf5; u8 0xf1; u8 0xe0;
    u8 0xd0; u8 0xc7; u8 0x0a; u8 0x83; u8 0xdf;
    u8 0x9d; u8 0xce; u8 0xa9; u8 0x0e; u8 0x89;
    u8 0x4c; u8 0xbf; u8 0xd7; u8 0x09; u8 0xda;
    u8 0xbe; u8 0x93; u8 0xb3; u8 0x39; u8 0x0a;
    u8 0x8e; u8 0x9c; u8 0x5a; u8 0x18; u8 0x49;
    u8 0x8a; u8 0x1f; u8 0xf3; u8 0x24; u8 0x14;
    u8 0x76; u8 0x7a; u8 0x12; u8 0xc0; u8 0x8b;
    u8 0xf4; u8 0xd4; u8 0xdf; u8 0x6c; u8 0xf9;
    u8 0xd9; u8 0x53; u8 0xda; u8 0x72; u8 0x5b;
    u8 0x79; u8 0xd0; u8 0x74; u8 0x54; u8 0xeb;
    u8 0x69; u8 0xbd; u8 0x00; u8 0x22; u8 0x35;
    u8 0xf3; u8 0x5a; u8 0x24; u8 0x1d; u8 0xec;
    u8 0x5f; u8 0x10; u8 0x88; u8 0x17; u8 0x7c;
  ] in
  assert_norm(List.Tot.length l == size_test60_key_schedule_context);
  l
let test60_key_schedule_context : lbytes size_test60_key_schedule_context = createL test60_key_schedule_context_list

// generated: "3ff67775992eabbed6b37c87a0bb910c0ebad0eeda31744f861f16b2ca17aace24301220251620e490517b44fe54a50b7e7ded94142681c27e1f20b5b9619017"
inline_for_extraction
let size_test60_secret: size_nat = 64
let test60_secret_list : l:list uint8{List.Tot.length l == size_test60_secret} =
  [@inline_let]
  let l = [
    u8 0x3f; u8 0xf6; u8 0x77; u8 0x75; u8 0x99;
    u8 0x2e; u8 0xab; u8 0xbe; u8 0xd6; u8 0xb3;
    u8 0x7c; u8 0x87; u8 0xa0; u8 0xbb; u8 0x91;
    u8 0x0c; u8 0x0e; u8 0xba; u8 0xd0; u8 0xee;
    u8 0xda; u8 0x31; u8 0x74; u8 0x4f; u8 0x86;
    u8 0x1f; u8 0x16; u8 0xb2; u8 0xca; u8 0x17;
    u8 0xaa; u8 0xce; u8 0x24; u8 0x30; u8 0x12;
    u8 0x20; u8 0x25; u8 0x16; u8 0x20; u8 0xe4;
    u8 0x90; u8 0x51; u8 0x7b; u8 0x44; u8 0xfe;
    u8 0x54; u8 0xa5; u8 0x0b; u8 0x7e; u8 0x7d;
    u8 0xed; u8 0x94; u8 0x14; u8 0x26; u8 0x81;
    u8 0xc2; u8 0x7e; u8 0x1f; u8 0x20; u8 0xb5;
    u8 0xb9; u8 0x61; u8 0x90; u8 0x17;
  ] in
  assert_norm(List.Tot.length l == size_test60_secret);
  l
let test60_secret : lbytes size_test60_secret = createL test60_secret_list

// generated: "3e36101334fef8a7c330cad37ec33298"
inline_for_extraction
let size_test60_key: size_nat = 16
let test60_key_list : l:list uint8{List.Tot.length l == size_test60_key} =
  [@inline_let]
  let l = [
    u8 0x3e; u8 0x36; u8 0x10; u8 0x13; u8 0x34;
    u8 0xfe; u8 0xf8; u8 0xa7; u8 0xc3; u8 0x30;
    u8 0xca; u8 0xd3; u8 0x7e; u8 0xc3; u8 0x32;
    u8 0x98;
  ] in
  assert_norm(List.Tot.length l == size_test60_key);
  l
let test60_key : lbytes size_test60_key = createL test60_key_list

// generated: "bff5146fc8884effa1f0a439"
inline_for_extraction
let size_test60_nonce: size_nat = 12
let test60_nonce_list : l:list uint8{List.Tot.length l == size_test60_nonce} =
  [@inline_let]
  let l = [
    u8 0xbf; u8 0xf5; u8 0x14; u8 0x6f; u8 0xc8;
    u8 0x88; u8 0x4e; u8 0xff; u8 0xa1; u8 0xf0;
    u8 0xa4; u8 0x39;
  ] in
  assert_norm(List.Tot.length l == size_test60_nonce);
  l
let test60_nonce : lbytes size_test60_nonce = createL test60_nonce_list

// generated: "c2266110b1c19a4b0cda8905313b7683ad21304d9760446ffd487974e34203adbb3c04d0712a20f645483e3967dc91cef9e379f854cc3f6d0a36bf8f84a66262"
inline_for_extraction
let size_test60_exporterSecret: size_nat = 64
let test60_exporterSecret_list : l:list uint8{List.Tot.length l == size_test60_exporterSecret} =
  [@inline_let]
  let l = [
    u8 0xc2; u8 0x26; u8 0x61; u8 0x10; u8 0xb1;
    u8 0xc1; u8 0x9a; u8 0x4b; u8 0x0c; u8 0xda;
    u8 0x89; u8 0x05; u8 0x31; u8 0x3b; u8 0x76;
    u8 0x83; u8 0xad; u8 0x21; u8 0x30; u8 0x4d;
    u8 0x97; u8 0x60; u8 0x44; u8 0x6f; u8 0xfd;
    u8 0x48; u8 0x79; u8 0x74; u8 0xe3; u8 0x42;
    u8 0x03; u8 0xad; u8 0xbb; u8 0x3c; u8 0x04;
    u8 0xd0; u8 0x71; u8 0x2a; u8 0x20; u8 0xf6;
    u8 0x45; u8 0x48; u8 0x3e; u8 0x39; u8 0x67;
    u8 0xdc; u8 0x91; u8 0xce; u8 0xf9; u8 0xe3;
    u8 0x79; u8 0xf8; u8 0x54; u8 0xcc; u8 0x3f;
    u8 0x6d; u8 0x0a; u8 0x36; u8 0xbf; u8 0x8f;
    u8 0x84; u8 0xa6; u8 0x62; u8 0x62;
  ] in
  assert_norm(List.Tot.length l == size_test60_exporterSecret);
  l
let test60_exporterSecret : lbytes size_test60_exporterSecret = createL test60_exporterSecret_list

// generated: "436f756e742d30"
inline_for_extraction
let size_test60_encryption0_aad: size_nat = 7
let test60_encryption0_aad_list : l:list uint8{List.Tot.length l == size_test60_encryption0_aad} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x75; u8 0x6e; u8 0x74;
    u8 0x2d; u8 0x30;
  ] in
  assert_norm(List.Tot.length l == size_test60_encryption0_aad);
  l
let test60_encryption0_aad : lbytes size_test60_encryption0_aad = createL test60_encryption0_aad_list

// generated: "ed009b5f4d78af7ac51d710075dc364230d382194e8f3531a7c38b50a70782acffe144aa4d7652750698493691"
inline_for_extraction
let size_test60_encryption0_ciphertext: size_nat = 45
let test60_encryption0_ciphertext_list : l:list uint8{List.Tot.length l == size_test60_encryption0_ciphertext} =
  [@inline_let]
  let l = [
    u8 0xed; u8 0x00; u8 0x9b; u8 0x5f; u8 0x4d;
    u8 0x78; u8 0xaf; u8 0x7a; u8 0xc5; u8 0x1d;
    u8 0x71; u8 0x00; u8 0x75; u8 0xdc; u8 0x36;
    u8 0x42; u8 0x30; u8 0xd3; u8 0x82; u8 0x19;
    u8 0x4e; u8 0x8f; u8 0x35; u8 0x31; u8 0xa7;
    u8 0xc3; u8 0x8b; u8 0x50; u8 0xa7; u8 0x07;
    u8 0x82; u8 0xac; u8 0xff; u8 0xe1; u8 0x44;
    u8 0xaa; u8 0x4d; u8 0x76; u8 0x52; u8 0x75;
    u8 0x06; u8 0x98; u8 0x49; u8 0x36; u8 0x91;
  ] in
  assert_norm(List.Tot.length l == size_test60_encryption0_ciphertext);
  l
let test60_encryption0_ciphertext : lbytes size_test60_encryption0_ciphertext = createL test60_encryption0_ciphertext_list

// generated: "bff5146fc8884effa1f0a439"
inline_for_extraction
let size_test60_encryption0_nonce: size_nat = 12
let test60_encryption0_nonce_list : l:list uint8{List.Tot.length l == size_test60_encryption0_nonce} =
  [@inline_let]
  let l = [
    u8 0xbf; u8 0xf5; u8 0x14; u8 0x6f; u8 0xc8;
    u8 0x88; u8 0x4e; u8 0xff; u8 0xa1; u8 0xf0;
    u8 0xa4; u8 0x39;
  ] in
  assert_norm(List.Tot.length l == size_test60_encryption0_nonce);
  l
let test60_encryption0_nonce : lbytes size_test60_encryption0_nonce = createL test60_encryption0_nonce_list

// generated: "4265617574792069732074727574682c20747275746820626561757479"
inline_for_extraction
let size_test60_encryption0_plaintext: size_nat = 29
let test60_encryption0_plaintext_list : l:list uint8{List.Tot.length l == size_test60_encryption0_plaintext} =
  [@inline_let]
  let l = [
    u8 0x42; u8 0x65; u8 0x61; u8 0x75; u8 0x74;
    u8 0x79; u8 0x20; u8 0x69; u8 0x73; u8 0x20;
    u8 0x74; u8 0x72; u8 0x75; u8 0x74; u8 0x68;
    u8 0x2c; u8 0x20; u8 0x74; u8 0x72; u8 0x75;
    u8 0x74; u8 0x68; u8 0x20; u8 0x62; u8 0x65;
    u8 0x61; u8 0x75; u8 0x74; u8 0x79;
  ] in
  assert_norm(List.Tot.length l == size_test60_encryption0_plaintext);
  l
let test60_encryption0_plaintext : lbytes size_test60_encryption0_plaintext = createL test60_encryption0_plaintext_list

// generated: "436f756e742d31"
inline_for_extraction
let size_test60_encryption1_aad: size_nat = 7
let test60_encryption1_aad_list : l:list uint8{List.Tot.length l == size_test60_encryption1_aad} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x75; u8 0x6e; u8 0x74;
    u8 0x2d; u8 0x31;
  ] in
  assert_norm(List.Tot.length l == size_test60_encryption1_aad);
  l
let test60_encryption1_aad : lbytes size_test60_encryption1_aad = createL test60_encryption1_aad_list

// generated: "a2b7d6107d0cb87dab601cb7897f5a1410f8a200c6d8b021d1af36f3cfc5eaf619da3f215b5747a545336d424f"
inline_for_extraction
let size_test60_encryption1_ciphertext: size_nat = 45
let test60_encryption1_ciphertext_list : l:list uint8{List.Tot.length l == size_test60_encryption1_ciphertext} =
  [@inline_let]
  let l = [
    u8 0xa2; u8 0xb7; u8 0xd6; u8 0x10; u8 0x7d;
    u8 0x0c; u8 0xb8; u8 0x7d; u8 0xab; u8 0x60;
    u8 0x1c; u8 0xb7; u8 0x89; u8 0x7f; u8 0x5a;
    u8 0x14; u8 0x10; u8 0xf8; u8 0xa2; u8 0x00;
    u8 0xc6; u8 0xd8; u8 0xb0; u8 0x21; u8 0xd1;
    u8 0xaf; u8 0x36; u8 0xf3; u8 0xcf; u8 0xc5;
    u8 0xea; u8 0xf6; u8 0x19; u8 0xda; u8 0x3f;
    u8 0x21; u8 0x5b; u8 0x57; u8 0x47; u8 0xa5;
    u8 0x45; u8 0x33; u8 0x6d; u8 0x42; u8 0x4f;
  ] in
  assert_norm(List.Tot.length l == size_test60_encryption1_ciphertext);
  l
let test60_encryption1_ciphertext : lbytes size_test60_encryption1_ciphertext = createL test60_encryption1_ciphertext_list

// generated: "bff5146fc8884effa1f0a438"
inline_for_extraction
let size_test60_encryption1_nonce: size_nat = 12
let test60_encryption1_nonce_list : l:list uint8{List.Tot.length l == size_test60_encryption1_nonce} =
  [@inline_let]
  let l = [
    u8 0xbf; u8 0xf5; u8 0x14; u8 0x6f; u8 0xc8;
    u8 0x88; u8 0x4e; u8 0xff; u8 0xa1; u8 0xf0;
    u8 0xa4; u8 0x38;
  ] in
  assert_norm(List.Tot.length l == size_test60_encryption1_nonce);
  l
let test60_encryption1_nonce : lbytes size_test60_encryption1_nonce = createL test60_encryption1_nonce_list

// generated: "4265617574792069732074727574682c20747275746820626561757479"
inline_for_extraction
let size_test60_encryption1_plaintext: size_nat = 29
let test60_encryption1_plaintext_list : l:list uint8{List.Tot.length l == size_test60_encryption1_plaintext} =
  [@inline_let]
  let l = [
    u8 0x42; u8 0x65; u8 0x61; u8 0x75; u8 0x74;
    u8 0x79; u8 0x20; u8 0x69; u8 0x73; u8 0x20;
    u8 0x74; u8 0x72; u8 0x75; u8 0x74; u8 0x68;
    u8 0x2c; u8 0x20; u8 0x74; u8 0x72; u8 0x75;
    u8 0x74; u8 0x68; u8 0x20; u8 0x62; u8 0x65;
    u8 0x61; u8 0x75; u8 0x74; u8 0x79;
  ] in
  assert_norm(List.Tot.length l == size_test60_encryption1_plaintext);
  l
let test60_encryption1_plaintext : lbytes size_test60_encryption1_plaintext = createL test60_encryption1_plaintext_list

// generated: "436f756e742d32"
inline_for_extraction
let size_test60_encryption2_aad: size_nat = 7
let test60_encryption2_aad_list : l:list uint8{List.Tot.length l == size_test60_encryption2_aad} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x75; u8 0x6e; u8 0x74;
    u8 0x2d; u8 0x32;
  ] in
  assert_norm(List.Tot.length l == size_test60_encryption2_aad);
  l
let test60_encryption2_aad : lbytes size_test60_encryption2_aad = createL test60_encryption2_aad_list

// generated: "b2bde912d030d6a7bd84adf9b19786475a1e0279265370c03a107969a7ef4fd7304de6118e99924a4690a378b2"
inline_for_extraction
let size_test60_encryption2_ciphertext: size_nat = 45
let test60_encryption2_ciphertext_list : l:list uint8{List.Tot.length l == size_test60_encryption2_ciphertext} =
  [@inline_let]
  let l = [
    u8 0xb2; u8 0xbd; u8 0xe9; u8 0x12; u8 0xd0;
    u8 0x30; u8 0xd6; u8 0xa7; u8 0xbd; u8 0x84;
    u8 0xad; u8 0xf9; u8 0xb1; u8 0x97; u8 0x86;
    u8 0x47; u8 0x5a; u8 0x1e; u8 0x02; u8 0x79;
    u8 0x26; u8 0x53; u8 0x70; u8 0xc0; u8 0x3a;
    u8 0x10; u8 0x79; u8 0x69; u8 0xa7; u8 0xef;
    u8 0x4f; u8 0xd7; u8 0x30; u8 0x4d; u8 0xe6;
    u8 0x11; u8 0x8e; u8 0x99; u8 0x92; u8 0x4a;
    u8 0x46; u8 0x90; u8 0xa3; u8 0x78; u8 0xb2;
  ] in
  assert_norm(List.Tot.length l == size_test60_encryption2_ciphertext);
  l
let test60_encryption2_ciphertext : lbytes size_test60_encryption2_ciphertext = createL test60_encryption2_ciphertext_list

// generated: "bff5146fc8884effa1f0a43b"
inline_for_extraction
let size_test60_encryption2_nonce: size_nat = 12
let test60_encryption2_nonce_list : l:list uint8{List.Tot.length l == size_test60_encryption2_nonce} =
  [@inline_let]
  let l = [
    u8 0xbf; u8 0xf5; u8 0x14; u8 0x6f; u8 0xc8;
    u8 0x88; u8 0x4e; u8 0xff; u8 0xa1; u8 0xf0;
    u8 0xa4; u8 0x3b;
  ] in
  assert_norm(List.Tot.length l == size_test60_encryption2_nonce);
  l
let test60_encryption2_nonce : lbytes size_test60_encryption2_nonce = createL test60_encryption2_nonce_list

// generated: "4265617574792069732074727574682c20747275746820626561757479"
inline_for_extraction
let size_test60_encryption2_plaintext: size_nat = 29
let test60_encryption2_plaintext_list : l:list uint8{List.Tot.length l == size_test60_encryption2_plaintext} =
  [@inline_let]
  let l = [
    u8 0x42; u8 0x65; u8 0x61; u8 0x75; u8 0x74;
    u8 0x79; u8 0x20; u8 0x69; u8 0x73; u8 0x20;
    u8 0x74; u8 0x72; u8 0x75; u8 0x74; u8 0x68;
    u8 0x2c; u8 0x20; u8 0x74; u8 0x72; u8 0x75;
    u8 0x74; u8 0x68; u8 0x20; u8 0x62; u8 0x65;
    u8 0x61; u8 0x75; u8 0x74; u8 0x79;
  ] in
  assert_norm(List.Tot.length l == size_test60_encryption2_plaintext);
  l
let test60_encryption2_plaintext : lbytes size_test60_encryption2_plaintext = createL test60_encryption2_plaintext_list

// generated: "436f756e742d33"
inline_for_extraction
let size_test60_encryption3_aad: size_nat = 7
let test60_encryption3_aad_list : l:list uint8{List.Tot.length l == size_test60_encryption3_aad} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x75; u8 0x6e; u8 0x74;
    u8 0x2d; u8 0x33;
  ] in
  assert_norm(List.Tot.length l == size_test60_encryption3_aad);
  l
let test60_encryption3_aad : lbytes size_test60_encryption3_aad = createL test60_encryption3_aad_list

// generated: "972a40c5b13055052904d2fc32399aa4c312c09a69457f7b3119385aacf1d5c3a7a0cba05ff9e597f1da543b63"
inline_for_extraction
let size_test60_encryption3_ciphertext: size_nat = 45
let test60_encryption3_ciphertext_list : l:list uint8{List.Tot.length l == size_test60_encryption3_ciphertext} =
  [@inline_let]
  let l = [
    u8 0x97; u8 0x2a; u8 0x40; u8 0xc5; u8 0xb1;
    u8 0x30; u8 0x55; u8 0x05; u8 0x29; u8 0x04;
    u8 0xd2; u8 0xfc; u8 0x32; u8 0x39; u8 0x9a;
    u8 0xa4; u8 0xc3; u8 0x12; u8 0xc0; u8 0x9a;
    u8 0x69; u8 0x45; u8 0x7f; u8 0x7b; u8 0x31;
    u8 0x19; u8 0x38; u8 0x5a; u8 0xac; u8 0xf1;
    u8 0xd5; u8 0xc3; u8 0xa7; u8 0xa0; u8 0xcb;
    u8 0xa0; u8 0x5f; u8 0xf9; u8 0xe5; u8 0x97;
    u8 0xf1; u8 0xda; u8 0x54; u8 0x3b; u8 0x63;
  ] in
  assert_norm(List.Tot.length l == size_test60_encryption3_ciphertext);
  l
let test60_encryption3_ciphertext : lbytes size_test60_encryption3_ciphertext = createL test60_encryption3_ciphertext_list

// generated: "bff5146fc8884effa1f0a43a"
inline_for_extraction
let size_test60_encryption3_nonce: size_nat = 12
let test60_encryption3_nonce_list : l:list uint8{List.Tot.length l == size_test60_encryption3_nonce} =
  [@inline_let]
  let l = [
    u8 0xbf; u8 0xf5; u8 0x14; u8 0x6f; u8 0xc8;
    u8 0x88; u8 0x4e; u8 0xff; u8 0xa1; u8 0xf0;
    u8 0xa4; u8 0x3a;
  ] in
  assert_norm(List.Tot.length l == size_test60_encryption3_nonce);
  l
let test60_encryption3_nonce : lbytes size_test60_encryption3_nonce = createL test60_encryption3_nonce_list

// generated: "4265617574792069732074727574682c20747275746820626561757479"
inline_for_extraction
let size_test60_encryption3_plaintext: size_nat = 29
let test60_encryption3_plaintext_list : l:list uint8{List.Tot.length l == size_test60_encryption3_plaintext} =
  [@inline_let]
  let l = [
    u8 0x42; u8 0x65; u8 0x61; u8 0x75; u8 0x74;
    u8 0x79; u8 0x20; u8 0x69; u8 0x73; u8 0x20;
    u8 0x74; u8 0x72; u8 0x75; u8 0x74; u8 0x68;
    u8 0x2c; u8 0x20; u8 0x74; u8 0x72; u8 0x75;
    u8 0x74; u8 0x68; u8 0x20; u8 0x62; u8 0x65;
    u8 0x61; u8 0x75; u8 0x74; u8 0x79;
  ] in
  assert_norm(List.Tot.length l == size_test60_encryption3_plaintext);
  l
let test60_encryption3_plaintext : lbytes size_test60_encryption3_plaintext = createL test60_encryption3_plaintext_list

// generated: "436f756e742d34"
inline_for_extraction
let size_test60_encryption4_aad: size_nat = 7
let test60_encryption4_aad_list : l:list uint8{List.Tot.length l == size_test60_encryption4_aad} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x75; u8 0x6e; u8 0x74;
    u8 0x2d; u8 0x34;
  ] in
  assert_norm(List.Tot.length l == size_test60_encryption4_aad);
  l
let test60_encryption4_aad : lbytes size_test60_encryption4_aad = createL test60_encryption4_aad_list

// generated: "f69773e339e60070036f5045705cba204feef5513b2e4bc85aeb341b6317f43e3aa1f2b9bb289edb085930d899"
inline_for_extraction
let size_test60_encryption4_ciphertext: size_nat = 45
let test60_encryption4_ciphertext_list : l:list uint8{List.Tot.length l == size_test60_encryption4_ciphertext} =
  [@inline_let]
  let l = [
    u8 0xf6; u8 0x97; u8 0x73; u8 0xe3; u8 0x39;
    u8 0xe6; u8 0x00; u8 0x70; u8 0x03; u8 0x6f;
    u8 0x50; u8 0x45; u8 0x70; u8 0x5c; u8 0xba;
    u8 0x20; u8 0x4f; u8 0xee; u8 0xf5; u8 0x51;
    u8 0x3b; u8 0x2e; u8 0x4b; u8 0xc8; u8 0x5a;
    u8 0xeb; u8 0x34; u8 0x1b; u8 0x63; u8 0x17;
    u8 0xf4; u8 0x3e; u8 0x3a; u8 0xa1; u8 0xf2;
    u8 0xb9; u8 0xbb; u8 0x28; u8 0x9e; u8 0xdb;
    u8 0x08; u8 0x59; u8 0x30; u8 0xd8; u8 0x99;
  ] in
  assert_norm(List.Tot.length l == size_test60_encryption4_ciphertext);
  l
let test60_encryption4_ciphertext : lbytes size_test60_encryption4_ciphertext = createL test60_encryption4_ciphertext_list

// generated: "bff5146fc8884effa1f0a43d"
inline_for_extraction
let size_test60_encryption4_nonce: size_nat = 12
let test60_encryption4_nonce_list : l:list uint8{List.Tot.length l == size_test60_encryption4_nonce} =
  [@inline_let]
  let l = [
    u8 0xbf; u8 0xf5; u8 0x14; u8 0x6f; u8 0xc8;
    u8 0x88; u8 0x4e; u8 0xff; u8 0xa1; u8 0xf0;
    u8 0xa4; u8 0x3d;
  ] in
  assert_norm(List.Tot.length l == size_test60_encryption4_nonce);
  l
let test60_encryption4_nonce : lbytes size_test60_encryption4_nonce = createL test60_encryption4_nonce_list

// generated: "4265617574792069732074727574682c20747275746820626561757479"
inline_for_extraction
let size_test60_encryption4_plaintext: size_nat = 29
let test60_encryption4_plaintext_list : l:list uint8{List.Tot.length l == size_test60_encryption4_plaintext} =
  [@inline_let]
  let l = [
    u8 0x42; u8 0x65; u8 0x61; u8 0x75; u8 0x74;
    u8 0x79; u8 0x20; u8 0x69; u8 0x73; u8 0x20;
    u8 0x74; u8 0x72; u8 0x75; u8 0x74; u8 0x68;
    u8 0x2c; u8 0x20; u8 0x74; u8 0x72; u8 0x75;
    u8 0x74; u8 0x68; u8 0x20; u8 0x62; u8 0x65;
    u8 0x61; u8 0x75; u8 0x74; u8 0x79;
  ] in
  assert_norm(List.Tot.length l == size_test60_encryption4_plaintext);
  l
let test60_encryption4_plaintext : lbytes size_test60_encryption4_plaintext = createL test60_encryption4_plaintext_list

// generated: "436f756e742d35"
inline_for_extraction
let size_test60_encryption5_aad: size_nat = 7
let test60_encryption5_aad_list : l:list uint8{List.Tot.length l == size_test60_encryption5_aad} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x75; u8 0x6e; u8 0x74;
    u8 0x2d; u8 0x35;
  ] in
  assert_norm(List.Tot.length l == size_test60_encryption5_aad);
  l
let test60_encryption5_aad : lbytes size_test60_encryption5_aad = createL test60_encryption5_aad_list

// generated: "2e9dfa6ecc8ff9e13603f13bccad0c7288cb2299f2e3ce115b4d5f1ca9e8a1b10484bf2053fb7415017330485f"
inline_for_extraction
let size_test60_encryption5_ciphertext: size_nat = 45
let test60_encryption5_ciphertext_list : l:list uint8{List.Tot.length l == size_test60_encryption5_ciphertext} =
  [@inline_let]
  let l = [
    u8 0x2e; u8 0x9d; u8 0xfa; u8 0x6e; u8 0xcc;
    u8 0x8f; u8 0xf9; u8 0xe1; u8 0x36; u8 0x03;
    u8 0xf1; u8 0x3b; u8 0xcc; u8 0xad; u8 0x0c;
    u8 0x72; u8 0x88; u8 0xcb; u8 0x22; u8 0x99;
    u8 0xf2; u8 0xe3; u8 0xce; u8 0x11; u8 0x5b;
    u8 0x4d; u8 0x5f; u8 0x1c; u8 0xa9; u8 0xe8;
    u8 0xa1; u8 0xb1; u8 0x04; u8 0x84; u8 0xbf;
    u8 0x20; u8 0x53; u8 0xfb; u8 0x74; u8 0x15;
    u8 0x01; u8 0x73; u8 0x30; u8 0x48; u8 0x5f;
  ] in
  assert_norm(List.Tot.length l == size_test60_encryption5_ciphertext);
  l
let test60_encryption5_ciphertext : lbytes size_test60_encryption5_ciphertext = createL test60_encryption5_ciphertext_list

// generated: "bff5146fc8884effa1f0a43c"
inline_for_extraction
let size_test60_encryption5_nonce: size_nat = 12
let test60_encryption5_nonce_list : l:list uint8{List.Tot.length l == size_test60_encryption5_nonce} =
  [@inline_let]
  let l = [
    u8 0xbf; u8 0xf5; u8 0x14; u8 0x6f; u8 0xc8;
    u8 0x88; u8 0x4e; u8 0xff; u8 0xa1; u8 0xf0;
    u8 0xa4; u8 0x3c;
  ] in
  assert_norm(List.Tot.length l == size_test60_encryption5_nonce);
  l
let test60_encryption5_nonce : lbytes size_test60_encryption5_nonce = createL test60_encryption5_nonce_list

// generated: "4265617574792069732074727574682c20747275746820626561757479"
inline_for_extraction
let size_test60_encryption5_plaintext: size_nat = 29
let test60_encryption5_plaintext_list : l:list uint8{List.Tot.length l == size_test60_encryption5_plaintext} =
  [@inline_let]
  let l = [
    u8 0x42; u8 0x65; u8 0x61; u8 0x75; u8 0x74;
    u8 0x79; u8 0x20; u8 0x69; u8 0x73; u8 0x20;
    u8 0x74; u8 0x72; u8 0x75; u8 0x74; u8 0x68;
    u8 0x2c; u8 0x20; u8 0x74; u8 0x72; u8 0x75;
    u8 0x74; u8 0x68; u8 0x20; u8 0x62; u8 0x65;
    u8 0x61; u8 0x75; u8 0x74; u8 0x79;
  ] in
  assert_norm(List.Tot.length l == size_test60_encryption5_plaintext);
  l
let test60_encryption5_plaintext : lbytes size_test60_encryption5_plaintext = createL test60_encryption5_plaintext_list

// generated: "436f756e742d36"
inline_for_extraction
let size_test60_encryption6_aad: size_nat = 7
let test60_encryption6_aad_list : l:list uint8{List.Tot.length l == size_test60_encryption6_aad} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x75; u8 0x6e; u8 0x74;
    u8 0x2d; u8 0x36;
  ] in
  assert_norm(List.Tot.length l == size_test60_encryption6_aad);
  l
let test60_encryption6_aad : lbytes size_test60_encryption6_aad = createL test60_encryption6_aad_list

// generated: "afa9a7f139e28935e944047513f355f07e5407f92652e480a350ed63f44c4ea57e77d4e6600ff3bb37a1a01715"
inline_for_extraction
let size_test60_encryption6_ciphertext: size_nat = 45
let test60_encryption6_ciphertext_list : l:list uint8{List.Tot.length l == size_test60_encryption6_ciphertext} =
  [@inline_let]
  let l = [
    u8 0xaf; u8 0xa9; u8 0xa7; u8 0xf1; u8 0x39;
    u8 0xe2; u8 0x89; u8 0x35; u8 0xe9; u8 0x44;
    u8 0x04; u8 0x75; u8 0x13; u8 0xf3; u8 0x55;
    u8 0xf0; u8 0x7e; u8 0x54; u8 0x07; u8 0xf9;
    u8 0x26; u8 0x52; u8 0xe4; u8 0x80; u8 0xa3;
    u8 0x50; u8 0xed; u8 0x63; u8 0xf4; u8 0x4c;
    u8 0x4e; u8 0xa5; u8 0x7e; u8 0x77; u8 0xd4;
    u8 0xe6; u8 0x60; u8 0x0f; u8 0xf3; u8 0xbb;
    u8 0x37; u8 0xa1; u8 0xa0; u8 0x17; u8 0x15;
  ] in
  assert_norm(List.Tot.length l == size_test60_encryption6_ciphertext);
  l
let test60_encryption6_ciphertext : lbytes size_test60_encryption6_ciphertext = createL test60_encryption6_ciphertext_list

// generated: "bff5146fc8884effa1f0a43f"
inline_for_extraction
let size_test60_encryption6_nonce: size_nat = 12
let test60_encryption6_nonce_list : l:list uint8{List.Tot.length l == size_test60_encryption6_nonce} =
  [@inline_let]
  let l = [
    u8 0xbf; u8 0xf5; u8 0x14; u8 0x6f; u8 0xc8;
    u8 0x88; u8 0x4e; u8 0xff; u8 0xa1; u8 0xf0;
    u8 0xa4; u8 0x3f;
  ] in
  assert_norm(List.Tot.length l == size_test60_encryption6_nonce);
  l
let test60_encryption6_nonce : lbytes size_test60_encryption6_nonce = createL test60_encryption6_nonce_list

// generated: "4265617574792069732074727574682c20747275746820626561757479"
inline_for_extraction
let size_test60_encryption6_plaintext: size_nat = 29
let test60_encryption6_plaintext_list : l:list uint8{List.Tot.length l == size_test60_encryption6_plaintext} =
  [@inline_let]
  let l = [
    u8 0x42; u8 0x65; u8 0x61; u8 0x75; u8 0x74;
    u8 0x79; u8 0x20; u8 0x69; u8 0x73; u8 0x20;
    u8 0x74; u8 0x72; u8 0x75; u8 0x74; u8 0x68;
    u8 0x2c; u8 0x20; u8 0x74; u8 0x72; u8 0x75;
    u8 0x74; u8 0x68; u8 0x20; u8 0x62; u8 0x65;
    u8 0x61; u8 0x75; u8 0x74; u8 0x79;
  ] in
  assert_norm(List.Tot.length l == size_test60_encryption6_plaintext);
  l
let test60_encryption6_plaintext : lbytes size_test60_encryption6_plaintext = createL test60_encryption6_plaintext_list

// generated: "436f756e742d37"
inline_for_extraction
let size_test60_encryption7_aad: size_nat = 7
let test60_encryption7_aad_list : l:list uint8{List.Tot.length l == size_test60_encryption7_aad} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x75; u8 0x6e; u8 0x74;
    u8 0x2d; u8 0x37;
  ] in
  assert_norm(List.Tot.length l == size_test60_encryption7_aad);
  l
let test60_encryption7_aad : lbytes size_test60_encryption7_aad = createL test60_encryption7_aad_list

// generated: "905e2012d22124ac521352afc6c97f9064677e7f78dee4034bf63ee025568b09b233a7c4f914cedb6de2d8cdb2"
inline_for_extraction
let size_test60_encryption7_ciphertext: size_nat = 45
let test60_encryption7_ciphertext_list : l:list uint8{List.Tot.length l == size_test60_encryption7_ciphertext} =
  [@inline_let]
  let l = [
    u8 0x90; u8 0x5e; u8 0x20; u8 0x12; u8 0xd2;
    u8 0x21; u8 0x24; u8 0xac; u8 0x52; u8 0x13;
    u8 0x52; u8 0xaf; u8 0xc6; u8 0xc9; u8 0x7f;
    u8 0x90; u8 0x64; u8 0x67; u8 0x7e; u8 0x7f;
    u8 0x78; u8 0xde; u8 0xe4; u8 0x03; u8 0x4b;
    u8 0xf6; u8 0x3e; u8 0xe0; u8 0x25; u8 0x56;
    u8 0x8b; u8 0x09; u8 0xb2; u8 0x33; u8 0xa7;
    u8 0xc4; u8 0xf9; u8 0x14; u8 0xce; u8 0xdb;
    u8 0x6d; u8 0xe2; u8 0xd8; u8 0xcd; u8 0xb2;
  ] in
  assert_norm(List.Tot.length l == size_test60_encryption7_ciphertext);
  l
let test60_encryption7_ciphertext : lbytes size_test60_encryption7_ciphertext = createL test60_encryption7_ciphertext_list

// generated: "bff5146fc8884effa1f0a43e"
inline_for_extraction
let size_test60_encryption7_nonce: size_nat = 12
let test60_encryption7_nonce_list : l:list uint8{List.Tot.length l == size_test60_encryption7_nonce} =
  [@inline_let]
  let l = [
    u8 0xbf; u8 0xf5; u8 0x14; u8 0x6f; u8 0xc8;
    u8 0x88; u8 0x4e; u8 0xff; u8 0xa1; u8 0xf0;
    u8 0xa4; u8 0x3e;
  ] in
  assert_norm(List.Tot.length l == size_test60_encryption7_nonce);
  l
let test60_encryption7_nonce : lbytes size_test60_encryption7_nonce = createL test60_encryption7_nonce_list

// generated: "4265617574792069732074727574682c20747275746820626561757479"
inline_for_extraction
let size_test60_encryption7_plaintext: size_nat = 29
let test60_encryption7_plaintext_list : l:list uint8{List.Tot.length l == size_test60_encryption7_plaintext} =
  [@inline_let]
  let l = [
    u8 0x42; u8 0x65; u8 0x61; u8 0x75; u8 0x74;
    u8 0x79; u8 0x20; u8 0x69; u8 0x73; u8 0x20;
    u8 0x74; u8 0x72; u8 0x75; u8 0x74; u8 0x68;
    u8 0x2c; u8 0x20; u8 0x74; u8 0x72; u8 0x75;
    u8 0x74; u8 0x68; u8 0x20; u8 0x62; u8 0x65;
    u8 0x61; u8 0x75; u8 0x74; u8 0x79;
  ] in
  assert_norm(List.Tot.length l == size_test60_encryption7_plaintext);
  l
let test60_encryption7_plaintext : lbytes size_test60_encryption7_plaintext = createL test60_encryption7_plaintext_list

// generated: "436f756e742d38"
inline_for_extraction
let size_test60_encryption8_aad: size_nat = 7
let test60_encryption8_aad_list : l:list uint8{List.Tot.length l == size_test60_encryption8_aad} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x75; u8 0x6e; u8 0x74;
    u8 0x2d; u8 0x38;
  ] in
  assert_norm(List.Tot.length l == size_test60_encryption8_aad);
  l
let test60_encryption8_aad : lbytes size_test60_encryption8_aad = createL test60_encryption8_aad_list

// generated: "4ad089df3cbce46cf52200daf00081fd7bf150802fa8387f1d154fe2b02b9ee02a0c839ff884a26f29899aa525"
inline_for_extraction
let size_test60_encryption8_ciphertext: size_nat = 45
let test60_encryption8_ciphertext_list : l:list uint8{List.Tot.length l == size_test60_encryption8_ciphertext} =
  [@inline_let]
  let l = [
    u8 0x4a; u8 0xd0; u8 0x89; u8 0xdf; u8 0x3c;
    u8 0xbc; u8 0xe4; u8 0x6c; u8 0xf5; u8 0x22;
    u8 0x00; u8 0xda; u8 0xf0; u8 0x00; u8 0x81;
    u8 0xfd; u8 0x7b; u8 0xf1; u8 0x50; u8 0x80;
    u8 0x2f; u8 0xa8; u8 0x38; u8 0x7f; u8 0x1d;
    u8 0x15; u8 0x4f; u8 0xe2; u8 0xb0; u8 0x2b;
    u8 0x9e; u8 0xe0; u8 0x2a; u8 0x0c; u8 0x83;
    u8 0x9f; u8 0xf8; u8 0x84; u8 0xa2; u8 0x6f;
    u8 0x29; u8 0x89; u8 0x9a; u8 0xa5; u8 0x25;
  ] in
  assert_norm(List.Tot.length l == size_test60_encryption8_ciphertext);
  l
let test60_encryption8_ciphertext : lbytes size_test60_encryption8_ciphertext = createL test60_encryption8_ciphertext_list

// generated: "bff5146fc8884effa1f0a431"
inline_for_extraction
let size_test60_encryption8_nonce: size_nat = 12
let test60_encryption8_nonce_list : l:list uint8{List.Tot.length l == size_test60_encryption8_nonce} =
  [@inline_let]
  let l = [
    u8 0xbf; u8 0xf5; u8 0x14; u8 0x6f; u8 0xc8;
    u8 0x88; u8 0x4e; u8 0xff; u8 0xa1; u8 0xf0;
    u8 0xa4; u8 0x31;
  ] in
  assert_norm(List.Tot.length l == size_test60_encryption8_nonce);
  l
let test60_encryption8_nonce : lbytes size_test60_encryption8_nonce = createL test60_encryption8_nonce_list

// generated: "4265617574792069732074727574682c20747275746820626561757479"
inline_for_extraction
let size_test60_encryption8_plaintext: size_nat = 29
let test60_encryption8_plaintext_list : l:list uint8{List.Tot.length l == size_test60_encryption8_plaintext} =
  [@inline_let]
  let l = [
    u8 0x42; u8 0x65; u8 0x61; u8 0x75; u8 0x74;
    u8 0x79; u8 0x20; u8 0x69; u8 0x73; u8 0x20;
    u8 0x74; u8 0x72; u8 0x75; u8 0x74; u8 0x68;
    u8 0x2c; u8 0x20; u8 0x74; u8 0x72; u8 0x75;
    u8 0x74; u8 0x68; u8 0x20; u8 0x62; u8 0x65;
    u8 0x61; u8 0x75; u8 0x74; u8 0x79;
  ] in
  assert_norm(List.Tot.length l == size_test60_encryption8_plaintext);
  l
let test60_encryption8_plaintext : lbytes size_test60_encryption8_plaintext = createL test60_encryption8_plaintext_list

// generated: "436f756e742d39"
inline_for_extraction
let size_test60_encryption9_aad: size_nat = 7
let test60_encryption9_aad_list : l:list uint8{List.Tot.length l == size_test60_encryption9_aad} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x75; u8 0x6e; u8 0x74;
    u8 0x2d; u8 0x39;
  ] in
  assert_norm(List.Tot.length l == size_test60_encryption9_aad);
  l
let test60_encryption9_aad : lbytes size_test60_encryption9_aad = createL test60_encryption9_aad_list

// generated: "8c9bf8f7673b80b484cf6d72e6f9d2734a2373769ad8f81fb43f894805b3d5b7911e0356b3bd1bcca577a5a167"
inline_for_extraction
let size_test60_encryption9_ciphertext: size_nat = 45
let test60_encryption9_ciphertext_list : l:list uint8{List.Tot.length l == size_test60_encryption9_ciphertext} =
  [@inline_let]
  let l = [
    u8 0x8c; u8 0x9b; u8 0xf8; u8 0xf7; u8 0x67;
    u8 0x3b; u8 0x80; u8 0xb4; u8 0x84; u8 0xcf;
    u8 0x6d; u8 0x72; u8 0xe6; u8 0xf9; u8 0xd2;
    u8 0x73; u8 0x4a; u8 0x23; u8 0x73; u8 0x76;
    u8 0x9a; u8 0xd8; u8 0xf8; u8 0x1f; u8 0xb4;
    u8 0x3f; u8 0x89; u8 0x48; u8 0x05; u8 0xb3;
    u8 0xd5; u8 0xb7; u8 0x91; u8 0x1e; u8 0x03;
    u8 0x56; u8 0xb3; u8 0xbd; u8 0x1b; u8 0xcc;
    u8 0xa5; u8 0x77; u8 0xa5; u8 0xa1; u8 0x67;
  ] in
  assert_norm(List.Tot.length l == size_test60_encryption9_ciphertext);
  l
let test60_encryption9_ciphertext : lbytes size_test60_encryption9_ciphertext = createL test60_encryption9_ciphertext_list

// generated: "bff5146fc8884effa1f0a430"
inline_for_extraction
let size_test60_encryption9_nonce: size_nat = 12
let test60_encryption9_nonce_list : l:list uint8{List.Tot.length l == size_test60_encryption9_nonce} =
  [@inline_let]
  let l = [
    u8 0xbf; u8 0xf5; u8 0x14; u8 0x6f; u8 0xc8;
    u8 0x88; u8 0x4e; u8 0xff; u8 0xa1; u8 0xf0;
    u8 0xa4; u8 0x30;
  ] in
  assert_norm(List.Tot.length l == size_test60_encryption9_nonce);
  l
let test60_encryption9_nonce : lbytes size_test60_encryption9_nonce = createL test60_encryption9_nonce_list

// generated: "4265617574792069732074727574682c20747275746820626561757479"
inline_for_extraction
let size_test60_encryption9_plaintext: size_nat = 29
let test60_encryption9_plaintext_list : l:list uint8{List.Tot.length l == size_test60_encryption9_plaintext} =
  [@inline_let]
  let l = [
    u8 0x42; u8 0x65; u8 0x61; u8 0x75; u8 0x74;
    u8 0x79; u8 0x20; u8 0x69; u8 0x73; u8 0x20;
    u8 0x74; u8 0x72; u8 0x75; u8 0x74; u8 0x68;
    u8 0x2c; u8 0x20; u8 0x74; u8 0x72; u8 0x75;
    u8 0x74; u8 0x68; u8 0x20; u8 0x62; u8 0x65;
    u8 0x61; u8 0x75; u8 0x74; u8 0x79;
  ] in
  assert_norm(List.Tot.length l == size_test60_encryption9_plaintext);
  l
let test60_encryption9_plaintext : lbytes size_test60_encryption9_plaintext = createL test60_encryption9_plaintext_list

// generated: "436f6e746578742d30"
inline_for_extraction
let size_test60_export0_exportContext: size_nat = 9
let test60_export0_exportContext_list : l:list uint8{List.Tot.length l == size_test60_export0_exportContext} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x6e; u8 0x74; u8 0x65;
    u8 0x78; u8 0x74; u8 0x2d; u8 0x30;
  ] in
  assert_norm(List.Tot.length l == size_test60_export0_exportContext);
  l
let test60_export0_exportContext : lbytes size_test60_export0_exportContext = createL test60_export0_exportContext_list

// generated: "2fd72b9312dfa9078e1e34e3e41a671858366ed0e6c8cf7b5a1ea97d3641ebbd"
inline_for_extraction
let size_test60_export0_exportValue: size_nat = 32
let test60_export0_exportValue_list : l:list uint8{List.Tot.length l == size_test60_export0_exportValue} =
  [@inline_let]
  let l = [
    u8 0x2f; u8 0xd7; u8 0x2b; u8 0x93; u8 0x12;
    u8 0xdf; u8 0xa9; u8 0x07; u8 0x8e; u8 0x1e;
    u8 0x34; u8 0xe3; u8 0xe4; u8 0x1a; u8 0x67;
    u8 0x18; u8 0x58; u8 0x36; u8 0x6e; u8 0xd0;
    u8 0xe6; u8 0xc8; u8 0xcf; u8 0x7b; u8 0x5a;
    u8 0x1e; u8 0xa9; u8 0x7d; u8 0x36; u8 0x41;
    u8 0xeb; u8 0xbd;
  ] in
  assert_norm(List.Tot.length l == size_test60_export0_exportValue);
  l
let test60_export0_exportValue : lbytes size_test60_export0_exportValue = createL test60_export0_exportValue_list

let test60_export0_len:size_nat = 32
// generated: "436f6e746578742d31"
inline_for_extraction
let size_test60_export1_exportContext: size_nat = 9
let test60_export1_exportContext_list : l:list uint8{List.Tot.length l == size_test60_export1_exportContext} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x6e; u8 0x74; u8 0x65;
    u8 0x78; u8 0x74; u8 0x2d; u8 0x31;
  ] in
  assert_norm(List.Tot.length l == size_test60_export1_exportContext);
  l
let test60_export1_exportContext : lbytes size_test60_export1_exportContext = createL test60_export1_exportContext_list

// generated: "9b4ed9291567be46e9748042f5bc13e39b4b1ef1471b4692b7e303691744b691"
inline_for_extraction
let size_test60_export1_exportValue: size_nat = 32
let test60_export1_exportValue_list : l:list uint8{List.Tot.length l == size_test60_export1_exportValue} =
  [@inline_let]
  let l = [
    u8 0x9b; u8 0x4e; u8 0xd9; u8 0x29; u8 0x15;
    u8 0x67; u8 0xbe; u8 0x46; u8 0xe9; u8 0x74;
    u8 0x80; u8 0x42; u8 0xf5; u8 0xbc; u8 0x13;
    u8 0xe3; u8 0x9b; u8 0x4b; u8 0x1e; u8 0xf1;
    u8 0x47; u8 0x1b; u8 0x46; u8 0x92; u8 0xb7;
    u8 0xe3; u8 0x03; u8 0x69; u8 0x17; u8 0x44;
    u8 0xb6; u8 0x91;
  ] in
  assert_norm(List.Tot.length l == size_test60_export1_exportValue);
  l
let test60_export1_exportValue : lbytes size_test60_export1_exportValue = createL test60_export1_exportValue_list

let test60_export1_len:size_nat = 32
// generated: "436f6e746578742d32"
inline_for_extraction
let size_test60_export2_exportContext: size_nat = 9
let test60_export2_exportContext_list : l:list uint8{List.Tot.length l == size_test60_export2_exportContext} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x6e; u8 0x74; u8 0x65;
    u8 0x78; u8 0x74; u8 0x2d; u8 0x32;
  ] in
  assert_norm(List.Tot.length l == size_test60_export2_exportContext);
  l
let test60_export2_exportContext : lbytes size_test60_export2_exportContext = createL test60_export2_exportContext_list

// generated: "1b3793b1ac2f5cdd0bf9da101c7980a51fc902eaa84d064623895de28d24eb36"
inline_for_extraction
let size_test60_export2_exportValue: size_nat = 32
let test60_export2_exportValue_list : l:list uint8{List.Tot.length l == size_test60_export2_exportValue} =
  [@inline_let]
  let l = [
    u8 0x1b; u8 0x37; u8 0x93; u8 0xb1; u8 0xac;
    u8 0x2f; u8 0x5c; u8 0xdd; u8 0x0b; u8 0xf9;
    u8 0xda; u8 0x10; u8 0x1c; u8 0x79; u8 0x80;
    u8 0xa5; u8 0x1f; u8 0xc9; u8 0x02; u8 0xea;
    u8 0xa8; u8 0x4d; u8 0x06; u8 0x46; u8 0x23;
    u8 0x89; u8 0x5d; u8 0xe2; u8 0x8d; u8 0x24;
    u8 0xeb; u8 0x36;
  ] in
  assert_norm(List.Tot.length l == size_test60_export2_exportValue);
  l
let test60_export2_exportValue : lbytes size_test60_export2_exportValue = createL test60_export2_exportValue_list

let test60_export2_len:size_nat = 32
// generated: "436f6e746578742d33"
inline_for_extraction
let size_test60_export3_exportContext: size_nat = 9
let test60_export3_exportContext_list : l:list uint8{List.Tot.length l == size_test60_export3_exportContext} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x6e; u8 0x74; u8 0x65;
    u8 0x78; u8 0x74; u8 0x2d; u8 0x33;
  ] in
  assert_norm(List.Tot.length l == size_test60_export3_exportContext);
  l
let test60_export3_exportContext : lbytes size_test60_export3_exportContext = createL test60_export3_exportContext_list

// generated: "82690da3e3c802e613566e17df25be8abded608be2da9e23881dab7d69a8fc62"
inline_for_extraction
let size_test60_export3_exportValue: size_nat = 32
let test60_export3_exportValue_list : l:list uint8{List.Tot.length l == size_test60_export3_exportValue} =
  [@inline_let]
  let l = [
    u8 0x82; u8 0x69; u8 0x0d; u8 0xa3; u8 0xe3;
    u8 0xc8; u8 0x02; u8 0xe6; u8 0x13; u8 0x56;
    u8 0x6e; u8 0x17; u8 0xdf; u8 0x25; u8 0xbe;
    u8 0x8a; u8 0xbd; u8 0xed; u8 0x60; u8 0x8b;
    u8 0xe2; u8 0xda; u8 0x9e; u8 0x23; u8 0x88;
    u8 0x1d; u8 0xab; u8 0x7d; u8 0x69; u8 0xa8;
    u8 0xfc; u8 0x62;
  ] in
  assert_norm(List.Tot.length l == size_test60_export3_exportValue);
  l
let test60_export3_exportValue : lbytes size_test60_export3_exportValue = createL test60_export3_exportValue_list

let test60_export3_len:size_nat = 32
// generated: "436f6e746578742d34"
inline_for_extraction
let size_test60_export4_exportContext: size_nat = 9
let test60_export4_exportContext_list : l:list uint8{List.Tot.length l == size_test60_export4_exportContext} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x6e; u8 0x74; u8 0x65;
    u8 0x78; u8 0x74; u8 0x2d; u8 0x34;
  ] in
  assert_norm(List.Tot.length l == size_test60_export4_exportContext);
  l
let test60_export4_exportContext : lbytes size_test60_export4_exportContext = createL test60_export4_exportContext_list

// generated: "cbf8ae80ea0d5313e1582865a875da971538f669e5b58ce7da75b7fb42e9d213"
inline_for_extraction
let size_test60_export4_exportValue: size_nat = 32
let test60_export4_exportValue_list : l:list uint8{List.Tot.length l == size_test60_export4_exportValue} =
  [@inline_let]
  let l = [
    u8 0xcb; u8 0xf8; u8 0xae; u8 0x80; u8 0xea;
    u8 0x0d; u8 0x53; u8 0x13; u8 0xe1; u8 0x58;
    u8 0x28; u8 0x65; u8 0xa8; u8 0x75; u8 0xda;
    u8 0x97; u8 0x15; u8 0x38; u8 0xf6; u8 0x69;
    u8 0xe5; u8 0xb5; u8 0x8c; u8 0xe7; u8 0xda;
    u8 0x75; u8 0xb7; u8 0xfb; u8 0x42; u8 0xe9;
    u8 0xd2; u8 0x13;
  ] in
  assert_norm(List.Tot.length l == size_test60_export4_exportValue);
  l
let test60_export4_exportValue : lbytes size_test60_export4_exportValue = createL test60_export4_exportValue_list

let test60_export4_len:size_nat = 32

let test60 () =
  let res = test_setupBase test60_ciphersuite test60_skEm test60_pkEm test60_skRm test60_pkRm test60_info test60_enc test60_zz test60_key_schedule_context test60_secret test60_key test60_nonce test60_exporterSecret test60_encryption0_nonce test60_encryption1_nonce in
  let seq0:HPKE.seq_aead_s test60_ciphersuite = 0 in
  let enc_res0 = test_encryption test60_ciphersuite test60_key test60_nonce test60_exporterSecret test60_encryption0_aad test60_encryption0_plaintext seq0 test60_encryption0_ciphertext test60_encryption0_nonce in

  assert_norm (1 < pow2 (8 * 12));
  let seq1:HPKE.seq_aead_s test60_ciphersuite = (seq0 + 1) in
  let enc_res1 = test_encryption test60_ciphersuite test60_key test60_nonce test60_exporterSecret test60_encryption1_aad test60_encryption1_plaintext seq1 test60_encryption1_ciphertext test60_encryption1_nonce in

  assert_norm (2 < pow2 (8 * 12));
  let seq2:HPKE.seq_aead_s test60_ciphersuite = (seq1 + 1) in
  let enc_res2 = test_encryption test60_ciphersuite test60_key test60_nonce test60_exporterSecret test60_encryption2_aad test60_encryption2_plaintext 2 test60_encryption2_ciphertext test60_encryption2_nonce in

  assert_norm (3 < pow2 (8 * 12));
  let seq3:HPKE.seq_aead_s test60_ciphersuite = (seq2 + 1) in
  let enc_res3 = test_encryption test60_ciphersuite test60_key test60_nonce test60_exporterSecret test60_encryption3_aad test60_encryption3_plaintext 3 test60_encryption3_ciphertext test60_encryption3_nonce in

  assert_norm (4 < pow2 (8 * 12));
  let seq4:HPKE.seq_aead_s test60_ciphersuite = (seq3 + 1) in
  let enc_res4 = test_encryption test60_ciphersuite test60_key test60_nonce test60_exporterSecret test60_encryption4_aad test60_encryption4_plaintext 4 test60_encryption4_ciphertext test60_encryption4_nonce in

  assert_norm (5 < pow2 (8 * 12));
  let seq5:HPKE.seq_aead_s test60_ciphersuite = (seq4 + 1) in
  let enc_res5 = test_encryption test60_ciphersuite test60_key test60_nonce test60_exporterSecret test60_encryption5_aad test60_encryption5_plaintext 5 test60_encryption5_ciphertext test60_encryption5_nonce in

  assert_norm (6 < pow2 (8 * 12));
  let seq6:HPKE.seq_aead_s test60_ciphersuite = (seq5 + 1) in
  let enc_res6 = test_encryption test60_ciphersuite test60_key test60_nonce test60_exporterSecret test60_encryption6_aad test60_encryption6_plaintext 6 test60_encryption6_ciphertext test60_encryption6_nonce in

  assert_norm (7 < pow2 (8 * 12));
  let seq7:HPKE.seq_aead_s test60_ciphersuite = (seq6 + 1) in
  let enc_res7 = test_encryption test60_ciphersuite test60_key test60_nonce test60_exporterSecret test60_encryption7_aad test60_encryption7_plaintext 7 test60_encryption7_ciphertext test60_encryption7_nonce in

  assert_norm (8 < pow2 (8 * 12));
  let seq8:HPKE.seq_aead_s test60_ciphersuite = (seq7 + 1) in
  let enc_res8 = test_encryption test60_ciphersuite test60_key test60_nonce test60_exporterSecret test60_encryption8_aad test60_encryption8_plaintext 8 test60_encryption8_ciphertext test60_encryption8_nonce in

  assert_norm (9 < pow2 (8 * 12));
  let seq9:HPKE.seq_aead_s test60_ciphersuite = (seq8 + 1) in
  let enc_res9 = test_encryption test60_ciphersuite test60_key test60_nonce test60_exporterSecret test60_encryption9_aad test60_encryption9_plaintext 9 test60_encryption9_ciphertext test60_encryption9_nonce in

  let exp_res0 = test_export test60_ciphersuite test60_key test60_nonce test60_exporterSecret test60_export0_exportContext test60_export0_len test60_export0_exportValue in

  let exp_res1 = test_export test60_ciphersuite test60_key test60_nonce test60_exporterSecret test60_export1_exportContext test60_export1_len test60_export1_exportValue in

  let exp_res2 = test_export test60_ciphersuite test60_key test60_nonce test60_exporterSecret test60_export2_exportContext test60_export2_len test60_export2_exportValue in

  let exp_res3 = test_export test60_ciphersuite test60_key test60_nonce test60_exporterSecret test60_export3_exportContext test60_export3_len test60_export3_exportValue in

  let exp_res4 = test_export test60_ciphersuite test60_key test60_nonce test60_exporterSecret test60_export4_exportContext test60_export4_len test60_export4_exportValue in

  enc_res0 && enc_res1 && enc_res2 && enc_res3 && enc_res4 && enc_res5 && enc_res6 && enc_res7 && enc_res8 && enc_res9 && res && exp_res0 && exp_res1 && exp_res2 && exp_res3 && exp_res4


// Skipped unsupported test case 61

// Skipped unsupported test case 62

// Skipped unsupported test case 63

// Skipped unsupported test case 64

// Skipped unsupported test case 65

let test66_mode: HPKE.mode = HPKE.Base
let test66_ciphersuite = DH.DH_P256, Hash.SHA2_256, AEAD.AES256_GCM, Hash.SHA2_512

// generated: "4f6465206f6e2061204772656369616e2055726e"
inline_for_extraction
let size_test66_info: size_nat = 20
let test66_info_list : l:list uint8{List.Tot.length l == size_test66_info} =
  [@inline_let]
  let l = [
    u8 0x4f; u8 0x64; u8 0x65; u8 0x20; u8 0x6f;
    u8 0x6e; u8 0x20; u8 0x61; u8 0x20; u8 0x47;
    u8 0x72; u8 0x65; u8 0x63; u8 0x69; u8 0x61;
    u8 0x6e; u8 0x20; u8 0x55; u8 0x72; u8 0x6e;
  ] in
  assert_norm(List.Tot.length l == size_test66_info);
  l
let test66_info : lbytes size_test66_info = createL test66_info_list

// generated: "3d96e36106940e16f562ce13693f2f21cb31f77ddb9d06eeb1076d75dc265467"
inline_for_extraction
let size_test66_skRm: size_nat = 32
let test66_skRm_list : l:list uint8{List.Tot.length l == size_test66_skRm} =
  [@inline_let]
  let l = [
    u8 0x3d; u8 0x96; u8 0xe3; u8 0x61; u8 0x06;
    u8 0x94; u8 0x0e; u8 0x16; u8 0xf5; u8 0x62;
    u8 0xce; u8 0x13; u8 0x69; u8 0x3f; u8 0x2f;
    u8 0x21; u8 0xcb; u8 0x31; u8 0xf7; u8 0x7d;
    u8 0xdb; u8 0x9d; u8 0x06; u8 0xee; u8 0xb1;
    u8 0x07; u8 0x6d; u8 0x75; u8 0xdc; u8 0x26;
    u8 0x54; u8 0x67;
  ] in
  assert_norm(List.Tot.length l == size_test66_skRm);
  l
let test66_skRm : lbytes size_test66_skRm = createL test66_skRm_list

// generated: "2395df4d7be8ba7a616513231839af87b866d067ca67bfa09dd123032b6051b2"
inline_for_extraction
let size_test66_skEm: size_nat = 32
let test66_skEm_list : l:list uint8{List.Tot.length l == size_test66_skEm} =
  [@inline_let]
  let l = [
    u8 0x23; u8 0x95; u8 0xdf; u8 0x4d; u8 0x7b;
    u8 0xe8; u8 0xba; u8 0x7a; u8 0x61; u8 0x65;
    u8 0x13; u8 0x23; u8 0x18; u8 0x39; u8 0xaf;
    u8 0x87; u8 0xb8; u8 0x66; u8 0xd0; u8 0x67;
    u8 0xca; u8 0x67; u8 0xbf; u8 0xa0; u8 0x9d;
    u8 0xd1; u8 0x23; u8 0x03; u8 0x2b; u8 0x60;
    u8 0x51; u8 0xb2;
  ] in
  assert_norm(List.Tot.length l == size_test66_skEm);
  l
let test66_skEm : lbytes size_test66_skEm = createL test66_skEm_list

// generated: "04aaf619271030045d51898cf67b021243d67bb7c75c03c1a31f1f705c76ef4047fff98d54f7cd73cc7a95f657c05d4ac7115dc8a80ce3b5a2311c7c369e8d1ff3"
inline_for_extraction
let size_test66_pkRm: size_nat = 65
let test66_pkRm_list : l:list uint8{List.Tot.length l == size_test66_pkRm} =
  [@inline_let]
  let l = [
    u8 0x04; u8 0xaa; u8 0xf6; u8 0x19; u8 0x27;
    u8 0x10; u8 0x30; u8 0x04; u8 0x5d; u8 0x51;
    u8 0x89; u8 0x8c; u8 0xf6; u8 0x7b; u8 0x02;
    u8 0x12; u8 0x43; u8 0xd6; u8 0x7b; u8 0xb7;
    u8 0xc7; u8 0x5c; u8 0x03; u8 0xc1; u8 0xa3;
    u8 0x1f; u8 0x1f; u8 0x70; u8 0x5c; u8 0x76;
    u8 0xef; u8 0x40; u8 0x47; u8 0xff; u8 0xf9;
    u8 0x8d; u8 0x54; u8 0xf7; u8 0xcd; u8 0x73;
    u8 0xcc; u8 0x7a; u8 0x95; u8 0xf6; u8 0x57;
    u8 0xc0; u8 0x5d; u8 0x4a; u8 0xc7; u8 0x11;
    u8 0x5d; u8 0xc8; u8 0xa8; u8 0x0c; u8 0xe3;
    u8 0xb5; u8 0xa2; u8 0x31; u8 0x1c; u8 0x7c;
    u8 0x36; u8 0x9e; u8 0x8d; u8 0x1f; u8 0xf3;
  ] in
  assert_norm(List.Tot.length l == size_test66_pkRm);
  l
let test66_pkRm : lbytes size_test66_pkRm = createL test66_pkRm_list

// generated: "04c59f3b7fbd57d653b16aa9aa2ee162a58a57461d77ad1fa5dc759ef18cf0f51653006c10d754e1c618ccb9a1c7d3dea098aa27ab0bd8ba57b73dd137773b5cd2"
inline_for_extraction
let size_test66_pkEm: size_nat = 65
let test66_pkEm_list : l:list uint8{List.Tot.length l == size_test66_pkEm} =
  [@inline_let]
  let l = [
    u8 0x04; u8 0xc5; u8 0x9f; u8 0x3b; u8 0x7f;
    u8 0xbd; u8 0x57; u8 0xd6; u8 0x53; u8 0xb1;
    u8 0x6a; u8 0xa9; u8 0xaa; u8 0x2e; u8 0xe1;
    u8 0x62; u8 0xa5; u8 0x8a; u8 0x57; u8 0x46;
    u8 0x1d; u8 0x77; u8 0xad; u8 0x1f; u8 0xa5;
    u8 0xdc; u8 0x75; u8 0x9e; u8 0xf1; u8 0x8c;
    u8 0xf0; u8 0xf5; u8 0x16; u8 0x53; u8 0x00;
    u8 0x6c; u8 0x10; u8 0xd7; u8 0x54; u8 0xe1;
    u8 0xc6; u8 0x18; u8 0xcc; u8 0xb9; u8 0xa1;
    u8 0xc7; u8 0xd3; u8 0xde; u8 0xa0; u8 0x98;
    u8 0xaa; u8 0x27; u8 0xab; u8 0x0b; u8 0xd8;
    u8 0xba; u8 0x57; u8 0xb7; u8 0x3d; u8 0xd1;
    u8 0x37; u8 0x77; u8 0x3b; u8 0x5c; u8 0xd2;
  ] in
  assert_norm(List.Tot.length l == size_test66_pkEm);
  l
let test66_pkEm : lbytes size_test66_pkEm = createL test66_pkEm_list

// generated: "04c59f3b7fbd57d653b16aa9aa2ee162a58a57461d77ad1fa5dc759ef18cf0f51653006c10d754e1c618ccb9a1c7d3dea098aa27ab0bd8ba57b73dd137773b5cd2"
inline_for_extraction
let size_test66_enc: size_nat = 65
let test66_enc_list : l:list uint8{List.Tot.length l == size_test66_enc} =
  [@inline_let]
  let l = [
    u8 0x04; u8 0xc5; u8 0x9f; u8 0x3b; u8 0x7f;
    u8 0xbd; u8 0x57; u8 0xd6; u8 0x53; u8 0xb1;
    u8 0x6a; u8 0xa9; u8 0xaa; u8 0x2e; u8 0xe1;
    u8 0x62; u8 0xa5; u8 0x8a; u8 0x57; u8 0x46;
    u8 0x1d; u8 0x77; u8 0xad; u8 0x1f; u8 0xa5;
    u8 0xdc; u8 0x75; u8 0x9e; u8 0xf1; u8 0x8c;
    u8 0xf0; u8 0xf5; u8 0x16; u8 0x53; u8 0x00;
    u8 0x6c; u8 0x10; u8 0xd7; u8 0x54; u8 0xe1;
    u8 0xc6; u8 0x18; u8 0xcc; u8 0xb9; u8 0xa1;
    u8 0xc7; u8 0xd3; u8 0xde; u8 0xa0; u8 0x98;
    u8 0xaa; u8 0x27; u8 0xab; u8 0x0b; u8 0xd8;
    u8 0xba; u8 0x57; u8 0xb7; u8 0x3d; u8 0xd1;
    u8 0x37; u8 0x77; u8 0x3b; u8 0x5c; u8 0xd2;
  ] in
  assert_norm(List.Tot.length l == size_test66_enc);
  l
let test66_enc : lbytes size_test66_enc = createL test66_enc_list

// generated: "2a3e1b38103b371d1901235da095473e494a9cba0fc31fc276e97a1e103aa93f"
inline_for_extraction
let size_test66_zz: size_nat = 32
let test66_zz_list : l:list uint8{List.Tot.length l == size_test66_zz} =
  [@inline_let]
  let l = [
    u8 0x2a; u8 0x3e; u8 0x1b; u8 0x38; u8 0x10;
    u8 0x3b; u8 0x37; u8 0x1d; u8 0x19; u8 0x01;
    u8 0x23; u8 0x5d; u8 0xa0; u8 0x95; u8 0x47;
    u8 0x3e; u8 0x49; u8 0x4a; u8 0x9c; u8 0xba;
    u8 0x0f; u8 0xc3; u8 0x1f; u8 0xc2; u8 0x76;
    u8 0xe9; u8 0x7a; u8 0x1e; u8 0x10; u8 0x3a;
    u8 0xa9; u8 0x3f;
  ] in
  assert_norm(List.Tot.length l == size_test66_zz);
  l
let test66_zz : lbytes size_test66_zz = createL test66_zz_list

// generated: "001000030002008ca13b5d680259cfa265de13dd24f257083c9403c01a8aa3320b9195c8d1d812a58e72ff3dd3cf71dc81b21c354f84e9ca6863d5fd871711e356ed9bf5f1e0d0c70a83df9dcea90e894cbfd709dabe93b3390a8e9c5a18498a1ff32414767a12c08bf4d4df6cf9d953da725b79d07454eb69bd002235f35a241dec5f1088177c"
inline_for_extraction
let size_test66_key_schedule_context: size_nat = 135
let test66_key_schedule_context_list : l:list uint8{List.Tot.length l == size_test66_key_schedule_context} =
  [@inline_let]
  let l = [
    u8 0x00; u8 0x10; u8 0x00; u8 0x03; u8 0x00;
    u8 0x02; u8 0x00; u8 0x8c; u8 0xa1; u8 0x3b;
    u8 0x5d; u8 0x68; u8 0x02; u8 0x59; u8 0xcf;
    u8 0xa2; u8 0x65; u8 0xde; u8 0x13; u8 0xdd;
    u8 0x24; u8 0xf2; u8 0x57; u8 0x08; u8 0x3c;
    u8 0x94; u8 0x03; u8 0xc0; u8 0x1a; u8 0x8a;
    u8 0xa3; u8 0x32; u8 0x0b; u8 0x91; u8 0x95;
    u8 0xc8; u8 0xd1; u8 0xd8; u8 0x12; u8 0xa5;
    u8 0x8e; u8 0x72; u8 0xff; u8 0x3d; u8 0xd3;
    u8 0xcf; u8 0x71; u8 0xdc; u8 0x81; u8 0xb2;
    u8 0x1c; u8 0x35; u8 0x4f; u8 0x84; u8 0xe9;
    u8 0xca; u8 0x68; u8 0x63; u8 0xd5; u8 0xfd;
    u8 0x87; u8 0x17; u8 0x11; u8 0xe3; u8 0x56;
    u8 0xed; u8 0x9b; u8 0xf5; u8 0xf1; u8 0xe0;
    u8 0xd0; u8 0xc7; u8 0x0a; u8 0x83; u8 0xdf;
    u8 0x9d; u8 0xce; u8 0xa9; u8 0x0e; u8 0x89;
    u8 0x4c; u8 0xbf; u8 0xd7; u8 0x09; u8 0xda;
    u8 0xbe; u8 0x93; u8 0xb3; u8 0x39; u8 0x0a;
    u8 0x8e; u8 0x9c; u8 0x5a; u8 0x18; u8 0x49;
    u8 0x8a; u8 0x1f; u8 0xf3; u8 0x24; u8 0x14;
    u8 0x76; u8 0x7a; u8 0x12; u8 0xc0; u8 0x8b;
    u8 0xf4; u8 0xd4; u8 0xdf; u8 0x6c; u8 0xf9;
    u8 0xd9; u8 0x53; u8 0xda; u8 0x72; u8 0x5b;
    u8 0x79; u8 0xd0; u8 0x74; u8 0x54; u8 0xeb;
    u8 0x69; u8 0xbd; u8 0x00; u8 0x22; u8 0x35;
    u8 0xf3; u8 0x5a; u8 0x24; u8 0x1d; u8 0xec;
    u8 0x5f; u8 0x10; u8 0x88; u8 0x17; u8 0x7c;
  ] in
  assert_norm(List.Tot.length l == size_test66_key_schedule_context);
  l
let test66_key_schedule_context : lbytes size_test66_key_schedule_context = createL test66_key_schedule_context_list

// generated: "aa1ed5f99a1400d503ce6f84a51a288e1724824f0e49fc04e06c7e678646d974eb66ae86d4a2a652c80be8f06779140b5ead81688594b027d3b89aedcc7783dd"
inline_for_extraction
let size_test66_secret: size_nat = 64
let test66_secret_list : l:list uint8{List.Tot.length l == size_test66_secret} =
  [@inline_let]
  let l = [
    u8 0xaa; u8 0x1e; u8 0xd5; u8 0xf9; u8 0x9a;
    u8 0x14; u8 0x00; u8 0xd5; u8 0x03; u8 0xce;
    u8 0x6f; u8 0x84; u8 0xa5; u8 0x1a; u8 0x28;
    u8 0x8e; u8 0x17; u8 0x24; u8 0x82; u8 0x4f;
    u8 0x0e; u8 0x49; u8 0xfc; u8 0x04; u8 0xe0;
    u8 0x6c; u8 0x7e; u8 0x67; u8 0x86; u8 0x46;
    u8 0xd9; u8 0x74; u8 0xeb; u8 0x66; u8 0xae;
    u8 0x86; u8 0xd4; u8 0xa2; u8 0xa6; u8 0x52;
    u8 0xc8; u8 0x0b; u8 0xe8; u8 0xf0; u8 0x67;
    u8 0x79; u8 0x14; u8 0x0b; u8 0x5e; u8 0xad;
    u8 0x81; u8 0x68; u8 0x85; u8 0x94; u8 0xb0;
    u8 0x27; u8 0xd3; u8 0xb8; u8 0x9a; u8 0xed;
    u8 0xcc; u8 0x77; u8 0x83; u8 0xdd;
  ] in
  assert_norm(List.Tot.length l == size_test66_secret);
  l
let test66_secret : lbytes size_test66_secret = createL test66_secret_list

// generated: "5f8ddea375d1ecf44f7724f6be0f6386f7d39d0e677e73bf9b7ff071840cac7b"
inline_for_extraction
let size_test66_key: size_nat = 32
let test66_key_list : l:list uint8{List.Tot.length l == size_test66_key} =
  [@inline_let]
  let l = [
    u8 0x5f; u8 0x8d; u8 0xde; u8 0xa3; u8 0x75;
    u8 0xd1; u8 0xec; u8 0xf4; u8 0x4f; u8 0x77;
    u8 0x24; u8 0xf6; u8 0xbe; u8 0x0f; u8 0x63;
    u8 0x86; u8 0xf7; u8 0xd3; u8 0x9d; u8 0x0e;
    u8 0x67; u8 0x7e; u8 0x73; u8 0xbf; u8 0x9b;
    u8 0x7f; u8 0xf0; u8 0x71; u8 0x84; u8 0x0c;
    u8 0xac; u8 0x7b;
  ] in
  assert_norm(List.Tot.length l == size_test66_key);
  l
let test66_key : lbytes size_test66_key = createL test66_key_list

// generated: "96a0746033c536f88e476207"
inline_for_extraction
let size_test66_nonce: size_nat = 12
let test66_nonce_list : l:list uint8{List.Tot.length l == size_test66_nonce} =
  [@inline_let]
  let l = [
    u8 0x96; u8 0xa0; u8 0x74; u8 0x60; u8 0x33;
    u8 0xc5; u8 0x36; u8 0xf8; u8 0x8e; u8 0x47;
    u8 0x62; u8 0x07;
  ] in
  assert_norm(List.Tot.length l == size_test66_nonce);
  l
let test66_nonce : lbytes size_test66_nonce = createL test66_nonce_list

// generated: "3c264759daa419e13ec0022aef65cf5f62f8cccae72c0983430b7b29b81653f80f256dec88959783024cee673329e96066a1e51d5f0d67759f4db884d1b33792"
inline_for_extraction
let size_test66_exporterSecret: size_nat = 64
let test66_exporterSecret_list : l:list uint8{List.Tot.length l == size_test66_exporterSecret} =
  [@inline_let]
  let l = [
    u8 0x3c; u8 0x26; u8 0x47; u8 0x59; u8 0xda;
    u8 0xa4; u8 0x19; u8 0xe1; u8 0x3e; u8 0xc0;
    u8 0x02; u8 0x2a; u8 0xef; u8 0x65; u8 0xcf;
    u8 0x5f; u8 0x62; u8 0xf8; u8 0xcc; u8 0xca;
    u8 0xe7; u8 0x2c; u8 0x09; u8 0x83; u8 0x43;
    u8 0x0b; u8 0x7b; u8 0x29; u8 0xb8; u8 0x16;
    u8 0x53; u8 0xf8; u8 0x0f; u8 0x25; u8 0x6d;
    u8 0xec; u8 0x88; u8 0x95; u8 0x97; u8 0x83;
    u8 0x02; u8 0x4c; u8 0xee; u8 0x67; u8 0x33;
    u8 0x29; u8 0xe9; u8 0x60; u8 0x66; u8 0xa1;
    u8 0xe5; u8 0x1d; u8 0x5f; u8 0x0d; u8 0x67;
    u8 0x75; u8 0x9f; u8 0x4d; u8 0xb8; u8 0x84;
    u8 0xd1; u8 0xb3; u8 0x37; u8 0x92;
  ] in
  assert_norm(List.Tot.length l == size_test66_exporterSecret);
  l
let test66_exporterSecret : lbytes size_test66_exporterSecret = createL test66_exporterSecret_list

// generated: "436f756e742d30"
inline_for_extraction
let size_test66_encryption0_aad: size_nat = 7
let test66_encryption0_aad_list : l:list uint8{List.Tot.length l == size_test66_encryption0_aad} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x75; u8 0x6e; u8 0x74;
    u8 0x2d; u8 0x30;
  ] in
  assert_norm(List.Tot.length l == size_test66_encryption0_aad);
  l
let test66_encryption0_aad : lbytes size_test66_encryption0_aad = createL test66_encryption0_aad_list

// generated: "0600c6c58bcfa100360929480f57168a5fee74c28bf28cdbc2a015004fb890bf8fab76ff096d3eb919725eed27"
inline_for_extraction
let size_test66_encryption0_ciphertext: size_nat = 45
let test66_encryption0_ciphertext_list : l:list uint8{List.Tot.length l == size_test66_encryption0_ciphertext} =
  [@inline_let]
  let l = [
    u8 0x06; u8 0x00; u8 0xc6; u8 0xc5; u8 0x8b;
    u8 0xcf; u8 0xa1; u8 0x00; u8 0x36; u8 0x09;
    u8 0x29; u8 0x48; u8 0x0f; u8 0x57; u8 0x16;
    u8 0x8a; u8 0x5f; u8 0xee; u8 0x74; u8 0xc2;
    u8 0x8b; u8 0xf2; u8 0x8c; u8 0xdb; u8 0xc2;
    u8 0xa0; u8 0x15; u8 0x00; u8 0x4f; u8 0xb8;
    u8 0x90; u8 0xbf; u8 0x8f; u8 0xab; u8 0x76;
    u8 0xff; u8 0x09; u8 0x6d; u8 0x3e; u8 0xb9;
    u8 0x19; u8 0x72; u8 0x5e; u8 0xed; u8 0x27;
  ] in
  assert_norm(List.Tot.length l == size_test66_encryption0_ciphertext);
  l
let test66_encryption0_ciphertext : lbytes size_test66_encryption0_ciphertext = createL test66_encryption0_ciphertext_list

// generated: "96a0746033c536f88e476207"
inline_for_extraction
let size_test66_encryption0_nonce: size_nat = 12
let test66_encryption0_nonce_list : l:list uint8{List.Tot.length l == size_test66_encryption0_nonce} =
  [@inline_let]
  let l = [
    u8 0x96; u8 0xa0; u8 0x74; u8 0x60; u8 0x33;
    u8 0xc5; u8 0x36; u8 0xf8; u8 0x8e; u8 0x47;
    u8 0x62; u8 0x07;
  ] in
  assert_norm(List.Tot.length l == size_test66_encryption0_nonce);
  l
let test66_encryption0_nonce : lbytes size_test66_encryption0_nonce = createL test66_encryption0_nonce_list

// generated: "4265617574792069732074727574682c20747275746820626561757479"
inline_for_extraction
let size_test66_encryption0_plaintext: size_nat = 29
let test66_encryption0_plaintext_list : l:list uint8{List.Tot.length l == size_test66_encryption0_plaintext} =
  [@inline_let]
  let l = [
    u8 0x42; u8 0x65; u8 0x61; u8 0x75; u8 0x74;
    u8 0x79; u8 0x20; u8 0x69; u8 0x73; u8 0x20;
    u8 0x74; u8 0x72; u8 0x75; u8 0x74; u8 0x68;
    u8 0x2c; u8 0x20; u8 0x74; u8 0x72; u8 0x75;
    u8 0x74; u8 0x68; u8 0x20; u8 0x62; u8 0x65;
    u8 0x61; u8 0x75; u8 0x74; u8 0x79;
  ] in
  assert_norm(List.Tot.length l == size_test66_encryption0_plaintext);
  l
let test66_encryption0_plaintext : lbytes size_test66_encryption0_plaintext = createL test66_encryption0_plaintext_list

// generated: "436f756e742d31"
inline_for_extraction
let size_test66_encryption1_aad: size_nat = 7
let test66_encryption1_aad_list : l:list uint8{List.Tot.length l == size_test66_encryption1_aad} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x75; u8 0x6e; u8 0x74;
    u8 0x2d; u8 0x31;
  ] in
  assert_norm(List.Tot.length l == size_test66_encryption1_aad);
  l
let test66_encryption1_aad : lbytes size_test66_encryption1_aad = createL test66_encryption1_aad_list

// generated: "070b86e956c77f3ab54af9f0edf6d2230c84fb5b5619ce9e0cf3dd0dcfad4c40b2b85d04aba136fe0125d7f3d5"
inline_for_extraction
let size_test66_encryption1_ciphertext: size_nat = 45
let test66_encryption1_ciphertext_list : l:list uint8{List.Tot.length l == size_test66_encryption1_ciphertext} =
  [@inline_let]
  let l = [
    u8 0x07; u8 0x0b; u8 0x86; u8 0xe9; u8 0x56;
    u8 0xc7; u8 0x7f; u8 0x3a; u8 0xb5; u8 0x4a;
    u8 0xf9; u8 0xf0; u8 0xed; u8 0xf6; u8 0xd2;
    u8 0x23; u8 0x0c; u8 0x84; u8 0xfb; u8 0x5b;
    u8 0x56; u8 0x19; u8 0xce; u8 0x9e; u8 0x0c;
    u8 0xf3; u8 0xdd; u8 0x0d; u8 0xcf; u8 0xad;
    u8 0x4c; u8 0x40; u8 0xb2; u8 0xb8; u8 0x5d;
    u8 0x04; u8 0xab; u8 0xa1; u8 0x36; u8 0xfe;
    u8 0x01; u8 0x25; u8 0xd7; u8 0xf3; u8 0xd5;
  ] in
  assert_norm(List.Tot.length l == size_test66_encryption1_ciphertext);
  l
let test66_encryption1_ciphertext : lbytes size_test66_encryption1_ciphertext = createL test66_encryption1_ciphertext_list

// generated: "96a0746033c536f88e476206"
inline_for_extraction
let size_test66_encryption1_nonce: size_nat = 12
let test66_encryption1_nonce_list : l:list uint8{List.Tot.length l == size_test66_encryption1_nonce} =
  [@inline_let]
  let l = [
    u8 0x96; u8 0xa0; u8 0x74; u8 0x60; u8 0x33;
    u8 0xc5; u8 0x36; u8 0xf8; u8 0x8e; u8 0x47;
    u8 0x62; u8 0x06;
  ] in
  assert_norm(List.Tot.length l == size_test66_encryption1_nonce);
  l
let test66_encryption1_nonce : lbytes size_test66_encryption1_nonce = createL test66_encryption1_nonce_list

// generated: "4265617574792069732074727574682c20747275746820626561757479"
inline_for_extraction
let size_test66_encryption1_plaintext: size_nat = 29
let test66_encryption1_plaintext_list : l:list uint8{List.Tot.length l == size_test66_encryption1_plaintext} =
  [@inline_let]
  let l = [
    u8 0x42; u8 0x65; u8 0x61; u8 0x75; u8 0x74;
    u8 0x79; u8 0x20; u8 0x69; u8 0x73; u8 0x20;
    u8 0x74; u8 0x72; u8 0x75; u8 0x74; u8 0x68;
    u8 0x2c; u8 0x20; u8 0x74; u8 0x72; u8 0x75;
    u8 0x74; u8 0x68; u8 0x20; u8 0x62; u8 0x65;
    u8 0x61; u8 0x75; u8 0x74; u8 0x79;
  ] in
  assert_norm(List.Tot.length l == size_test66_encryption1_plaintext);
  l
let test66_encryption1_plaintext : lbytes size_test66_encryption1_plaintext = createL test66_encryption1_plaintext_list

// generated: "436f756e742d32"
inline_for_extraction
let size_test66_encryption2_aad: size_nat = 7
let test66_encryption2_aad_list : l:list uint8{List.Tot.length l == size_test66_encryption2_aad} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x75; u8 0x6e; u8 0x74;
    u8 0x2d; u8 0x32;
  ] in
  assert_norm(List.Tot.length l == size_test66_encryption2_aad);
  l
let test66_encryption2_aad : lbytes size_test66_encryption2_aad = createL test66_encryption2_aad_list

// generated: "581158567778f2abf7ba2b5722478e40e812868fc2539c69e47c9679d3335e974bb2cef40e63b9eec0f3a7e7ff"
inline_for_extraction
let size_test66_encryption2_ciphertext: size_nat = 45
let test66_encryption2_ciphertext_list : l:list uint8{List.Tot.length l == size_test66_encryption2_ciphertext} =
  [@inline_let]
  let l = [
    u8 0x58; u8 0x11; u8 0x58; u8 0x56; u8 0x77;
    u8 0x78; u8 0xf2; u8 0xab; u8 0xf7; u8 0xba;
    u8 0x2b; u8 0x57; u8 0x22; u8 0x47; u8 0x8e;
    u8 0x40; u8 0xe8; u8 0x12; u8 0x86; u8 0x8f;
    u8 0xc2; u8 0x53; u8 0x9c; u8 0x69; u8 0xe4;
    u8 0x7c; u8 0x96; u8 0x79; u8 0xd3; u8 0x33;
    u8 0x5e; u8 0x97; u8 0x4b; u8 0xb2; u8 0xce;
    u8 0xf4; u8 0x0e; u8 0x63; u8 0xb9; u8 0xee;
    u8 0xc0; u8 0xf3; u8 0xa7; u8 0xe7; u8 0xff;
  ] in
  assert_norm(List.Tot.length l == size_test66_encryption2_ciphertext);
  l
let test66_encryption2_ciphertext : lbytes size_test66_encryption2_ciphertext = createL test66_encryption2_ciphertext_list

// generated: "96a0746033c536f88e476205"
inline_for_extraction
let size_test66_encryption2_nonce: size_nat = 12
let test66_encryption2_nonce_list : l:list uint8{List.Tot.length l == size_test66_encryption2_nonce} =
  [@inline_let]
  let l = [
    u8 0x96; u8 0xa0; u8 0x74; u8 0x60; u8 0x33;
    u8 0xc5; u8 0x36; u8 0xf8; u8 0x8e; u8 0x47;
    u8 0x62; u8 0x05;
  ] in
  assert_norm(List.Tot.length l == size_test66_encryption2_nonce);
  l
let test66_encryption2_nonce : lbytes size_test66_encryption2_nonce = createL test66_encryption2_nonce_list

// generated: "4265617574792069732074727574682c20747275746820626561757479"
inline_for_extraction
let size_test66_encryption2_plaintext: size_nat = 29
let test66_encryption2_plaintext_list : l:list uint8{List.Tot.length l == size_test66_encryption2_plaintext} =
  [@inline_let]
  let l = [
    u8 0x42; u8 0x65; u8 0x61; u8 0x75; u8 0x74;
    u8 0x79; u8 0x20; u8 0x69; u8 0x73; u8 0x20;
    u8 0x74; u8 0x72; u8 0x75; u8 0x74; u8 0x68;
    u8 0x2c; u8 0x20; u8 0x74; u8 0x72; u8 0x75;
    u8 0x74; u8 0x68; u8 0x20; u8 0x62; u8 0x65;
    u8 0x61; u8 0x75; u8 0x74; u8 0x79;
  ] in
  assert_norm(List.Tot.length l == size_test66_encryption2_plaintext);
  l
let test66_encryption2_plaintext : lbytes size_test66_encryption2_plaintext = createL test66_encryption2_plaintext_list

// generated: "436f756e742d33"
inline_for_extraction
let size_test66_encryption3_aad: size_nat = 7
let test66_encryption3_aad_list : l:list uint8{List.Tot.length l == size_test66_encryption3_aad} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x75; u8 0x6e; u8 0x74;
    u8 0x2d; u8 0x33;
  ] in
  assert_norm(List.Tot.length l == size_test66_encryption3_aad);
  l
let test66_encryption3_aad : lbytes size_test66_encryption3_aad = createL test66_encryption3_aad_list

// generated: "60ef2965940c5f9505845cf488ca760da834f80c69e3e5034a159f6ad3cf8c9fd38c4e4e2c654e735eba61532c"
inline_for_extraction
let size_test66_encryption3_ciphertext: size_nat = 45
let test66_encryption3_ciphertext_list : l:list uint8{List.Tot.length l == size_test66_encryption3_ciphertext} =
  [@inline_let]
  let l = [
    u8 0x60; u8 0xef; u8 0x29; u8 0x65; u8 0x94;
    u8 0x0c; u8 0x5f; u8 0x95; u8 0x05; u8 0x84;
    u8 0x5c; u8 0xf4; u8 0x88; u8 0xca; u8 0x76;
    u8 0x0d; u8 0xa8; u8 0x34; u8 0xf8; u8 0x0c;
    u8 0x69; u8 0xe3; u8 0xe5; u8 0x03; u8 0x4a;
    u8 0x15; u8 0x9f; u8 0x6a; u8 0xd3; u8 0xcf;
    u8 0x8c; u8 0x9f; u8 0xd3; u8 0x8c; u8 0x4e;
    u8 0x4e; u8 0x2c; u8 0x65; u8 0x4e; u8 0x73;
    u8 0x5e; u8 0xba; u8 0x61; u8 0x53; u8 0x2c;
  ] in
  assert_norm(List.Tot.length l == size_test66_encryption3_ciphertext);
  l
let test66_encryption3_ciphertext : lbytes size_test66_encryption3_ciphertext = createL test66_encryption3_ciphertext_list

// generated: "96a0746033c536f88e476204"
inline_for_extraction
let size_test66_encryption3_nonce: size_nat = 12
let test66_encryption3_nonce_list : l:list uint8{List.Tot.length l == size_test66_encryption3_nonce} =
  [@inline_let]
  let l = [
    u8 0x96; u8 0xa0; u8 0x74; u8 0x60; u8 0x33;
    u8 0xc5; u8 0x36; u8 0xf8; u8 0x8e; u8 0x47;
    u8 0x62; u8 0x04;
  ] in
  assert_norm(List.Tot.length l == size_test66_encryption3_nonce);
  l
let test66_encryption3_nonce : lbytes size_test66_encryption3_nonce = createL test66_encryption3_nonce_list

// generated: "4265617574792069732074727574682c20747275746820626561757479"
inline_for_extraction
let size_test66_encryption3_plaintext: size_nat = 29
let test66_encryption3_plaintext_list : l:list uint8{List.Tot.length l == size_test66_encryption3_plaintext} =
  [@inline_let]
  let l = [
    u8 0x42; u8 0x65; u8 0x61; u8 0x75; u8 0x74;
    u8 0x79; u8 0x20; u8 0x69; u8 0x73; u8 0x20;
    u8 0x74; u8 0x72; u8 0x75; u8 0x74; u8 0x68;
    u8 0x2c; u8 0x20; u8 0x74; u8 0x72; u8 0x75;
    u8 0x74; u8 0x68; u8 0x20; u8 0x62; u8 0x65;
    u8 0x61; u8 0x75; u8 0x74; u8 0x79;
  ] in
  assert_norm(List.Tot.length l == size_test66_encryption3_plaintext);
  l
let test66_encryption3_plaintext : lbytes size_test66_encryption3_plaintext = createL test66_encryption3_plaintext_list

// generated: "436f756e742d34"
inline_for_extraction
let size_test66_encryption4_aad: size_nat = 7
let test66_encryption4_aad_list : l:list uint8{List.Tot.length l == size_test66_encryption4_aad} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x75; u8 0x6e; u8 0x74;
    u8 0x2d; u8 0x34;
  ] in
  assert_norm(List.Tot.length l == size_test66_encryption4_aad);
  l
let test66_encryption4_aad : lbytes size_test66_encryption4_aad = createL test66_encryption4_aad_list

// generated: "cb14f3e899d9298af6d64d8c305bbac1cce73ac136e9b6ded1a3f45ad4ed1f7f7aae94c4b7dab2e20582b4610f"
inline_for_extraction
let size_test66_encryption4_ciphertext: size_nat = 45
let test66_encryption4_ciphertext_list : l:list uint8{List.Tot.length l == size_test66_encryption4_ciphertext} =
  [@inline_let]
  let l = [
    u8 0xcb; u8 0x14; u8 0xf3; u8 0xe8; u8 0x99;
    u8 0xd9; u8 0x29; u8 0x8a; u8 0xf6; u8 0xd6;
    u8 0x4d; u8 0x8c; u8 0x30; u8 0x5b; u8 0xba;
    u8 0xc1; u8 0xcc; u8 0xe7; u8 0x3a; u8 0xc1;
    u8 0x36; u8 0xe9; u8 0xb6; u8 0xde; u8 0xd1;
    u8 0xa3; u8 0xf4; u8 0x5a; u8 0xd4; u8 0xed;
    u8 0x1f; u8 0x7f; u8 0x7a; u8 0xae; u8 0x94;
    u8 0xc4; u8 0xb7; u8 0xda; u8 0xb2; u8 0xe2;
    u8 0x05; u8 0x82; u8 0xb4; u8 0x61; u8 0x0f;
  ] in
  assert_norm(List.Tot.length l == size_test66_encryption4_ciphertext);
  l
let test66_encryption4_ciphertext : lbytes size_test66_encryption4_ciphertext = createL test66_encryption4_ciphertext_list

// generated: "96a0746033c536f88e476203"
inline_for_extraction
let size_test66_encryption4_nonce: size_nat = 12
let test66_encryption4_nonce_list : l:list uint8{List.Tot.length l == size_test66_encryption4_nonce} =
  [@inline_let]
  let l = [
    u8 0x96; u8 0xa0; u8 0x74; u8 0x60; u8 0x33;
    u8 0xc5; u8 0x36; u8 0xf8; u8 0x8e; u8 0x47;
    u8 0x62; u8 0x03;
  ] in
  assert_norm(List.Tot.length l == size_test66_encryption4_nonce);
  l
let test66_encryption4_nonce : lbytes size_test66_encryption4_nonce = createL test66_encryption4_nonce_list

// generated: "4265617574792069732074727574682c20747275746820626561757479"
inline_for_extraction
let size_test66_encryption4_plaintext: size_nat = 29
let test66_encryption4_plaintext_list : l:list uint8{List.Tot.length l == size_test66_encryption4_plaintext} =
  [@inline_let]
  let l = [
    u8 0x42; u8 0x65; u8 0x61; u8 0x75; u8 0x74;
    u8 0x79; u8 0x20; u8 0x69; u8 0x73; u8 0x20;
    u8 0x74; u8 0x72; u8 0x75; u8 0x74; u8 0x68;
    u8 0x2c; u8 0x20; u8 0x74; u8 0x72; u8 0x75;
    u8 0x74; u8 0x68; u8 0x20; u8 0x62; u8 0x65;
    u8 0x61; u8 0x75; u8 0x74; u8 0x79;
  ] in
  assert_norm(List.Tot.length l == size_test66_encryption4_plaintext);
  l
let test66_encryption4_plaintext : lbytes size_test66_encryption4_plaintext = createL test66_encryption4_plaintext_list

// generated: "436f756e742d35"
inline_for_extraction
let size_test66_encryption5_aad: size_nat = 7
let test66_encryption5_aad_list : l:list uint8{List.Tot.length l == size_test66_encryption5_aad} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x75; u8 0x6e; u8 0x74;
    u8 0x2d; u8 0x35;
  ] in
  assert_norm(List.Tot.length l == size_test66_encryption5_aad);
  l
let test66_encryption5_aad : lbytes size_test66_encryption5_aad = createL test66_encryption5_aad_list

// generated: "6fc375cb8a1c07fd7c4ec8d302d69bc3dea2bf521cf67f0d73d16a2e1796d58f374c9b87a91e577d46c8362c26"
inline_for_extraction
let size_test66_encryption5_ciphertext: size_nat = 45
let test66_encryption5_ciphertext_list : l:list uint8{List.Tot.length l == size_test66_encryption5_ciphertext} =
  [@inline_let]
  let l = [
    u8 0x6f; u8 0xc3; u8 0x75; u8 0xcb; u8 0x8a;
    u8 0x1c; u8 0x07; u8 0xfd; u8 0x7c; u8 0x4e;
    u8 0xc8; u8 0xd3; u8 0x02; u8 0xd6; u8 0x9b;
    u8 0xc3; u8 0xde; u8 0xa2; u8 0xbf; u8 0x52;
    u8 0x1c; u8 0xf6; u8 0x7f; u8 0x0d; u8 0x73;
    u8 0xd1; u8 0x6a; u8 0x2e; u8 0x17; u8 0x96;
    u8 0xd5; u8 0x8f; u8 0x37; u8 0x4c; u8 0x9b;
    u8 0x87; u8 0xa9; u8 0x1e; u8 0x57; u8 0x7d;
    u8 0x46; u8 0xc8; u8 0x36; u8 0x2c; u8 0x26;
  ] in
  assert_norm(List.Tot.length l == size_test66_encryption5_ciphertext);
  l
let test66_encryption5_ciphertext : lbytes size_test66_encryption5_ciphertext = createL test66_encryption5_ciphertext_list

// generated: "96a0746033c536f88e476202"
inline_for_extraction
let size_test66_encryption5_nonce: size_nat = 12
let test66_encryption5_nonce_list : l:list uint8{List.Tot.length l == size_test66_encryption5_nonce} =
  [@inline_let]
  let l = [
    u8 0x96; u8 0xa0; u8 0x74; u8 0x60; u8 0x33;
    u8 0xc5; u8 0x36; u8 0xf8; u8 0x8e; u8 0x47;
    u8 0x62; u8 0x02;
  ] in
  assert_norm(List.Tot.length l == size_test66_encryption5_nonce);
  l
let test66_encryption5_nonce : lbytes size_test66_encryption5_nonce = createL test66_encryption5_nonce_list

// generated: "4265617574792069732074727574682c20747275746820626561757479"
inline_for_extraction
let size_test66_encryption5_plaintext: size_nat = 29
let test66_encryption5_plaintext_list : l:list uint8{List.Tot.length l == size_test66_encryption5_plaintext} =
  [@inline_let]
  let l = [
    u8 0x42; u8 0x65; u8 0x61; u8 0x75; u8 0x74;
    u8 0x79; u8 0x20; u8 0x69; u8 0x73; u8 0x20;
    u8 0x74; u8 0x72; u8 0x75; u8 0x74; u8 0x68;
    u8 0x2c; u8 0x20; u8 0x74; u8 0x72; u8 0x75;
    u8 0x74; u8 0x68; u8 0x20; u8 0x62; u8 0x65;
    u8 0x61; u8 0x75; u8 0x74; u8 0x79;
  ] in
  assert_norm(List.Tot.length l == size_test66_encryption5_plaintext);
  l
let test66_encryption5_plaintext : lbytes size_test66_encryption5_plaintext = createL test66_encryption5_plaintext_list

// generated: "436f756e742d36"
inline_for_extraction
let size_test66_encryption6_aad: size_nat = 7
let test66_encryption6_aad_list : l:list uint8{List.Tot.length l == size_test66_encryption6_aad} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x75; u8 0x6e; u8 0x74;
    u8 0x2d; u8 0x36;
  ] in
  assert_norm(List.Tot.length l == size_test66_encryption6_aad);
  l
let test66_encryption6_aad : lbytes size_test66_encryption6_aad = createL test66_encryption6_aad_list

// generated: "e78af057302a2e906d5b294ce1109df695783089deef109d95ba684bea742fbd64a3028a1446ae33b85b69b025"
inline_for_extraction
let size_test66_encryption6_ciphertext: size_nat = 45
let test66_encryption6_ciphertext_list : l:list uint8{List.Tot.length l == size_test66_encryption6_ciphertext} =
  [@inline_let]
  let l = [
    u8 0xe7; u8 0x8a; u8 0xf0; u8 0x57; u8 0x30;
    u8 0x2a; u8 0x2e; u8 0x90; u8 0x6d; u8 0x5b;
    u8 0x29; u8 0x4c; u8 0xe1; u8 0x10; u8 0x9d;
    u8 0xf6; u8 0x95; u8 0x78; u8 0x30; u8 0x89;
    u8 0xde; u8 0xef; u8 0x10; u8 0x9d; u8 0x95;
    u8 0xba; u8 0x68; u8 0x4b; u8 0xea; u8 0x74;
    u8 0x2f; u8 0xbd; u8 0x64; u8 0xa3; u8 0x02;
    u8 0x8a; u8 0x14; u8 0x46; u8 0xae; u8 0x33;
    u8 0xb8; u8 0x5b; u8 0x69; u8 0xb0; u8 0x25;
  ] in
  assert_norm(List.Tot.length l == size_test66_encryption6_ciphertext);
  l
let test66_encryption6_ciphertext : lbytes size_test66_encryption6_ciphertext = createL test66_encryption6_ciphertext_list

// generated: "96a0746033c536f88e476201"
inline_for_extraction
let size_test66_encryption6_nonce: size_nat = 12
let test66_encryption6_nonce_list : l:list uint8{List.Tot.length l == size_test66_encryption6_nonce} =
  [@inline_let]
  let l = [
    u8 0x96; u8 0xa0; u8 0x74; u8 0x60; u8 0x33;
    u8 0xc5; u8 0x36; u8 0xf8; u8 0x8e; u8 0x47;
    u8 0x62; u8 0x01;
  ] in
  assert_norm(List.Tot.length l == size_test66_encryption6_nonce);
  l
let test66_encryption6_nonce : lbytes size_test66_encryption6_nonce = createL test66_encryption6_nonce_list

// generated: "4265617574792069732074727574682c20747275746820626561757479"
inline_for_extraction
let size_test66_encryption6_plaintext: size_nat = 29
let test66_encryption6_plaintext_list : l:list uint8{List.Tot.length l == size_test66_encryption6_plaintext} =
  [@inline_let]
  let l = [
    u8 0x42; u8 0x65; u8 0x61; u8 0x75; u8 0x74;
    u8 0x79; u8 0x20; u8 0x69; u8 0x73; u8 0x20;
    u8 0x74; u8 0x72; u8 0x75; u8 0x74; u8 0x68;
    u8 0x2c; u8 0x20; u8 0x74; u8 0x72; u8 0x75;
    u8 0x74; u8 0x68; u8 0x20; u8 0x62; u8 0x65;
    u8 0x61; u8 0x75; u8 0x74; u8 0x79;
  ] in
  assert_norm(List.Tot.length l == size_test66_encryption6_plaintext);
  l
let test66_encryption6_plaintext : lbytes size_test66_encryption6_plaintext = createL test66_encryption6_plaintext_list

// generated: "436f756e742d37"
inline_for_extraction
let size_test66_encryption7_aad: size_nat = 7
let test66_encryption7_aad_list : l:list uint8{List.Tot.length l == size_test66_encryption7_aad} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x75; u8 0x6e; u8 0x74;
    u8 0x2d; u8 0x37;
  ] in
  assert_norm(List.Tot.length l == size_test66_encryption7_aad);
  l
let test66_encryption7_aad : lbytes size_test66_encryption7_aad = createL test66_encryption7_aad_list

// generated: "6cae85854e3f182476a113c760aad1d65cfd4e85a1039110879b33361f659cc61064efc1bb7515686732f762b2"
inline_for_extraction
let size_test66_encryption7_ciphertext: size_nat = 45
let test66_encryption7_ciphertext_list : l:list uint8{List.Tot.length l == size_test66_encryption7_ciphertext} =
  [@inline_let]
  let l = [
    u8 0x6c; u8 0xae; u8 0x85; u8 0x85; u8 0x4e;
    u8 0x3f; u8 0x18; u8 0x24; u8 0x76; u8 0xa1;
    u8 0x13; u8 0xc7; u8 0x60; u8 0xaa; u8 0xd1;
    u8 0xd6; u8 0x5c; u8 0xfd; u8 0x4e; u8 0x85;
    u8 0xa1; u8 0x03; u8 0x91; u8 0x10; u8 0x87;
    u8 0x9b; u8 0x33; u8 0x36; u8 0x1f; u8 0x65;
    u8 0x9c; u8 0xc6; u8 0x10; u8 0x64; u8 0xef;
    u8 0xc1; u8 0xbb; u8 0x75; u8 0x15; u8 0x68;
    u8 0x67; u8 0x32; u8 0xf7; u8 0x62; u8 0xb2;
  ] in
  assert_norm(List.Tot.length l == size_test66_encryption7_ciphertext);
  l
let test66_encryption7_ciphertext : lbytes size_test66_encryption7_ciphertext = createL test66_encryption7_ciphertext_list

// generated: "96a0746033c536f88e476200"
inline_for_extraction
let size_test66_encryption7_nonce: size_nat = 12
let test66_encryption7_nonce_list : l:list uint8{List.Tot.length l == size_test66_encryption7_nonce} =
  [@inline_let]
  let l = [
    u8 0x96; u8 0xa0; u8 0x74; u8 0x60; u8 0x33;
    u8 0xc5; u8 0x36; u8 0xf8; u8 0x8e; u8 0x47;
    u8 0x62; u8 0x00;
  ] in
  assert_norm(List.Tot.length l == size_test66_encryption7_nonce);
  l
let test66_encryption7_nonce : lbytes size_test66_encryption7_nonce = createL test66_encryption7_nonce_list

// generated: "4265617574792069732074727574682c20747275746820626561757479"
inline_for_extraction
let size_test66_encryption7_plaintext: size_nat = 29
let test66_encryption7_plaintext_list : l:list uint8{List.Tot.length l == size_test66_encryption7_plaintext} =
  [@inline_let]
  let l = [
    u8 0x42; u8 0x65; u8 0x61; u8 0x75; u8 0x74;
    u8 0x79; u8 0x20; u8 0x69; u8 0x73; u8 0x20;
    u8 0x74; u8 0x72; u8 0x75; u8 0x74; u8 0x68;
    u8 0x2c; u8 0x20; u8 0x74; u8 0x72; u8 0x75;
    u8 0x74; u8 0x68; u8 0x20; u8 0x62; u8 0x65;
    u8 0x61; u8 0x75; u8 0x74; u8 0x79;
  ] in
  assert_norm(List.Tot.length l == size_test66_encryption7_plaintext);
  l
let test66_encryption7_plaintext : lbytes size_test66_encryption7_plaintext = createL test66_encryption7_plaintext_list

// generated: "436f756e742d38"
inline_for_extraction
let size_test66_encryption8_aad: size_nat = 7
let test66_encryption8_aad_list : l:list uint8{List.Tot.length l == size_test66_encryption8_aad} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x75; u8 0x6e; u8 0x74;
    u8 0x2d; u8 0x38;
  ] in
  assert_norm(List.Tot.length l == size_test66_encryption8_aad);
  l
let test66_encryption8_aad : lbytes size_test66_encryption8_aad = createL test66_encryption8_aad_list

// generated: "ad04efb42c47ecb130685111a69fd5ff95a34a4ff1d285e251a99740bbca1d86284debcc6f40415975ad3ae76f"
inline_for_extraction
let size_test66_encryption8_ciphertext: size_nat = 45
let test66_encryption8_ciphertext_list : l:list uint8{List.Tot.length l == size_test66_encryption8_ciphertext} =
  [@inline_let]
  let l = [
    u8 0xad; u8 0x04; u8 0xef; u8 0xb4; u8 0x2c;
    u8 0x47; u8 0xec; u8 0xb1; u8 0x30; u8 0x68;
    u8 0x51; u8 0x11; u8 0xa6; u8 0x9f; u8 0xd5;
    u8 0xff; u8 0x95; u8 0xa3; u8 0x4a; u8 0x4f;
    u8 0xf1; u8 0xd2; u8 0x85; u8 0xe2; u8 0x51;
    u8 0xa9; u8 0x97; u8 0x40; u8 0xbb; u8 0xca;
    u8 0x1d; u8 0x86; u8 0x28; u8 0x4d; u8 0xeb;
    u8 0xcc; u8 0x6f; u8 0x40; u8 0x41; u8 0x59;
    u8 0x75; u8 0xad; u8 0x3a; u8 0xe7; u8 0x6f;
  ] in
  assert_norm(List.Tot.length l == size_test66_encryption8_ciphertext);
  l
let test66_encryption8_ciphertext : lbytes size_test66_encryption8_ciphertext = createL test66_encryption8_ciphertext_list

// generated: "96a0746033c536f88e47620f"
inline_for_extraction
let size_test66_encryption8_nonce: size_nat = 12
let test66_encryption8_nonce_list : l:list uint8{List.Tot.length l == size_test66_encryption8_nonce} =
  [@inline_let]
  let l = [
    u8 0x96; u8 0xa0; u8 0x74; u8 0x60; u8 0x33;
    u8 0xc5; u8 0x36; u8 0xf8; u8 0x8e; u8 0x47;
    u8 0x62; u8 0x0f;
  ] in
  assert_norm(List.Tot.length l == size_test66_encryption8_nonce);
  l
let test66_encryption8_nonce : lbytes size_test66_encryption8_nonce = createL test66_encryption8_nonce_list

// generated: "4265617574792069732074727574682c20747275746820626561757479"
inline_for_extraction
let size_test66_encryption8_plaintext: size_nat = 29
let test66_encryption8_plaintext_list : l:list uint8{List.Tot.length l == size_test66_encryption8_plaintext} =
  [@inline_let]
  let l = [
    u8 0x42; u8 0x65; u8 0x61; u8 0x75; u8 0x74;
    u8 0x79; u8 0x20; u8 0x69; u8 0x73; u8 0x20;
    u8 0x74; u8 0x72; u8 0x75; u8 0x74; u8 0x68;
    u8 0x2c; u8 0x20; u8 0x74; u8 0x72; u8 0x75;
    u8 0x74; u8 0x68; u8 0x20; u8 0x62; u8 0x65;
    u8 0x61; u8 0x75; u8 0x74; u8 0x79;
  ] in
  assert_norm(List.Tot.length l == size_test66_encryption8_plaintext);
  l
let test66_encryption8_plaintext : lbytes size_test66_encryption8_plaintext = createL test66_encryption8_plaintext_list

// generated: "436f756e742d39"
inline_for_extraction
let size_test66_encryption9_aad: size_nat = 7
let test66_encryption9_aad_list : l:list uint8{List.Tot.length l == size_test66_encryption9_aad} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x75; u8 0x6e; u8 0x74;
    u8 0x2d; u8 0x39;
  ] in
  assert_norm(List.Tot.length l == size_test66_encryption9_aad);
  l
let test66_encryption9_aad : lbytes size_test66_encryption9_aad = createL test66_encryption9_aad_list

// generated: "ad1617e8f87376f5b09b9a4fb4a2fe6661c29f1453b20499c66523af6fd61feb496d45bbfe98981dd53118d883"
inline_for_extraction
let size_test66_encryption9_ciphertext: size_nat = 45
let test66_encryption9_ciphertext_list : l:list uint8{List.Tot.length l == size_test66_encryption9_ciphertext} =
  [@inline_let]
  let l = [
    u8 0xad; u8 0x16; u8 0x17; u8 0xe8; u8 0xf8;
    u8 0x73; u8 0x76; u8 0xf5; u8 0xb0; u8 0x9b;
    u8 0x9a; u8 0x4f; u8 0xb4; u8 0xa2; u8 0xfe;
    u8 0x66; u8 0x61; u8 0xc2; u8 0x9f; u8 0x14;
    u8 0x53; u8 0xb2; u8 0x04; u8 0x99; u8 0xc6;
    u8 0x65; u8 0x23; u8 0xaf; u8 0x6f; u8 0xd6;
    u8 0x1f; u8 0xeb; u8 0x49; u8 0x6d; u8 0x45;
    u8 0xbb; u8 0xfe; u8 0x98; u8 0x98; u8 0x1d;
    u8 0xd5; u8 0x31; u8 0x18; u8 0xd8; u8 0x83;
  ] in
  assert_norm(List.Tot.length l == size_test66_encryption9_ciphertext);
  l
let test66_encryption9_ciphertext : lbytes size_test66_encryption9_ciphertext = createL test66_encryption9_ciphertext_list

// generated: "96a0746033c536f88e47620e"
inline_for_extraction
let size_test66_encryption9_nonce: size_nat = 12
let test66_encryption9_nonce_list : l:list uint8{List.Tot.length l == size_test66_encryption9_nonce} =
  [@inline_let]
  let l = [
    u8 0x96; u8 0xa0; u8 0x74; u8 0x60; u8 0x33;
    u8 0xc5; u8 0x36; u8 0xf8; u8 0x8e; u8 0x47;
    u8 0x62; u8 0x0e;
  ] in
  assert_norm(List.Tot.length l == size_test66_encryption9_nonce);
  l
let test66_encryption9_nonce : lbytes size_test66_encryption9_nonce = createL test66_encryption9_nonce_list

// generated: "4265617574792069732074727574682c20747275746820626561757479"
inline_for_extraction
let size_test66_encryption9_plaintext: size_nat = 29
let test66_encryption9_plaintext_list : l:list uint8{List.Tot.length l == size_test66_encryption9_plaintext} =
  [@inline_let]
  let l = [
    u8 0x42; u8 0x65; u8 0x61; u8 0x75; u8 0x74;
    u8 0x79; u8 0x20; u8 0x69; u8 0x73; u8 0x20;
    u8 0x74; u8 0x72; u8 0x75; u8 0x74; u8 0x68;
    u8 0x2c; u8 0x20; u8 0x74; u8 0x72; u8 0x75;
    u8 0x74; u8 0x68; u8 0x20; u8 0x62; u8 0x65;
    u8 0x61; u8 0x75; u8 0x74; u8 0x79;
  ] in
  assert_norm(List.Tot.length l == size_test66_encryption9_plaintext);
  l
let test66_encryption9_plaintext : lbytes size_test66_encryption9_plaintext = createL test66_encryption9_plaintext_list

// generated: "436f6e746578742d30"
inline_for_extraction
let size_test66_export0_exportContext: size_nat = 9
let test66_export0_exportContext_list : l:list uint8{List.Tot.length l == size_test66_export0_exportContext} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x6e; u8 0x74; u8 0x65;
    u8 0x78; u8 0x74; u8 0x2d; u8 0x30;
  ] in
  assert_norm(List.Tot.length l == size_test66_export0_exportContext);
  l
let test66_export0_exportContext : lbytes size_test66_export0_exportContext = createL test66_export0_exportContext_list

// generated: "b38acba5312e32d52c5a6761326d0399a99b0155b6006515430d4f4b450d48cc"
inline_for_extraction
let size_test66_export0_exportValue: size_nat = 32
let test66_export0_exportValue_list : l:list uint8{List.Tot.length l == size_test66_export0_exportValue} =
  [@inline_let]
  let l = [
    u8 0xb3; u8 0x8a; u8 0xcb; u8 0xa5; u8 0x31;
    u8 0x2e; u8 0x32; u8 0xd5; u8 0x2c; u8 0x5a;
    u8 0x67; u8 0x61; u8 0x32; u8 0x6d; u8 0x03;
    u8 0x99; u8 0xa9; u8 0x9b; u8 0x01; u8 0x55;
    u8 0xb6; u8 0x00; u8 0x65; u8 0x15; u8 0x43;
    u8 0x0d; u8 0x4f; u8 0x4b; u8 0x45; u8 0x0d;
    u8 0x48; u8 0xcc;
  ] in
  assert_norm(List.Tot.length l == size_test66_export0_exportValue);
  l
let test66_export0_exportValue : lbytes size_test66_export0_exportValue = createL test66_export0_exportValue_list

let test66_export0_len:size_nat = 32
// generated: "436f6e746578742d31"
inline_for_extraction
let size_test66_export1_exportContext: size_nat = 9
let test66_export1_exportContext_list : l:list uint8{List.Tot.length l == size_test66_export1_exportContext} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x6e; u8 0x74; u8 0x65;
    u8 0x78; u8 0x74; u8 0x2d; u8 0x31;
  ] in
  assert_norm(List.Tot.length l == size_test66_export1_exportContext);
  l
let test66_export1_exportContext : lbytes size_test66_export1_exportContext = createL test66_export1_exportContext_list

// generated: "5a97fc1aa5d3e0305f8085af3f4607b46d2f538845040d514306abc7861d19c1"
inline_for_extraction
let size_test66_export1_exportValue: size_nat = 32
let test66_export1_exportValue_list : l:list uint8{List.Tot.length l == size_test66_export1_exportValue} =
  [@inline_let]
  let l = [
    u8 0x5a; u8 0x97; u8 0xfc; u8 0x1a; u8 0xa5;
    u8 0xd3; u8 0xe0; u8 0x30; u8 0x5f; u8 0x80;
    u8 0x85; u8 0xaf; u8 0x3f; u8 0x46; u8 0x07;
    u8 0xb4; u8 0x6d; u8 0x2f; u8 0x53; u8 0x88;
    u8 0x45; u8 0x04; u8 0x0d; u8 0x51; u8 0x43;
    u8 0x06; u8 0xab; u8 0xc7; u8 0x86; u8 0x1d;
    u8 0x19; u8 0xc1;
  ] in
  assert_norm(List.Tot.length l == size_test66_export1_exportValue);
  l
let test66_export1_exportValue : lbytes size_test66_export1_exportValue = createL test66_export1_exportValue_list

let test66_export1_len:size_nat = 32
// generated: "436f6e746578742d32"
inline_for_extraction
let size_test66_export2_exportContext: size_nat = 9
let test66_export2_exportContext_list : l:list uint8{List.Tot.length l == size_test66_export2_exportContext} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x6e; u8 0x74; u8 0x65;
    u8 0x78; u8 0x74; u8 0x2d; u8 0x32;
  ] in
  assert_norm(List.Tot.length l == size_test66_export2_exportContext);
  l
let test66_export2_exportContext : lbytes size_test66_export2_exportContext = createL test66_export2_exportContext_list

// generated: "013e4236f49baf18e0b7b7130345b47eddc52b878b75870775d8c51af9925035"
inline_for_extraction
let size_test66_export2_exportValue: size_nat = 32
let test66_export2_exportValue_list : l:list uint8{List.Tot.length l == size_test66_export2_exportValue} =
  [@inline_let]
  let l = [
    u8 0x01; u8 0x3e; u8 0x42; u8 0x36; u8 0xf4;
    u8 0x9b; u8 0xaf; u8 0x18; u8 0xe0; u8 0xb7;
    u8 0xb7; u8 0x13; u8 0x03; u8 0x45; u8 0xb4;
    u8 0x7e; u8 0xdd; u8 0xc5; u8 0x2b; u8 0x87;
    u8 0x8b; u8 0x75; u8 0x87; u8 0x07; u8 0x75;
    u8 0xd8; u8 0xc5; u8 0x1a; u8 0xf9; u8 0x92;
    u8 0x50; u8 0x35;
  ] in
  assert_norm(List.Tot.length l == size_test66_export2_exportValue);
  l
let test66_export2_exportValue : lbytes size_test66_export2_exportValue = createL test66_export2_exportValue_list

let test66_export2_len:size_nat = 32
// generated: "436f6e746578742d33"
inline_for_extraction
let size_test66_export3_exportContext: size_nat = 9
let test66_export3_exportContext_list : l:list uint8{List.Tot.length l == size_test66_export3_exportContext} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x6e; u8 0x74; u8 0x65;
    u8 0x78; u8 0x74; u8 0x2d; u8 0x33;
  ] in
  assert_norm(List.Tot.length l == size_test66_export3_exportContext);
  l
let test66_export3_exportContext : lbytes size_test66_export3_exportContext = createL test66_export3_exportContext_list

// generated: "4aa30616dde2a17efce271cd87cbd55fb550dbfbfe021c9925e6d21bac1496e2"
inline_for_extraction
let size_test66_export3_exportValue: size_nat = 32
let test66_export3_exportValue_list : l:list uint8{List.Tot.length l == size_test66_export3_exportValue} =
  [@inline_let]
  let l = [
    u8 0x4a; u8 0xa3; u8 0x06; u8 0x16; u8 0xdd;
    u8 0xe2; u8 0xa1; u8 0x7e; u8 0xfc; u8 0xe2;
    u8 0x71; u8 0xcd; u8 0x87; u8 0xcb; u8 0xd5;
    u8 0x5f; u8 0xb5; u8 0x50; u8 0xdb; u8 0xfb;
    u8 0xfe; u8 0x02; u8 0x1c; u8 0x99; u8 0x25;
    u8 0xe6; u8 0xd2; u8 0x1b; u8 0xac; u8 0x14;
    u8 0x96; u8 0xe2;
  ] in
  assert_norm(List.Tot.length l == size_test66_export3_exportValue);
  l
let test66_export3_exportValue : lbytes size_test66_export3_exportValue = createL test66_export3_exportValue_list

let test66_export3_len:size_nat = 32
// generated: "436f6e746578742d34"
inline_for_extraction
let size_test66_export4_exportContext: size_nat = 9
let test66_export4_exportContext_list : l:list uint8{List.Tot.length l == size_test66_export4_exportContext} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x6e; u8 0x74; u8 0x65;
    u8 0x78; u8 0x74; u8 0x2d; u8 0x34;
  ] in
  assert_norm(List.Tot.length l == size_test66_export4_exportContext);
  l
let test66_export4_exportContext : lbytes size_test66_export4_exportContext = createL test66_export4_exportContext_list

// generated: "21ea00e8a0c08ef14c3e2d66111a17c99cc417728fc2d06ac48232aa871c1887"
inline_for_extraction
let size_test66_export4_exportValue: size_nat = 32
let test66_export4_exportValue_list : l:list uint8{List.Tot.length l == size_test66_export4_exportValue} =
  [@inline_let]
  let l = [
    u8 0x21; u8 0xea; u8 0x00; u8 0xe8; u8 0xa0;
    u8 0xc0; u8 0x8e; u8 0xf1; u8 0x4c; u8 0x3e;
    u8 0x2d; u8 0x66; u8 0x11; u8 0x1a; u8 0x17;
    u8 0xc9; u8 0x9c; u8 0xc4; u8 0x17; u8 0x72;
    u8 0x8f; u8 0xc2; u8 0xd0; u8 0x6a; u8 0xc4;
    u8 0x82; u8 0x32; u8 0xaa; u8 0x87; u8 0x1c;
    u8 0x18; u8 0x87;
  ] in
  assert_norm(List.Tot.length l == size_test66_export4_exportValue);
  l
let test66_export4_exportValue : lbytes size_test66_export4_exportValue = createL test66_export4_exportValue_list

let test66_export4_len:size_nat = 32

let test66 () =
  let res = test_setupBase test66_ciphersuite test66_skEm test66_pkEm test66_skRm test66_pkRm test66_info test66_enc test66_zz test66_key_schedule_context test66_secret test66_key test66_nonce test66_exporterSecret test66_encryption0_nonce test66_encryption1_nonce in
  let seq0:HPKE.seq_aead_s test66_ciphersuite = 0 in
  let enc_res0 = test_encryption test66_ciphersuite test66_key test66_nonce test66_exporterSecret test66_encryption0_aad test66_encryption0_plaintext seq0 test66_encryption0_ciphertext test66_encryption0_nonce in

  assert_norm (1 < pow2 (8 * 12));
  let seq1:HPKE.seq_aead_s test66_ciphersuite = (seq0 + 1) in
  let enc_res1 = test_encryption test66_ciphersuite test66_key test66_nonce test66_exporterSecret test66_encryption1_aad test66_encryption1_plaintext seq1 test66_encryption1_ciphertext test66_encryption1_nonce in

  assert_norm (2 < pow2 (8 * 12));
  let seq2:HPKE.seq_aead_s test66_ciphersuite = (seq1 + 1) in
  let enc_res2 = test_encryption test66_ciphersuite test66_key test66_nonce test66_exporterSecret test66_encryption2_aad test66_encryption2_plaintext 2 test66_encryption2_ciphertext test66_encryption2_nonce in

  assert_norm (3 < pow2 (8 * 12));
  let seq3:HPKE.seq_aead_s test66_ciphersuite = (seq2 + 1) in
  let enc_res3 = test_encryption test66_ciphersuite test66_key test66_nonce test66_exporterSecret test66_encryption3_aad test66_encryption3_plaintext 3 test66_encryption3_ciphertext test66_encryption3_nonce in

  assert_norm (4 < pow2 (8 * 12));
  let seq4:HPKE.seq_aead_s test66_ciphersuite = (seq3 + 1) in
  let enc_res4 = test_encryption test66_ciphersuite test66_key test66_nonce test66_exporterSecret test66_encryption4_aad test66_encryption4_plaintext 4 test66_encryption4_ciphertext test66_encryption4_nonce in

  assert_norm (5 < pow2 (8 * 12));
  let seq5:HPKE.seq_aead_s test66_ciphersuite = (seq4 + 1) in
  let enc_res5 = test_encryption test66_ciphersuite test66_key test66_nonce test66_exporterSecret test66_encryption5_aad test66_encryption5_plaintext 5 test66_encryption5_ciphertext test66_encryption5_nonce in

  assert_norm (6 < pow2 (8 * 12));
  let seq6:HPKE.seq_aead_s test66_ciphersuite = (seq5 + 1) in
  let enc_res6 = test_encryption test66_ciphersuite test66_key test66_nonce test66_exporterSecret test66_encryption6_aad test66_encryption6_plaintext 6 test66_encryption6_ciphertext test66_encryption6_nonce in

  assert_norm (7 < pow2 (8 * 12));
  let seq7:HPKE.seq_aead_s test66_ciphersuite = (seq6 + 1) in
  let enc_res7 = test_encryption test66_ciphersuite test66_key test66_nonce test66_exporterSecret test66_encryption7_aad test66_encryption7_plaintext 7 test66_encryption7_ciphertext test66_encryption7_nonce in

  assert_norm (8 < pow2 (8 * 12));
  let seq8:HPKE.seq_aead_s test66_ciphersuite = (seq7 + 1) in
  let enc_res8 = test_encryption test66_ciphersuite test66_key test66_nonce test66_exporterSecret test66_encryption8_aad test66_encryption8_plaintext 8 test66_encryption8_ciphertext test66_encryption8_nonce in

  assert_norm (9 < pow2 (8 * 12));
  let seq9:HPKE.seq_aead_s test66_ciphersuite = (seq8 + 1) in
  let enc_res9 = test_encryption test66_ciphersuite test66_key test66_nonce test66_exporterSecret test66_encryption9_aad test66_encryption9_plaintext 9 test66_encryption9_ciphertext test66_encryption9_nonce in

  let exp_res0 = test_export test66_ciphersuite test66_key test66_nonce test66_exporterSecret test66_export0_exportContext test66_export0_len test66_export0_exportValue in

  let exp_res1 = test_export test66_ciphersuite test66_key test66_nonce test66_exporterSecret test66_export1_exportContext test66_export1_len test66_export1_exportValue in

  let exp_res2 = test_export test66_ciphersuite test66_key test66_nonce test66_exporterSecret test66_export2_exportContext test66_export2_len test66_export2_exportValue in

  let exp_res3 = test_export test66_ciphersuite test66_key test66_nonce test66_exporterSecret test66_export3_exportContext test66_export3_len test66_export3_exportValue in

  let exp_res4 = test_export test66_ciphersuite test66_key test66_nonce test66_exporterSecret test66_export4_exportContext test66_export4_len test66_export4_exportValue in

  enc_res0 && enc_res1 && enc_res2 && enc_res3 && enc_res4 && enc_res5 && enc_res6 && enc_res7 && enc_res8 && enc_res9 && res && exp_res0 && exp_res1 && exp_res2 && exp_res3 && exp_res4


// Skipped unsupported test case 67

// Skipped unsupported test case 68

// Skipped unsupported test case 69

let test70_mode: HPKE.mode = HPKE.Base
let test70_ciphersuite = DH.DH_P256, Hash.SHA2_256, AEAD.CHACHA20_POLY1305, Hash.SHA2_512

// generated: "4f6465206f6e2061204772656369616e2055726e"
inline_for_extraction
let size_test70_info: size_nat = 20
let test70_info_list : l:list uint8{List.Tot.length l == size_test70_info} =
  [@inline_let]
  let l = [
    u8 0x4f; u8 0x64; u8 0x65; u8 0x20; u8 0x6f;
    u8 0x6e; u8 0x20; u8 0x61; u8 0x20; u8 0x47;
    u8 0x72; u8 0x65; u8 0x63; u8 0x69; u8 0x61;
    u8 0x6e; u8 0x20; u8 0x55; u8 0x72; u8 0x6e;
  ] in
  assert_norm(List.Tot.length l == size_test70_info);
  l
let test70_info : lbytes size_test70_info = createL test70_info_list

// generated: "3c1263019ee08e34fff82dca073a25141838f3fcae468fc500df69ab775b0c4b"
inline_for_extraction
let size_test70_skRm: size_nat = 32
let test70_skRm_list : l:list uint8{List.Tot.length l == size_test70_skRm} =
  [@inline_let]
  let l = [
    u8 0x3c; u8 0x12; u8 0x63; u8 0x01; u8 0x9e;
    u8 0xe0; u8 0x8e; u8 0x34; u8 0xff; u8 0xf8;
    u8 0x2d; u8 0xca; u8 0x07; u8 0x3a; u8 0x25;
    u8 0x14; u8 0x18; u8 0x38; u8 0xf3; u8 0xfc;
    u8 0xae; u8 0x46; u8 0x8f; u8 0xc5; u8 0x00;
    u8 0xdf; u8 0x69; u8 0xab; u8 0x77; u8 0x5b;
    u8 0x0c; u8 0x4b;
  ] in
  assert_norm(List.Tot.length l == size_test70_skRm);
  l
let test70_skRm : lbytes size_test70_skRm = createL test70_skRm_list

// generated: "f11740a9ec6d347159ac78dadb3f59fce9c13981c24f85c4cd7dcc2caca4a714"
inline_for_extraction
let size_test70_skEm: size_nat = 32
let test70_skEm_list : l:list uint8{List.Tot.length l == size_test70_skEm} =
  [@inline_let]
  let l = [
    u8 0xf1; u8 0x17; u8 0x40; u8 0xa9; u8 0xec;
    u8 0x6d; u8 0x34; u8 0x71; u8 0x59; u8 0xac;
    u8 0x78; u8 0xda; u8 0xdb; u8 0x3f; u8 0x59;
    u8 0xfc; u8 0xe9; u8 0xc1; u8 0x39; u8 0x81;
    u8 0xc2; u8 0x4f; u8 0x85; u8 0xc4; u8 0xcd;
    u8 0x7d; u8 0xcc; u8 0x2c; u8 0xac; u8 0xa4;
    u8 0xa7; u8 0x14;
  ] in
  assert_norm(List.Tot.length l == size_test70_skEm);
  l
let test70_skEm : lbytes size_test70_skEm = createL test70_skEm_list

// generated: "0433c322f6f215c981a7006e86a6225af900de19cb09ea21d383190dcd1a41601f4dc81aed6c975ce4c731b61d02a2d78fdd7c64937e0c0b2b20d21de3a2058d61"
inline_for_extraction
let size_test70_pkRm: size_nat = 65
let test70_pkRm_list : l:list uint8{List.Tot.length l == size_test70_pkRm} =
  [@inline_let]
  let l = [
    u8 0x04; u8 0x33; u8 0xc3; u8 0x22; u8 0xf6;
    u8 0xf2; u8 0x15; u8 0xc9; u8 0x81; u8 0xa7;
    u8 0x00; u8 0x6e; u8 0x86; u8 0xa6; u8 0x22;
    u8 0x5a; u8 0xf9; u8 0x00; u8 0xde; u8 0x19;
    u8 0xcb; u8 0x09; u8 0xea; u8 0x21; u8 0xd3;
    u8 0x83; u8 0x19; u8 0x0d; u8 0xcd; u8 0x1a;
    u8 0x41; u8 0x60; u8 0x1f; u8 0x4d; u8 0xc8;
    u8 0x1a; u8 0xed; u8 0x6c; u8 0x97; u8 0x5c;
    u8 0xe4; u8 0xc7; u8 0x31; u8 0xb6; u8 0x1d;
    u8 0x02; u8 0xa2; u8 0xd7; u8 0x8f; u8 0xdd;
    u8 0x7c; u8 0x64; u8 0x93; u8 0x7e; u8 0x0c;
    u8 0x0b; u8 0x2b; u8 0x20; u8 0xd2; u8 0x1d;
    u8 0xe3; u8 0xa2; u8 0x05; u8 0x8d; u8 0x61;
  ] in
  assert_norm(List.Tot.length l == size_test70_pkRm);
  l
let test70_pkRm : lbytes size_test70_pkRm = createL test70_pkRm_list

// generated: "044c06c76fa048af77c8fa29cff0f0d26a8538e06040eb8be75e04b40d8359aa4c50a5e7f9100979b0cf347ed4e858fbf622a2ff48b195457a585e914733d13e6f"
inline_for_extraction
let size_test70_pkEm: size_nat = 65
let test70_pkEm_list : l:list uint8{List.Tot.length l == size_test70_pkEm} =
  [@inline_let]
  let l = [
    u8 0x04; u8 0x4c; u8 0x06; u8 0xc7; u8 0x6f;
    u8 0xa0; u8 0x48; u8 0xaf; u8 0x77; u8 0xc8;
    u8 0xfa; u8 0x29; u8 0xcf; u8 0xf0; u8 0xf0;
    u8 0xd2; u8 0x6a; u8 0x85; u8 0x38; u8 0xe0;
    u8 0x60; u8 0x40; u8 0xeb; u8 0x8b; u8 0xe7;
    u8 0x5e; u8 0x04; u8 0xb4; u8 0x0d; u8 0x83;
    u8 0x59; u8 0xaa; u8 0x4c; u8 0x50; u8 0xa5;
    u8 0xe7; u8 0xf9; u8 0x10; u8 0x09; u8 0x79;
    u8 0xb0; u8 0xcf; u8 0x34; u8 0x7e; u8 0xd4;
    u8 0xe8; u8 0x58; u8 0xfb; u8 0xf6; u8 0x22;
    u8 0xa2; u8 0xff; u8 0x48; u8 0xb1; u8 0x95;
    u8 0x45; u8 0x7a; u8 0x58; u8 0x5e; u8 0x91;
    u8 0x47; u8 0x33; u8 0xd1; u8 0x3e; u8 0x6f;
  ] in
  assert_norm(List.Tot.length l == size_test70_pkEm);
  l
let test70_pkEm : lbytes size_test70_pkEm = createL test70_pkEm_list

// generated: "044c06c76fa048af77c8fa29cff0f0d26a8538e06040eb8be75e04b40d8359aa4c50a5e7f9100979b0cf347ed4e858fbf622a2ff48b195457a585e914733d13e6f"
inline_for_extraction
let size_test70_enc: size_nat = 65
let test70_enc_list : l:list uint8{List.Tot.length l == size_test70_enc} =
  [@inline_let]
  let l = [
    u8 0x04; u8 0x4c; u8 0x06; u8 0xc7; u8 0x6f;
    u8 0xa0; u8 0x48; u8 0xaf; u8 0x77; u8 0xc8;
    u8 0xfa; u8 0x29; u8 0xcf; u8 0xf0; u8 0xf0;
    u8 0xd2; u8 0x6a; u8 0x85; u8 0x38; u8 0xe0;
    u8 0x60; u8 0x40; u8 0xeb; u8 0x8b; u8 0xe7;
    u8 0x5e; u8 0x04; u8 0xb4; u8 0x0d; u8 0x83;
    u8 0x59; u8 0xaa; u8 0x4c; u8 0x50; u8 0xa5;
    u8 0xe7; u8 0xf9; u8 0x10; u8 0x09; u8 0x79;
    u8 0xb0; u8 0xcf; u8 0x34; u8 0x7e; u8 0xd4;
    u8 0xe8; u8 0x58; u8 0xfb; u8 0xf6; u8 0x22;
    u8 0xa2; u8 0xff; u8 0x48; u8 0xb1; u8 0x95;
    u8 0x45; u8 0x7a; u8 0x58; u8 0x5e; u8 0x91;
    u8 0x47; u8 0x33; u8 0xd1; u8 0x3e; u8 0x6f;
  ] in
  assert_norm(List.Tot.length l == size_test70_enc);
  l
let test70_enc : lbytes size_test70_enc = createL test70_enc_list

// generated: "2445d91d67bba5dcf6d66f8170ab20c4fd0ed8973ebe96fe8ba8e5b3c7697a96"
inline_for_extraction
let size_test70_zz: size_nat = 32
let test70_zz_list : l:list uint8{List.Tot.length l == size_test70_zz} =
  [@inline_let]
  let l = [
    u8 0x24; u8 0x45; u8 0xd9; u8 0x1d; u8 0x67;
    u8 0xbb; u8 0xa5; u8 0xdc; u8 0xf6; u8 0xd6;
    u8 0x6f; u8 0x81; u8 0x70; u8 0xab; u8 0x20;
    u8 0xc4; u8 0xfd; u8 0x0e; u8 0xd8; u8 0x97;
    u8 0x3e; u8 0xbe; u8 0x96; u8 0xfe; u8 0x8b;
    u8 0xa8; u8 0xe5; u8 0xb3; u8 0xc7; u8 0x69;
    u8 0x7a; u8 0x96;
  ] in
  assert_norm(List.Tot.length l == size_test70_zz);
  l
let test70_zz : lbytes size_test70_zz = createL test70_zz_list

// generated: "001000030003008ca13b5d680259cfa265de13dd24f257083c9403c01a8aa3320b9195c8d1d812a58e72ff3dd3cf71dc81b21c354f84e9ca6863d5fd871711e356ed9bf5f1e0d0c70a83df9dcea90e894cbfd709dabe93b3390a8e9c5a18498a1ff32414767a12c08bf4d4df6cf9d953da725b79d07454eb69bd002235f35a241dec5f1088177c"
inline_for_extraction
let size_test70_key_schedule_context: size_nat = 135
let test70_key_schedule_context_list : l:list uint8{List.Tot.length l == size_test70_key_schedule_context} =
  [@inline_let]
  let l = [
    u8 0x00; u8 0x10; u8 0x00; u8 0x03; u8 0x00;
    u8 0x03; u8 0x00; u8 0x8c; u8 0xa1; u8 0x3b;
    u8 0x5d; u8 0x68; u8 0x02; u8 0x59; u8 0xcf;
    u8 0xa2; u8 0x65; u8 0xde; u8 0x13; u8 0xdd;
    u8 0x24; u8 0xf2; u8 0x57; u8 0x08; u8 0x3c;
    u8 0x94; u8 0x03; u8 0xc0; u8 0x1a; u8 0x8a;
    u8 0xa3; u8 0x32; u8 0x0b; u8 0x91; u8 0x95;
    u8 0xc8; u8 0xd1; u8 0xd8; u8 0x12; u8 0xa5;
    u8 0x8e; u8 0x72; u8 0xff; u8 0x3d; u8 0xd3;
    u8 0xcf; u8 0x71; u8 0xdc; u8 0x81; u8 0xb2;
    u8 0x1c; u8 0x35; u8 0x4f; u8 0x84; u8 0xe9;
    u8 0xca; u8 0x68; u8 0x63; u8 0xd5; u8 0xfd;
    u8 0x87; u8 0x17; u8 0x11; u8 0xe3; u8 0x56;
    u8 0xed; u8 0x9b; u8 0xf5; u8 0xf1; u8 0xe0;
    u8 0xd0; u8 0xc7; u8 0x0a; u8 0x83; u8 0xdf;
    u8 0x9d; u8 0xce; u8 0xa9; u8 0x0e; u8 0x89;
    u8 0x4c; u8 0xbf; u8 0xd7; u8 0x09; u8 0xda;
    u8 0xbe; u8 0x93; u8 0xb3; u8 0x39; u8 0x0a;
    u8 0x8e; u8 0x9c; u8 0x5a; u8 0x18; u8 0x49;
    u8 0x8a; u8 0x1f; u8 0xf3; u8 0x24; u8 0x14;
    u8 0x76; u8 0x7a; u8 0x12; u8 0xc0; u8 0x8b;
    u8 0xf4; u8 0xd4; u8 0xdf; u8 0x6c; u8 0xf9;
    u8 0xd9; u8 0x53; u8 0xda; u8 0x72; u8 0x5b;
    u8 0x79; u8 0xd0; u8 0x74; u8 0x54; u8 0xeb;
    u8 0x69; u8 0xbd; u8 0x00; u8 0x22; u8 0x35;
    u8 0xf3; u8 0x5a; u8 0x24; u8 0x1d; u8 0xec;
    u8 0x5f; u8 0x10; u8 0x88; u8 0x17; u8 0x7c;
  ] in
  assert_norm(List.Tot.length l == size_test70_key_schedule_context);
  l
let test70_key_schedule_context : lbytes size_test70_key_schedule_context = createL test70_key_schedule_context_list

// generated: "67d948b05d414b4bdf6e7d4ef8f1c9d268c52e9c6580eb24bd60d5e383097cfc85c348f3c3774257ae8ef919ee8e2f2ce379fb2ca0db0b2f72e3d271efde7cba"
inline_for_extraction
let size_test70_secret: size_nat = 64
let test70_secret_list : l:list uint8{List.Tot.length l == size_test70_secret} =
  [@inline_let]
  let l = [
    u8 0x67; u8 0xd9; u8 0x48; u8 0xb0; u8 0x5d;
    u8 0x41; u8 0x4b; u8 0x4b; u8 0xdf; u8 0x6e;
    u8 0x7d; u8 0x4e; u8 0xf8; u8 0xf1; u8 0xc9;
    u8 0xd2; u8 0x68; u8 0xc5; u8 0x2e; u8 0x9c;
    u8 0x65; u8 0x80; u8 0xeb; u8 0x24; u8 0xbd;
    u8 0x60; u8 0xd5; u8 0xe3; u8 0x83; u8 0x09;
    u8 0x7c; u8 0xfc; u8 0x85; u8 0xc3; u8 0x48;
    u8 0xf3; u8 0xc3; u8 0x77; u8 0x42; u8 0x57;
    u8 0xae; u8 0x8e; u8 0xf9; u8 0x19; u8 0xee;
    u8 0x8e; u8 0x2f; u8 0x2c; u8 0xe3; u8 0x79;
    u8 0xfb; u8 0x2c; u8 0xa0; u8 0xdb; u8 0x0b;
    u8 0x2f; u8 0x72; u8 0xe3; u8 0xd2; u8 0x71;
    u8 0xef; u8 0xde; u8 0x7c; u8 0xba;
  ] in
  assert_norm(List.Tot.length l == size_test70_secret);
  l
let test70_secret : lbytes size_test70_secret = createL test70_secret_list

// generated: "559d516c1b9afb0cde8e643b273b1032b27558428d493a47ba012c88ffcb7832"
inline_for_extraction
let size_test70_key: size_nat = 32
let test70_key_list : l:list uint8{List.Tot.length l == size_test70_key} =
  [@inline_let]
  let l = [
    u8 0x55; u8 0x9d; u8 0x51; u8 0x6c; u8 0x1b;
    u8 0x9a; u8 0xfb; u8 0x0c; u8 0xde; u8 0x8e;
    u8 0x64; u8 0x3b; u8 0x27; u8 0x3b; u8 0x10;
    u8 0x32; u8 0xb2; u8 0x75; u8 0x58; u8 0x42;
    u8 0x8d; u8 0x49; u8 0x3a; u8 0x47; u8 0xba;
    u8 0x01; u8 0x2c; u8 0x88; u8 0xff; u8 0xcb;
    u8 0x78; u8 0x32;
  ] in
  assert_norm(List.Tot.length l == size_test70_key);
  l
let test70_key : lbytes size_test70_key = createL test70_key_list

// generated: "32719d8a1b28db35a246545f"
inline_for_extraction
let size_test70_nonce: size_nat = 12
let test70_nonce_list : l:list uint8{List.Tot.length l == size_test70_nonce} =
  [@inline_let]
  let l = [
    u8 0x32; u8 0x71; u8 0x9d; u8 0x8a; u8 0x1b;
    u8 0x28; u8 0xdb; u8 0x35; u8 0xa2; u8 0x46;
    u8 0x54; u8 0x5f;
  ] in
  assert_norm(List.Tot.length l == size_test70_nonce);
  l
let test70_nonce : lbytes size_test70_nonce = createL test70_nonce_list

// generated: "f0a30d5ed75128770f2c8a8c31b8e4b2b0291c990391a9ee4447bc9594be6ed61805aa08c6b8b8b2d613810919cf044f34df52fdb17242b0f7618038e67c7ba0"
inline_for_extraction
let size_test70_exporterSecret: size_nat = 64
let test70_exporterSecret_list : l:list uint8{List.Tot.length l == size_test70_exporterSecret} =
  [@inline_let]
  let l = [
    u8 0xf0; u8 0xa3; u8 0x0d; u8 0x5e; u8 0xd7;
    u8 0x51; u8 0x28; u8 0x77; u8 0x0f; u8 0x2c;
    u8 0x8a; u8 0x8c; u8 0x31; u8 0xb8; u8 0xe4;
    u8 0xb2; u8 0xb0; u8 0x29; u8 0x1c; u8 0x99;
    u8 0x03; u8 0x91; u8 0xa9; u8 0xee; u8 0x44;
    u8 0x47; u8 0xbc; u8 0x95; u8 0x94; u8 0xbe;
    u8 0x6e; u8 0xd6; u8 0x18; u8 0x05; u8 0xaa;
    u8 0x08; u8 0xc6; u8 0xb8; u8 0xb8; u8 0xb2;
    u8 0xd6; u8 0x13; u8 0x81; u8 0x09; u8 0x19;
    u8 0xcf; u8 0x04; u8 0x4f; u8 0x34; u8 0xdf;
    u8 0x52; u8 0xfd; u8 0xb1; u8 0x72; u8 0x42;
    u8 0xb0; u8 0xf7; u8 0x61; u8 0x80; u8 0x38;
    u8 0xe6; u8 0x7c; u8 0x7b; u8 0xa0;
  ] in
  assert_norm(List.Tot.length l == size_test70_exporterSecret);
  l
let test70_exporterSecret : lbytes size_test70_exporterSecret = createL test70_exporterSecret_list

// generated: "436f756e742d30"
inline_for_extraction
let size_test70_encryption0_aad: size_nat = 7
let test70_encryption0_aad_list : l:list uint8{List.Tot.length l == size_test70_encryption0_aad} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x75; u8 0x6e; u8 0x74;
    u8 0x2d; u8 0x30;
  ] in
  assert_norm(List.Tot.length l == size_test70_encryption0_aad);
  l
let test70_encryption0_aad : lbytes size_test70_encryption0_aad = createL test70_encryption0_aad_list

// generated: "5d9af0c7ef9418551c37d4b563999808400d1cb2d9d1b9d46819800a9bc030793fd8f52363147d922fd92fe9cd"
inline_for_extraction
let size_test70_encryption0_ciphertext: size_nat = 45
let test70_encryption0_ciphertext_list : l:list uint8{List.Tot.length l == size_test70_encryption0_ciphertext} =
  [@inline_let]
  let l = [
    u8 0x5d; u8 0x9a; u8 0xf0; u8 0xc7; u8 0xef;
    u8 0x94; u8 0x18; u8 0x55; u8 0x1c; u8 0x37;
    u8 0xd4; u8 0xb5; u8 0x63; u8 0x99; u8 0x98;
    u8 0x08; u8 0x40; u8 0x0d; u8 0x1c; u8 0xb2;
    u8 0xd9; u8 0xd1; u8 0xb9; u8 0xd4; u8 0x68;
    u8 0x19; u8 0x80; u8 0x0a; u8 0x9b; u8 0xc0;
    u8 0x30; u8 0x79; u8 0x3f; u8 0xd8; u8 0xf5;
    u8 0x23; u8 0x63; u8 0x14; u8 0x7d; u8 0x92;
    u8 0x2f; u8 0xd9; u8 0x2f; u8 0xe9; u8 0xcd;
  ] in
  assert_norm(List.Tot.length l == size_test70_encryption0_ciphertext);
  l
let test70_encryption0_ciphertext : lbytes size_test70_encryption0_ciphertext = createL test70_encryption0_ciphertext_list

// generated: "32719d8a1b28db35a246545f"
inline_for_extraction
let size_test70_encryption0_nonce: size_nat = 12
let test70_encryption0_nonce_list : l:list uint8{List.Tot.length l == size_test70_encryption0_nonce} =
  [@inline_let]
  let l = [
    u8 0x32; u8 0x71; u8 0x9d; u8 0x8a; u8 0x1b;
    u8 0x28; u8 0xdb; u8 0x35; u8 0xa2; u8 0x46;
    u8 0x54; u8 0x5f;
  ] in
  assert_norm(List.Tot.length l == size_test70_encryption0_nonce);
  l
let test70_encryption0_nonce : lbytes size_test70_encryption0_nonce = createL test70_encryption0_nonce_list

// generated: "4265617574792069732074727574682c20747275746820626561757479"
inline_for_extraction
let size_test70_encryption0_plaintext: size_nat = 29
let test70_encryption0_plaintext_list : l:list uint8{List.Tot.length l == size_test70_encryption0_plaintext} =
  [@inline_let]
  let l = [
    u8 0x42; u8 0x65; u8 0x61; u8 0x75; u8 0x74;
    u8 0x79; u8 0x20; u8 0x69; u8 0x73; u8 0x20;
    u8 0x74; u8 0x72; u8 0x75; u8 0x74; u8 0x68;
    u8 0x2c; u8 0x20; u8 0x74; u8 0x72; u8 0x75;
    u8 0x74; u8 0x68; u8 0x20; u8 0x62; u8 0x65;
    u8 0x61; u8 0x75; u8 0x74; u8 0x79;
  ] in
  assert_norm(List.Tot.length l == size_test70_encryption0_plaintext);
  l
let test70_encryption0_plaintext : lbytes size_test70_encryption0_plaintext = createL test70_encryption0_plaintext_list

// generated: "436f756e742d31"
inline_for_extraction
let size_test70_encryption1_aad: size_nat = 7
let test70_encryption1_aad_list : l:list uint8{List.Tot.length l == size_test70_encryption1_aad} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x75; u8 0x6e; u8 0x74;
    u8 0x2d; u8 0x31;
  ] in
  assert_norm(List.Tot.length l == size_test70_encryption1_aad);
  l
let test70_encryption1_aad : lbytes size_test70_encryption1_aad = createL test70_encryption1_aad_list

// generated: "35c9cf97b8e5442c0f7f73369d4261bd2b0f3ddff670d9bc6386ce29312547c224a0ab7f2bebd485c08eec1306"
inline_for_extraction
let size_test70_encryption1_ciphertext: size_nat = 45
let test70_encryption1_ciphertext_list : l:list uint8{List.Tot.length l == size_test70_encryption1_ciphertext} =
  [@inline_let]
  let l = [
    u8 0x35; u8 0xc9; u8 0xcf; u8 0x97; u8 0xb8;
    u8 0xe5; u8 0x44; u8 0x2c; u8 0x0f; u8 0x7f;
    u8 0x73; u8 0x36; u8 0x9d; u8 0x42; u8 0x61;
    u8 0xbd; u8 0x2b; u8 0x0f; u8 0x3d; u8 0xdf;
    u8 0xf6; u8 0x70; u8 0xd9; u8 0xbc; u8 0x63;
    u8 0x86; u8 0xce; u8 0x29; u8 0x31; u8 0x25;
    u8 0x47; u8 0xc2; u8 0x24; u8 0xa0; u8 0xab;
    u8 0x7f; u8 0x2b; u8 0xeb; u8 0xd4; u8 0x85;
    u8 0xc0; u8 0x8e; u8 0xec; u8 0x13; u8 0x06;
  ] in
  assert_norm(List.Tot.length l == size_test70_encryption1_ciphertext);
  l
let test70_encryption1_ciphertext : lbytes size_test70_encryption1_ciphertext = createL test70_encryption1_ciphertext_list

// generated: "32719d8a1b28db35a246545e"
inline_for_extraction
let size_test70_encryption1_nonce: size_nat = 12
let test70_encryption1_nonce_list : l:list uint8{List.Tot.length l == size_test70_encryption1_nonce} =
  [@inline_let]
  let l = [
    u8 0x32; u8 0x71; u8 0x9d; u8 0x8a; u8 0x1b;
    u8 0x28; u8 0xdb; u8 0x35; u8 0xa2; u8 0x46;
    u8 0x54; u8 0x5e;
  ] in
  assert_norm(List.Tot.length l == size_test70_encryption1_nonce);
  l
let test70_encryption1_nonce : lbytes size_test70_encryption1_nonce = createL test70_encryption1_nonce_list

// generated: "4265617574792069732074727574682c20747275746820626561757479"
inline_for_extraction
let size_test70_encryption1_plaintext: size_nat = 29
let test70_encryption1_plaintext_list : l:list uint8{List.Tot.length l == size_test70_encryption1_plaintext} =
  [@inline_let]
  let l = [
    u8 0x42; u8 0x65; u8 0x61; u8 0x75; u8 0x74;
    u8 0x79; u8 0x20; u8 0x69; u8 0x73; u8 0x20;
    u8 0x74; u8 0x72; u8 0x75; u8 0x74; u8 0x68;
    u8 0x2c; u8 0x20; u8 0x74; u8 0x72; u8 0x75;
    u8 0x74; u8 0x68; u8 0x20; u8 0x62; u8 0x65;
    u8 0x61; u8 0x75; u8 0x74; u8 0x79;
  ] in
  assert_norm(List.Tot.length l == size_test70_encryption1_plaintext);
  l
let test70_encryption1_plaintext : lbytes size_test70_encryption1_plaintext = createL test70_encryption1_plaintext_list

// generated: "436f756e742d32"
inline_for_extraction
let size_test70_encryption2_aad: size_nat = 7
let test70_encryption2_aad_list : l:list uint8{List.Tot.length l == size_test70_encryption2_aad} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x75; u8 0x6e; u8 0x74;
    u8 0x2d; u8 0x32;
  ] in
  assert_norm(List.Tot.length l == size_test70_encryption2_aad);
  l
let test70_encryption2_aad : lbytes size_test70_encryption2_aad = createL test70_encryption2_aad_list

// generated: "3bf0a886351b0fe2368e3d005b75fa6cb9cc815a02a30f31c37dc33395509f3039d9c063568be60b2968334046"
inline_for_extraction
let size_test70_encryption2_ciphertext: size_nat = 45
let test70_encryption2_ciphertext_list : l:list uint8{List.Tot.length l == size_test70_encryption2_ciphertext} =
  [@inline_let]
  let l = [
    u8 0x3b; u8 0xf0; u8 0xa8; u8 0x86; u8 0x35;
    u8 0x1b; u8 0x0f; u8 0xe2; u8 0x36; u8 0x8e;
    u8 0x3d; u8 0x00; u8 0x5b; u8 0x75; u8 0xfa;
    u8 0x6c; u8 0xb9; u8 0xcc; u8 0x81; u8 0x5a;
    u8 0x02; u8 0xa3; u8 0x0f; u8 0x31; u8 0xc3;
    u8 0x7d; u8 0xc3; u8 0x33; u8 0x95; u8 0x50;
    u8 0x9f; u8 0x30; u8 0x39; u8 0xd9; u8 0xc0;
    u8 0x63; u8 0x56; u8 0x8b; u8 0xe6; u8 0x0b;
    u8 0x29; u8 0x68; u8 0x33; u8 0x40; u8 0x46;
  ] in
  assert_norm(List.Tot.length l == size_test70_encryption2_ciphertext);
  l
let test70_encryption2_ciphertext : lbytes size_test70_encryption2_ciphertext = createL test70_encryption2_ciphertext_list

// generated: "32719d8a1b28db35a246545d"
inline_for_extraction
let size_test70_encryption2_nonce: size_nat = 12
let test70_encryption2_nonce_list : l:list uint8{List.Tot.length l == size_test70_encryption2_nonce} =
  [@inline_let]
  let l = [
    u8 0x32; u8 0x71; u8 0x9d; u8 0x8a; u8 0x1b;
    u8 0x28; u8 0xdb; u8 0x35; u8 0xa2; u8 0x46;
    u8 0x54; u8 0x5d;
  ] in
  assert_norm(List.Tot.length l == size_test70_encryption2_nonce);
  l
let test70_encryption2_nonce : lbytes size_test70_encryption2_nonce = createL test70_encryption2_nonce_list

// generated: "4265617574792069732074727574682c20747275746820626561757479"
inline_for_extraction
let size_test70_encryption2_plaintext: size_nat = 29
let test70_encryption2_plaintext_list : l:list uint8{List.Tot.length l == size_test70_encryption2_plaintext} =
  [@inline_let]
  let l = [
    u8 0x42; u8 0x65; u8 0x61; u8 0x75; u8 0x74;
    u8 0x79; u8 0x20; u8 0x69; u8 0x73; u8 0x20;
    u8 0x74; u8 0x72; u8 0x75; u8 0x74; u8 0x68;
    u8 0x2c; u8 0x20; u8 0x74; u8 0x72; u8 0x75;
    u8 0x74; u8 0x68; u8 0x20; u8 0x62; u8 0x65;
    u8 0x61; u8 0x75; u8 0x74; u8 0x79;
  ] in
  assert_norm(List.Tot.length l == size_test70_encryption2_plaintext);
  l
let test70_encryption2_plaintext : lbytes size_test70_encryption2_plaintext = createL test70_encryption2_plaintext_list

// generated: "436f756e742d33"
inline_for_extraction
let size_test70_encryption3_aad: size_nat = 7
let test70_encryption3_aad_list : l:list uint8{List.Tot.length l == size_test70_encryption3_aad} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x75; u8 0x6e; u8 0x74;
    u8 0x2d; u8 0x33;
  ] in
  assert_norm(List.Tot.length l == size_test70_encryption3_aad);
  l
let test70_encryption3_aad : lbytes size_test70_encryption3_aad = createL test70_encryption3_aad_list

// generated: "4cf041a69a3ed2c43f5aaeeed0ef0d6c986a7ff9724faf0c5532d2e23310ad90a37204d68fe08eea8e6dbb0505"
inline_for_extraction
let size_test70_encryption3_ciphertext: size_nat = 45
let test70_encryption3_ciphertext_list : l:list uint8{List.Tot.length l == size_test70_encryption3_ciphertext} =
  [@inline_let]
  let l = [
    u8 0x4c; u8 0xf0; u8 0x41; u8 0xa6; u8 0x9a;
    u8 0x3e; u8 0xd2; u8 0xc4; u8 0x3f; u8 0x5a;
    u8 0xae; u8 0xee; u8 0xd0; u8 0xef; u8 0x0d;
    u8 0x6c; u8 0x98; u8 0x6a; u8 0x7f; u8 0xf9;
    u8 0x72; u8 0x4f; u8 0xaf; u8 0x0c; u8 0x55;
    u8 0x32; u8 0xd2; u8 0xe2; u8 0x33; u8 0x10;
    u8 0xad; u8 0x90; u8 0xa3; u8 0x72; u8 0x04;
    u8 0xd6; u8 0x8f; u8 0xe0; u8 0x8e; u8 0xea;
    u8 0x8e; u8 0x6d; u8 0xbb; u8 0x05; u8 0x05;
  ] in
  assert_norm(List.Tot.length l == size_test70_encryption3_ciphertext);
  l
let test70_encryption3_ciphertext : lbytes size_test70_encryption3_ciphertext = createL test70_encryption3_ciphertext_list

// generated: "32719d8a1b28db35a246545c"
inline_for_extraction
let size_test70_encryption3_nonce: size_nat = 12
let test70_encryption3_nonce_list : l:list uint8{List.Tot.length l == size_test70_encryption3_nonce} =
  [@inline_let]
  let l = [
    u8 0x32; u8 0x71; u8 0x9d; u8 0x8a; u8 0x1b;
    u8 0x28; u8 0xdb; u8 0x35; u8 0xa2; u8 0x46;
    u8 0x54; u8 0x5c;
  ] in
  assert_norm(List.Tot.length l == size_test70_encryption3_nonce);
  l
let test70_encryption3_nonce : lbytes size_test70_encryption3_nonce = createL test70_encryption3_nonce_list

// generated: "4265617574792069732074727574682c20747275746820626561757479"
inline_for_extraction
let size_test70_encryption3_plaintext: size_nat = 29
let test70_encryption3_plaintext_list : l:list uint8{List.Tot.length l == size_test70_encryption3_plaintext} =
  [@inline_let]
  let l = [
    u8 0x42; u8 0x65; u8 0x61; u8 0x75; u8 0x74;
    u8 0x79; u8 0x20; u8 0x69; u8 0x73; u8 0x20;
    u8 0x74; u8 0x72; u8 0x75; u8 0x74; u8 0x68;
    u8 0x2c; u8 0x20; u8 0x74; u8 0x72; u8 0x75;
    u8 0x74; u8 0x68; u8 0x20; u8 0x62; u8 0x65;
    u8 0x61; u8 0x75; u8 0x74; u8 0x79;
  ] in
  assert_norm(List.Tot.length l == size_test70_encryption3_plaintext);
  l
let test70_encryption3_plaintext : lbytes size_test70_encryption3_plaintext = createL test70_encryption3_plaintext_list

// generated: "436f756e742d34"
inline_for_extraction
let size_test70_encryption4_aad: size_nat = 7
let test70_encryption4_aad_list : l:list uint8{List.Tot.length l == size_test70_encryption4_aad} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x75; u8 0x6e; u8 0x74;
    u8 0x2d; u8 0x34;
  ] in
  assert_norm(List.Tot.length l == size_test70_encryption4_aad);
  l
let test70_encryption4_aad : lbytes size_test70_encryption4_aad = createL test70_encryption4_aad_list

// generated: "b65955be8ca355f7f2a60d6c94f79b2c114eeb96218dd151f7f45cc282233aca3b364c262efd45333651812081"
inline_for_extraction
let size_test70_encryption4_ciphertext: size_nat = 45
let test70_encryption4_ciphertext_list : l:list uint8{List.Tot.length l == size_test70_encryption4_ciphertext} =
  [@inline_let]
  let l = [
    u8 0xb6; u8 0x59; u8 0x55; u8 0xbe; u8 0x8c;
    u8 0xa3; u8 0x55; u8 0xf7; u8 0xf2; u8 0xa6;
    u8 0x0d; u8 0x6c; u8 0x94; u8 0xf7; u8 0x9b;
    u8 0x2c; u8 0x11; u8 0x4e; u8 0xeb; u8 0x96;
    u8 0x21; u8 0x8d; u8 0xd1; u8 0x51; u8 0xf7;
    u8 0xf4; u8 0x5c; u8 0xc2; u8 0x82; u8 0x23;
    u8 0x3a; u8 0xca; u8 0x3b; u8 0x36; u8 0x4c;
    u8 0x26; u8 0x2e; u8 0xfd; u8 0x45; u8 0x33;
    u8 0x36; u8 0x51; u8 0x81; u8 0x20; u8 0x81;
  ] in
  assert_norm(List.Tot.length l == size_test70_encryption4_ciphertext);
  l
let test70_encryption4_ciphertext : lbytes size_test70_encryption4_ciphertext = createL test70_encryption4_ciphertext_list

// generated: "32719d8a1b28db35a246545b"
inline_for_extraction
let size_test70_encryption4_nonce: size_nat = 12
let test70_encryption4_nonce_list : l:list uint8{List.Tot.length l == size_test70_encryption4_nonce} =
  [@inline_let]
  let l = [
    u8 0x32; u8 0x71; u8 0x9d; u8 0x8a; u8 0x1b;
    u8 0x28; u8 0xdb; u8 0x35; u8 0xa2; u8 0x46;
    u8 0x54; u8 0x5b;
  ] in
  assert_norm(List.Tot.length l == size_test70_encryption4_nonce);
  l
let test70_encryption4_nonce : lbytes size_test70_encryption4_nonce = createL test70_encryption4_nonce_list

// generated: "4265617574792069732074727574682c20747275746820626561757479"
inline_for_extraction
let size_test70_encryption4_plaintext: size_nat = 29
let test70_encryption4_plaintext_list : l:list uint8{List.Tot.length l == size_test70_encryption4_plaintext} =
  [@inline_let]
  let l = [
    u8 0x42; u8 0x65; u8 0x61; u8 0x75; u8 0x74;
    u8 0x79; u8 0x20; u8 0x69; u8 0x73; u8 0x20;
    u8 0x74; u8 0x72; u8 0x75; u8 0x74; u8 0x68;
    u8 0x2c; u8 0x20; u8 0x74; u8 0x72; u8 0x75;
    u8 0x74; u8 0x68; u8 0x20; u8 0x62; u8 0x65;
    u8 0x61; u8 0x75; u8 0x74; u8 0x79;
  ] in
  assert_norm(List.Tot.length l == size_test70_encryption4_plaintext);
  l
let test70_encryption4_plaintext : lbytes size_test70_encryption4_plaintext = createL test70_encryption4_plaintext_list

// generated: "436f756e742d35"
inline_for_extraction
let size_test70_encryption5_aad: size_nat = 7
let test70_encryption5_aad_list : l:list uint8{List.Tot.length l == size_test70_encryption5_aad} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x75; u8 0x6e; u8 0x74;
    u8 0x2d; u8 0x35;
  ] in
  assert_norm(List.Tot.length l == size_test70_encryption5_aad);
  l
let test70_encryption5_aad : lbytes size_test70_encryption5_aad = createL test70_encryption5_aad_list

// generated: "21a0ee8c34f894338890e0b0d3262076b8565b28e4c9ce052b34aedf2c231b0b8f008c4a24f14e1b6fd793c147"
inline_for_extraction
let size_test70_encryption5_ciphertext: size_nat = 45
let test70_encryption5_ciphertext_list : l:list uint8{List.Tot.length l == size_test70_encryption5_ciphertext} =
  [@inline_let]
  let l = [
    u8 0x21; u8 0xa0; u8 0xee; u8 0x8c; u8 0x34;
    u8 0xf8; u8 0x94; u8 0x33; u8 0x88; u8 0x90;
    u8 0xe0; u8 0xb0; u8 0xd3; u8 0x26; u8 0x20;
    u8 0x76; u8 0xb8; u8 0x56; u8 0x5b; u8 0x28;
    u8 0xe4; u8 0xc9; u8 0xce; u8 0x05; u8 0x2b;
    u8 0x34; u8 0xae; u8 0xdf; u8 0x2c; u8 0x23;
    u8 0x1b; u8 0x0b; u8 0x8f; u8 0x00; u8 0x8c;
    u8 0x4a; u8 0x24; u8 0xf1; u8 0x4e; u8 0x1b;
    u8 0x6f; u8 0xd7; u8 0x93; u8 0xc1; u8 0x47;
  ] in
  assert_norm(List.Tot.length l == size_test70_encryption5_ciphertext);
  l
let test70_encryption5_ciphertext : lbytes size_test70_encryption5_ciphertext = createL test70_encryption5_ciphertext_list

// generated: "32719d8a1b28db35a246545a"
inline_for_extraction
let size_test70_encryption5_nonce: size_nat = 12
let test70_encryption5_nonce_list : l:list uint8{List.Tot.length l == size_test70_encryption5_nonce} =
  [@inline_let]
  let l = [
    u8 0x32; u8 0x71; u8 0x9d; u8 0x8a; u8 0x1b;
    u8 0x28; u8 0xdb; u8 0x35; u8 0xa2; u8 0x46;
    u8 0x54; u8 0x5a;
  ] in
  assert_norm(List.Tot.length l == size_test70_encryption5_nonce);
  l
let test70_encryption5_nonce : lbytes size_test70_encryption5_nonce = createL test70_encryption5_nonce_list

// generated: "4265617574792069732074727574682c20747275746820626561757479"
inline_for_extraction
let size_test70_encryption5_plaintext: size_nat = 29
let test70_encryption5_plaintext_list : l:list uint8{List.Tot.length l == size_test70_encryption5_plaintext} =
  [@inline_let]
  let l = [
    u8 0x42; u8 0x65; u8 0x61; u8 0x75; u8 0x74;
    u8 0x79; u8 0x20; u8 0x69; u8 0x73; u8 0x20;
    u8 0x74; u8 0x72; u8 0x75; u8 0x74; u8 0x68;
    u8 0x2c; u8 0x20; u8 0x74; u8 0x72; u8 0x75;
    u8 0x74; u8 0x68; u8 0x20; u8 0x62; u8 0x65;
    u8 0x61; u8 0x75; u8 0x74; u8 0x79;
  ] in
  assert_norm(List.Tot.length l == size_test70_encryption5_plaintext);
  l
let test70_encryption5_plaintext : lbytes size_test70_encryption5_plaintext = createL test70_encryption5_plaintext_list

// generated: "436f756e742d36"
inline_for_extraction
let size_test70_encryption6_aad: size_nat = 7
let test70_encryption6_aad_list : l:list uint8{List.Tot.length l == size_test70_encryption6_aad} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x75; u8 0x6e; u8 0x74;
    u8 0x2d; u8 0x36;
  ] in
  assert_norm(List.Tot.length l == size_test70_encryption6_aad);
  l
let test70_encryption6_aad : lbytes size_test70_encryption6_aad = createL test70_encryption6_aad_list

// generated: "cf5e805e8dedfa54d2d0c14cd113a522916c65723e0653047c535661610bbf60c1e493b47fcae8cfcd4f7f817c"
inline_for_extraction
let size_test70_encryption6_ciphertext: size_nat = 45
let test70_encryption6_ciphertext_list : l:list uint8{List.Tot.length l == size_test70_encryption6_ciphertext} =
  [@inline_let]
  let l = [
    u8 0xcf; u8 0x5e; u8 0x80; u8 0x5e; u8 0x8d;
    u8 0xed; u8 0xfa; u8 0x54; u8 0xd2; u8 0xd0;
    u8 0xc1; u8 0x4c; u8 0xd1; u8 0x13; u8 0xa5;
    u8 0x22; u8 0x91; u8 0x6c; u8 0x65; u8 0x72;
    u8 0x3e; u8 0x06; u8 0x53; u8 0x04; u8 0x7c;
    u8 0x53; u8 0x56; u8 0x61; u8 0x61; u8 0x0b;
    u8 0xbf; u8 0x60; u8 0xc1; u8 0xe4; u8 0x93;
    u8 0xb4; u8 0x7f; u8 0xca; u8 0xe8; u8 0xcf;
    u8 0xcd; u8 0x4f; u8 0x7f; u8 0x81; u8 0x7c;
  ] in
  assert_norm(List.Tot.length l == size_test70_encryption6_ciphertext);
  l
let test70_encryption6_ciphertext : lbytes size_test70_encryption6_ciphertext = createL test70_encryption6_ciphertext_list

// generated: "32719d8a1b28db35a2465459"
inline_for_extraction
let size_test70_encryption6_nonce: size_nat = 12
let test70_encryption6_nonce_list : l:list uint8{List.Tot.length l == size_test70_encryption6_nonce} =
  [@inline_let]
  let l = [
    u8 0x32; u8 0x71; u8 0x9d; u8 0x8a; u8 0x1b;
    u8 0x28; u8 0xdb; u8 0x35; u8 0xa2; u8 0x46;
    u8 0x54; u8 0x59;
  ] in
  assert_norm(List.Tot.length l == size_test70_encryption6_nonce);
  l
let test70_encryption6_nonce : lbytes size_test70_encryption6_nonce = createL test70_encryption6_nonce_list

// generated: "4265617574792069732074727574682c20747275746820626561757479"
inline_for_extraction
let size_test70_encryption6_plaintext: size_nat = 29
let test70_encryption6_plaintext_list : l:list uint8{List.Tot.length l == size_test70_encryption6_plaintext} =
  [@inline_let]
  let l = [
    u8 0x42; u8 0x65; u8 0x61; u8 0x75; u8 0x74;
    u8 0x79; u8 0x20; u8 0x69; u8 0x73; u8 0x20;
    u8 0x74; u8 0x72; u8 0x75; u8 0x74; u8 0x68;
    u8 0x2c; u8 0x20; u8 0x74; u8 0x72; u8 0x75;
    u8 0x74; u8 0x68; u8 0x20; u8 0x62; u8 0x65;
    u8 0x61; u8 0x75; u8 0x74; u8 0x79;
  ] in
  assert_norm(List.Tot.length l == size_test70_encryption6_plaintext);
  l
let test70_encryption6_plaintext : lbytes size_test70_encryption6_plaintext = createL test70_encryption6_plaintext_list

// generated: "436f756e742d37"
inline_for_extraction
let size_test70_encryption7_aad: size_nat = 7
let test70_encryption7_aad_list : l:list uint8{List.Tot.length l == size_test70_encryption7_aad} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x75; u8 0x6e; u8 0x74;
    u8 0x2d; u8 0x37;
  ] in
  assert_norm(List.Tot.length l == size_test70_encryption7_aad);
  l
let test70_encryption7_aad : lbytes size_test70_encryption7_aad = createL test70_encryption7_aad_list

// generated: "10331dc8cb039b26cf99058d22a8e64448fa791a7dc5d8acb2539a4333d695ea1a771108b16b440e468d2bc778"
inline_for_extraction
let size_test70_encryption7_ciphertext: size_nat = 45
let test70_encryption7_ciphertext_list : l:list uint8{List.Tot.length l == size_test70_encryption7_ciphertext} =
  [@inline_let]
  let l = [
    u8 0x10; u8 0x33; u8 0x1d; u8 0xc8; u8 0xcb;
    u8 0x03; u8 0x9b; u8 0x26; u8 0xcf; u8 0x99;
    u8 0x05; u8 0x8d; u8 0x22; u8 0xa8; u8 0xe6;
    u8 0x44; u8 0x48; u8 0xfa; u8 0x79; u8 0x1a;
    u8 0x7d; u8 0xc5; u8 0xd8; u8 0xac; u8 0xb2;
    u8 0x53; u8 0x9a; u8 0x43; u8 0x33; u8 0xd6;
    u8 0x95; u8 0xea; u8 0x1a; u8 0x77; u8 0x11;
    u8 0x08; u8 0xb1; u8 0x6b; u8 0x44; u8 0x0e;
    u8 0x46; u8 0x8d; u8 0x2b; u8 0xc7; u8 0x78;
  ] in
  assert_norm(List.Tot.length l == size_test70_encryption7_ciphertext);
  l
let test70_encryption7_ciphertext : lbytes size_test70_encryption7_ciphertext = createL test70_encryption7_ciphertext_list

// generated: "32719d8a1b28db35a2465458"
inline_for_extraction
let size_test70_encryption7_nonce: size_nat = 12
let test70_encryption7_nonce_list : l:list uint8{List.Tot.length l == size_test70_encryption7_nonce} =
  [@inline_let]
  let l = [
    u8 0x32; u8 0x71; u8 0x9d; u8 0x8a; u8 0x1b;
    u8 0x28; u8 0xdb; u8 0x35; u8 0xa2; u8 0x46;
    u8 0x54; u8 0x58;
  ] in
  assert_norm(List.Tot.length l == size_test70_encryption7_nonce);
  l
let test70_encryption7_nonce : lbytes size_test70_encryption7_nonce = createL test70_encryption7_nonce_list

// generated: "4265617574792069732074727574682c20747275746820626561757479"
inline_for_extraction
let size_test70_encryption7_plaintext: size_nat = 29
let test70_encryption7_plaintext_list : l:list uint8{List.Tot.length l == size_test70_encryption7_plaintext} =
  [@inline_let]
  let l = [
    u8 0x42; u8 0x65; u8 0x61; u8 0x75; u8 0x74;
    u8 0x79; u8 0x20; u8 0x69; u8 0x73; u8 0x20;
    u8 0x74; u8 0x72; u8 0x75; u8 0x74; u8 0x68;
    u8 0x2c; u8 0x20; u8 0x74; u8 0x72; u8 0x75;
    u8 0x74; u8 0x68; u8 0x20; u8 0x62; u8 0x65;
    u8 0x61; u8 0x75; u8 0x74; u8 0x79;
  ] in
  assert_norm(List.Tot.length l == size_test70_encryption7_plaintext);
  l
let test70_encryption7_plaintext : lbytes size_test70_encryption7_plaintext = createL test70_encryption7_plaintext_list

// generated: "436f756e742d38"
inline_for_extraction
let size_test70_encryption8_aad: size_nat = 7
let test70_encryption8_aad_list : l:list uint8{List.Tot.length l == size_test70_encryption8_aad} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x75; u8 0x6e; u8 0x74;
    u8 0x2d; u8 0x38;
  ] in
  assert_norm(List.Tot.length l == size_test70_encryption8_aad);
  l
let test70_encryption8_aad : lbytes size_test70_encryption8_aad = createL test70_encryption8_aad_list

// generated: "dade52e6567aad2be8d7fb54cddaf80a9c9d15bb33e5cecb866414befd5ba9241a3e0db958c3d119ad683bbb53"
inline_for_extraction
let size_test70_encryption8_ciphertext: size_nat = 45
let test70_encryption8_ciphertext_list : l:list uint8{List.Tot.length l == size_test70_encryption8_ciphertext} =
  [@inline_let]
  let l = [
    u8 0xda; u8 0xde; u8 0x52; u8 0xe6; u8 0x56;
    u8 0x7a; u8 0xad; u8 0x2b; u8 0xe8; u8 0xd7;
    u8 0xfb; u8 0x54; u8 0xcd; u8 0xda; u8 0xf8;
    u8 0x0a; u8 0x9c; u8 0x9d; u8 0x15; u8 0xbb;
    u8 0x33; u8 0xe5; u8 0xce; u8 0xcb; u8 0x86;
    u8 0x64; u8 0x14; u8 0xbe; u8 0xfd; u8 0x5b;
    u8 0xa9; u8 0x24; u8 0x1a; u8 0x3e; u8 0x0d;
    u8 0xb9; u8 0x58; u8 0xc3; u8 0xd1; u8 0x19;
    u8 0xad; u8 0x68; u8 0x3b; u8 0xbb; u8 0x53;
  ] in
  assert_norm(List.Tot.length l == size_test70_encryption8_ciphertext);
  l
let test70_encryption8_ciphertext : lbytes size_test70_encryption8_ciphertext = createL test70_encryption8_ciphertext_list

// generated: "32719d8a1b28db35a2465457"
inline_for_extraction
let size_test70_encryption8_nonce: size_nat = 12
let test70_encryption8_nonce_list : l:list uint8{List.Tot.length l == size_test70_encryption8_nonce} =
  [@inline_let]
  let l = [
    u8 0x32; u8 0x71; u8 0x9d; u8 0x8a; u8 0x1b;
    u8 0x28; u8 0xdb; u8 0x35; u8 0xa2; u8 0x46;
    u8 0x54; u8 0x57;
  ] in
  assert_norm(List.Tot.length l == size_test70_encryption8_nonce);
  l
let test70_encryption8_nonce : lbytes size_test70_encryption8_nonce = createL test70_encryption8_nonce_list

// generated: "4265617574792069732074727574682c20747275746820626561757479"
inline_for_extraction
let size_test70_encryption8_plaintext: size_nat = 29
let test70_encryption8_plaintext_list : l:list uint8{List.Tot.length l == size_test70_encryption8_plaintext} =
  [@inline_let]
  let l = [
    u8 0x42; u8 0x65; u8 0x61; u8 0x75; u8 0x74;
    u8 0x79; u8 0x20; u8 0x69; u8 0x73; u8 0x20;
    u8 0x74; u8 0x72; u8 0x75; u8 0x74; u8 0x68;
    u8 0x2c; u8 0x20; u8 0x74; u8 0x72; u8 0x75;
    u8 0x74; u8 0x68; u8 0x20; u8 0x62; u8 0x65;
    u8 0x61; u8 0x75; u8 0x74; u8 0x79;
  ] in
  assert_norm(List.Tot.length l == size_test70_encryption8_plaintext);
  l
let test70_encryption8_plaintext : lbytes size_test70_encryption8_plaintext = createL test70_encryption8_plaintext_list

// generated: "436f756e742d39"
inline_for_extraction
let size_test70_encryption9_aad: size_nat = 7
let test70_encryption9_aad_list : l:list uint8{List.Tot.length l == size_test70_encryption9_aad} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x75; u8 0x6e; u8 0x74;
    u8 0x2d; u8 0x39;
  ] in
  assert_norm(List.Tot.length l == size_test70_encryption9_aad);
  l
let test70_encryption9_aad : lbytes size_test70_encryption9_aad = createL test70_encryption9_aad_list

// generated: "7b7775b781db384851141a9555c3bdf0bbdd8651c617e30c0a3e631a9bc2b7d9e87f5817999a7b16add8b6df71"
inline_for_extraction
let size_test70_encryption9_ciphertext: size_nat = 45
let test70_encryption9_ciphertext_list : l:list uint8{List.Tot.length l == size_test70_encryption9_ciphertext} =
  [@inline_let]
  let l = [
    u8 0x7b; u8 0x77; u8 0x75; u8 0xb7; u8 0x81;
    u8 0xdb; u8 0x38; u8 0x48; u8 0x51; u8 0x14;
    u8 0x1a; u8 0x95; u8 0x55; u8 0xc3; u8 0xbd;
    u8 0xf0; u8 0xbb; u8 0xdd; u8 0x86; u8 0x51;
    u8 0xc6; u8 0x17; u8 0xe3; u8 0x0c; u8 0x0a;
    u8 0x3e; u8 0x63; u8 0x1a; u8 0x9b; u8 0xc2;
    u8 0xb7; u8 0xd9; u8 0xe8; u8 0x7f; u8 0x58;
    u8 0x17; u8 0x99; u8 0x9a; u8 0x7b; u8 0x16;
    u8 0xad; u8 0xd8; u8 0xb6; u8 0xdf; u8 0x71;
  ] in
  assert_norm(List.Tot.length l == size_test70_encryption9_ciphertext);
  l
let test70_encryption9_ciphertext : lbytes size_test70_encryption9_ciphertext = createL test70_encryption9_ciphertext_list

// generated: "32719d8a1b28db35a2465456"
inline_for_extraction
let size_test70_encryption9_nonce: size_nat = 12
let test70_encryption9_nonce_list : l:list uint8{List.Tot.length l == size_test70_encryption9_nonce} =
  [@inline_let]
  let l = [
    u8 0x32; u8 0x71; u8 0x9d; u8 0x8a; u8 0x1b;
    u8 0x28; u8 0xdb; u8 0x35; u8 0xa2; u8 0x46;
    u8 0x54; u8 0x56;
  ] in
  assert_norm(List.Tot.length l == size_test70_encryption9_nonce);
  l
let test70_encryption9_nonce : lbytes size_test70_encryption9_nonce = createL test70_encryption9_nonce_list

// generated: "4265617574792069732074727574682c20747275746820626561757479"
inline_for_extraction
let size_test70_encryption9_plaintext: size_nat = 29
let test70_encryption9_plaintext_list : l:list uint8{List.Tot.length l == size_test70_encryption9_plaintext} =
  [@inline_let]
  let l = [
    u8 0x42; u8 0x65; u8 0x61; u8 0x75; u8 0x74;
    u8 0x79; u8 0x20; u8 0x69; u8 0x73; u8 0x20;
    u8 0x74; u8 0x72; u8 0x75; u8 0x74; u8 0x68;
    u8 0x2c; u8 0x20; u8 0x74; u8 0x72; u8 0x75;
    u8 0x74; u8 0x68; u8 0x20; u8 0x62; u8 0x65;
    u8 0x61; u8 0x75; u8 0x74; u8 0x79;
  ] in
  assert_norm(List.Tot.length l == size_test70_encryption9_plaintext);
  l
let test70_encryption9_plaintext : lbytes size_test70_encryption9_plaintext = createL test70_encryption9_plaintext_list

// generated: "436f6e746578742d30"
inline_for_extraction
let size_test70_export0_exportContext: size_nat = 9
let test70_export0_exportContext_list : l:list uint8{List.Tot.length l == size_test70_export0_exportContext} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x6e; u8 0x74; u8 0x65;
    u8 0x78; u8 0x74; u8 0x2d; u8 0x30;
  ] in
  assert_norm(List.Tot.length l == size_test70_export0_exportContext);
  l
let test70_export0_exportContext : lbytes size_test70_export0_exportContext = createL test70_export0_exportContext_list

// generated: "0ce13d96b579217e55b456dd9a4eb606464ff9afbb71b0ce137f907bebe24a7a"
inline_for_extraction
let size_test70_export0_exportValue: size_nat = 32
let test70_export0_exportValue_list : l:list uint8{List.Tot.length l == size_test70_export0_exportValue} =
  [@inline_let]
  let l = [
    u8 0x0c; u8 0xe1; u8 0x3d; u8 0x96; u8 0xb5;
    u8 0x79; u8 0x21; u8 0x7e; u8 0x55; u8 0xb4;
    u8 0x56; u8 0xdd; u8 0x9a; u8 0x4e; u8 0xb6;
    u8 0x06; u8 0x46; u8 0x4f; u8 0xf9; u8 0xaf;
    u8 0xbb; u8 0x71; u8 0xb0; u8 0xce; u8 0x13;
    u8 0x7f; u8 0x90; u8 0x7b; u8 0xeb; u8 0xe2;
    u8 0x4a; u8 0x7a;
  ] in
  assert_norm(List.Tot.length l == size_test70_export0_exportValue);
  l
let test70_export0_exportValue : lbytes size_test70_export0_exportValue = createL test70_export0_exportValue_list

let test70_export0_len:size_nat = 32
// generated: "436f6e746578742d31"
inline_for_extraction
let size_test70_export1_exportContext: size_nat = 9
let test70_export1_exportContext_list : l:list uint8{List.Tot.length l == size_test70_export1_exportContext} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x6e; u8 0x74; u8 0x65;
    u8 0x78; u8 0x74; u8 0x2d; u8 0x31;
  ] in
  assert_norm(List.Tot.length l == size_test70_export1_exportContext);
  l
let test70_export1_exportContext : lbytes size_test70_export1_exportContext = createL test70_export1_exportContext_list

// generated: "03a3fccdcba44336ad4ac2889e6b91640b7137bdcbd248bb15d7009f431319aa"
inline_for_extraction
let size_test70_export1_exportValue: size_nat = 32
let test70_export1_exportValue_list : l:list uint8{List.Tot.length l == size_test70_export1_exportValue} =
  [@inline_let]
  let l = [
    u8 0x03; u8 0xa3; u8 0xfc; u8 0xcd; u8 0xcb;
    u8 0xa4; u8 0x43; u8 0x36; u8 0xad; u8 0x4a;
    u8 0xc2; u8 0x88; u8 0x9e; u8 0x6b; u8 0x91;
    u8 0x64; u8 0x0b; u8 0x71; u8 0x37; u8 0xbd;
    u8 0xcb; u8 0xd2; u8 0x48; u8 0xbb; u8 0x15;
    u8 0xd7; u8 0x00; u8 0x9f; u8 0x43; u8 0x13;
    u8 0x19; u8 0xaa;
  ] in
  assert_norm(List.Tot.length l == size_test70_export1_exportValue);
  l
let test70_export1_exportValue : lbytes size_test70_export1_exportValue = createL test70_export1_exportValue_list

let test70_export1_len:size_nat = 32
// generated: "436f6e746578742d32"
inline_for_extraction
let size_test70_export2_exportContext: size_nat = 9
let test70_export2_exportContext_list : l:list uint8{List.Tot.length l == size_test70_export2_exportContext} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x6e; u8 0x74; u8 0x65;
    u8 0x78; u8 0x74; u8 0x2d; u8 0x32;
  ] in
  assert_norm(List.Tot.length l == size_test70_export2_exportContext);
  l
let test70_export2_exportContext : lbytes size_test70_export2_exportContext = createL test70_export2_exportContext_list

// generated: "4970dbee2db6708f4d8060a29adb2ee002e4e0bd80b1e7ea6b437a7b05824f1c"
inline_for_extraction
let size_test70_export2_exportValue: size_nat = 32
let test70_export2_exportValue_list : l:list uint8{List.Tot.length l == size_test70_export2_exportValue} =
  [@inline_let]
  let l = [
    u8 0x49; u8 0x70; u8 0xdb; u8 0xee; u8 0x2d;
    u8 0xb6; u8 0x70; u8 0x8f; u8 0x4d; u8 0x80;
    u8 0x60; u8 0xa2; u8 0x9a; u8 0xdb; u8 0x2e;
    u8 0xe0; u8 0x02; u8 0xe4; u8 0xe0; u8 0xbd;
    u8 0x80; u8 0xb1; u8 0xe7; u8 0xea; u8 0x6b;
    u8 0x43; u8 0x7a; u8 0x7b; u8 0x05; u8 0x82;
    u8 0x4f; u8 0x1c;
  ] in
  assert_norm(List.Tot.length l == size_test70_export2_exportValue);
  l
let test70_export2_exportValue : lbytes size_test70_export2_exportValue = createL test70_export2_exportValue_list

let test70_export2_len:size_nat = 32
// generated: "436f6e746578742d33"
inline_for_extraction
let size_test70_export3_exportContext: size_nat = 9
let test70_export3_exportContext_list : l:list uint8{List.Tot.length l == size_test70_export3_exportContext} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x6e; u8 0x74; u8 0x65;
    u8 0x78; u8 0x74; u8 0x2d; u8 0x33;
  ] in
  assert_norm(List.Tot.length l == size_test70_export3_exportContext);
  l
let test70_export3_exportContext : lbytes size_test70_export3_exportContext = createL test70_export3_exportContext_list

// generated: "788172fc0c28c882c33c412302e92077df00cc377eb0775164674fb8891b33fd"
inline_for_extraction
let size_test70_export3_exportValue: size_nat = 32
let test70_export3_exportValue_list : l:list uint8{List.Tot.length l == size_test70_export3_exportValue} =
  [@inline_let]
  let l = [
    u8 0x78; u8 0x81; u8 0x72; u8 0xfc; u8 0x0c;
    u8 0x28; u8 0xc8; u8 0x82; u8 0xc3; u8 0x3c;
    u8 0x41; u8 0x23; u8 0x02; u8 0xe9; u8 0x20;
    u8 0x77; u8 0xdf; u8 0x00; u8 0xcc; u8 0x37;
    u8 0x7e; u8 0xb0; u8 0x77; u8 0x51; u8 0x64;
    u8 0x67; u8 0x4f; u8 0xb8; u8 0x89; u8 0x1b;
    u8 0x33; u8 0xfd;
  ] in
  assert_norm(List.Tot.length l == size_test70_export3_exportValue);
  l
let test70_export3_exportValue : lbytes size_test70_export3_exportValue = createL test70_export3_exportValue_list

let test70_export3_len:size_nat = 32
// generated: "436f6e746578742d34"
inline_for_extraction
let size_test70_export4_exportContext: size_nat = 9
let test70_export4_exportContext_list : l:list uint8{List.Tot.length l == size_test70_export4_exportContext} =
  [@inline_let]
  let l = [
    u8 0x43; u8 0x6f; u8 0x6e; u8 0x74; u8 0x65;
    u8 0x78; u8 0x74; u8 0x2d; u8 0x34;
  ] in
  assert_norm(List.Tot.length l == size_test70_export4_exportContext);
  l
let test70_export4_exportContext : lbytes size_test70_export4_exportContext = createL test70_export4_exportContext_list

// generated: "8afa937b906ba4c5e344d9886a25650444c46cc496167561daf60ea32d594ac1"
inline_for_extraction
let size_test70_export4_exportValue: size_nat = 32
let test70_export4_exportValue_list : l:list uint8{List.Tot.length l == size_test70_export4_exportValue} =
  [@inline_let]
  let l = [
    u8 0x8a; u8 0xfa; u8 0x93; u8 0x7b; u8 0x90;
    u8 0x6b; u8 0xa4; u8 0xc5; u8 0xe3; u8 0x44;
    u8 0xd9; u8 0x88; u8 0x6a; u8 0x25; u8 0x65;
    u8 0x04; u8 0x44; u8 0xc4; u8 0x6c; u8 0xc4;
    u8 0x96; u8 0x16; u8 0x75; u8 0x61; u8 0xda;
    u8 0xf6; u8 0x0e; u8 0xa3; u8 0x2d; u8 0x59;
    u8 0x4a; u8 0xc1;
  ] in
  assert_norm(List.Tot.length l == size_test70_export4_exportValue);
  l
let test70_export4_exportValue : lbytes size_test70_export4_exportValue = createL test70_export4_exportValue_list

let test70_export4_len:size_nat = 32

let test70 () =
  let res = test_setupBase test70_ciphersuite test70_skEm test70_pkEm test70_skRm test70_pkRm test70_info test70_enc test70_zz test70_key_schedule_context test70_secret test70_key test70_nonce test70_exporterSecret test70_encryption0_nonce test70_encryption1_nonce in
  let seq0:HPKE.seq_aead_s test70_ciphersuite = 0 in
  let enc_res0 = test_encryption test70_ciphersuite test70_key test70_nonce test70_exporterSecret test70_encryption0_aad test70_encryption0_plaintext seq0 test70_encryption0_ciphertext test70_encryption0_nonce in

  assert_norm (1 < pow2 (8 * 12));
  let seq1:HPKE.seq_aead_s test70_ciphersuite = (seq0 + 1) in
  let enc_res1 = test_encryption test70_ciphersuite test70_key test70_nonce test70_exporterSecret test70_encryption1_aad test70_encryption1_plaintext seq1 test70_encryption1_ciphertext test70_encryption1_nonce in

  assert_norm (2 < pow2 (8 * 12));
  let seq2:HPKE.seq_aead_s test70_ciphersuite = (seq1 + 1) in
  let enc_res2 = test_encryption test70_ciphersuite test70_key test70_nonce test70_exporterSecret test70_encryption2_aad test70_encryption2_plaintext 2 test70_encryption2_ciphertext test70_encryption2_nonce in

  assert_norm (3 < pow2 (8 * 12));
  let seq3:HPKE.seq_aead_s test70_ciphersuite = (seq2 + 1) in
  let enc_res3 = test_encryption test70_ciphersuite test70_key test70_nonce test70_exporterSecret test70_encryption3_aad test70_encryption3_plaintext 3 test70_encryption3_ciphertext test70_encryption3_nonce in

  assert_norm (4 < pow2 (8 * 12));
  let seq4:HPKE.seq_aead_s test70_ciphersuite = (seq3 + 1) in
  let enc_res4 = test_encryption test70_ciphersuite test70_key test70_nonce test70_exporterSecret test70_encryption4_aad test70_encryption4_plaintext 4 test70_encryption4_ciphertext test70_encryption4_nonce in

  assert_norm (5 < pow2 (8 * 12));
  let seq5:HPKE.seq_aead_s test70_ciphersuite = (seq4 + 1) in
  let enc_res5 = test_encryption test70_ciphersuite test70_key test70_nonce test70_exporterSecret test70_encryption5_aad test70_encryption5_plaintext 5 test70_encryption5_ciphertext test70_encryption5_nonce in

  assert_norm (6 < pow2 (8 * 12));
  let seq6:HPKE.seq_aead_s test70_ciphersuite = (seq5 + 1) in
  let enc_res6 = test_encryption test70_ciphersuite test70_key test70_nonce test70_exporterSecret test70_encryption6_aad test70_encryption6_plaintext 6 test70_encryption6_ciphertext test70_encryption6_nonce in

  assert_norm (7 < pow2 (8 * 12));
  let seq7:HPKE.seq_aead_s test70_ciphersuite = (seq6 + 1) in
  let enc_res7 = test_encryption test70_ciphersuite test70_key test70_nonce test70_exporterSecret test70_encryption7_aad test70_encryption7_plaintext 7 test70_encryption7_ciphertext test70_encryption7_nonce in

  assert_norm (8 < pow2 (8 * 12));
  let seq8:HPKE.seq_aead_s test70_ciphersuite = (seq7 + 1) in
  let enc_res8 = test_encryption test70_ciphersuite test70_key test70_nonce test70_exporterSecret test70_encryption8_aad test70_encryption8_plaintext 8 test70_encryption8_ciphertext test70_encryption8_nonce in

  assert_norm (9 < pow2 (8 * 12));
  let seq9:HPKE.seq_aead_s test70_ciphersuite = (seq8 + 1) in
  let enc_res9 = test_encryption test70_ciphersuite test70_key test70_nonce test70_exporterSecret test70_encryption9_aad test70_encryption9_plaintext 9 test70_encryption9_ciphertext test70_encryption9_nonce in

  let exp_res0 = test_export test70_ciphersuite test70_key test70_nonce test70_exporterSecret test70_export0_exportContext test70_export0_len test70_export0_exportValue in

  let exp_res1 = test_export test70_ciphersuite test70_key test70_nonce test70_exporterSecret test70_export1_exportContext test70_export1_len test70_export1_exportValue in

  let exp_res2 = test_export test70_ciphersuite test70_key test70_nonce test70_exporterSecret test70_export2_exportContext test70_export2_len test70_export2_exportValue in

  let exp_res3 = test_export test70_ciphersuite test70_key test70_nonce test70_exporterSecret test70_export3_exportContext test70_export3_len test70_export3_exportValue in

  let exp_res4 = test_export test70_ciphersuite test70_key test70_nonce test70_exporterSecret test70_export4_exportContext test70_export4_len test70_export4_exportValue in

  enc_res0 && enc_res1 && enc_res2 && enc_res3 && enc_res4 && enc_res5 && enc_res6 && enc_res7 && enc_res8 && enc_res9 && res && exp_res0 && exp_res1 && exp_res2 && exp_res3 && exp_res4


// Skipped unsupported test case 71

// Skipped unsupported test case 72

// Skipped unsupported test case 73

// Skipped unsupported test case 74

// Skipped unsupported test case 75

// Skipped unsupported test case 76

// Skipped unsupported test case 77

// Skipped unsupported test case 78

// Skipped unsupported test case 79

// Skipped unsupported test case 80

// Skipped unsupported test case 81

// Skipped unsupported test case 82

// Skipped unsupported test case 83

// Skipped unsupported test case 84

// Skipped unsupported test case 85

// Skipped unsupported test case 86

// Skipped unsupported test case 87

// Skipped unsupported test case 88

// Skipped unsupported test case 89

// Skipped unsupported test case 90

// Skipped unsupported test case 91

// Skipped unsupported test case 92

// Skipped unsupported test case 93

// Skipped unsupported test case 94

// Skipped unsupported test case 95

